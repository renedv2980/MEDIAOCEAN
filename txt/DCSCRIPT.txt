Facpak Scripts                                                                  
--------------                                                                  
A facpak script is a string of commands and data that will be used to           
call one or more facpak programs. The script will define what has to be         
done (Eg connect to the file progam and add a record) and the facpak            
script facility will build application TWAs and pass control to the             
various programs. The results of the transactions (error messages,              
cursor positions, output data) can be extracted from the application            
TWAs and sent back to the script.                                               
                                                                                
A script can be created by an existing facpak program and a new facpak          
facility will allow the application to execute the script. The task that        
initiated the script will be suspended until the task that executes             
the script has completed when control will be returned to initiating            
task.                                                                           
                                                                                
A script can be created by a PC program and sent as a request to ESS who        
will sent it to VERDICT. VERDICT will write the script to a WRKF file           
(the new fast worker file) and will inform FACPAK via a new LU6.2 hot           
connection between FACPAK and VERDICT. Facpak will process the script           
and when complete will inform EDICT via another new LU6.2 connection.           
EDICT will then send back the results of the script back to ESS.                
                                                                                
A $MAD facilitity will also allow a script and its data to be shipped           
from a PC to the host system via a LU2 as a series of data objects. The         
output from the scripts will be sent back to the caller via the LU2             
session.                                                                        
                                                                                
In order to save on transmission time and to make the PC application            
independent of the actual mainframe screens, it is suggested that a             
PC application could sent a script ID and the data to the host. The             
actual script could be stored on the Control file and the script                
routines could create the actual mainframe script by merging the data           
sent by the PC and the script definition record. It is assumed that in          
in this case the data sent from the PC will be in a predefined format           
known to the host.                                                              
                                                                                
Script Definition                                                               
-----------------                                                               
A script consists of an EBCDICT string of commands and data. Each               
command has a two chr Op code which may have operands and or data. The          
PAN libray book FASCRIPTQ defines equates for the Op code. This PAN             
book is listed as APPENDIX 1 of this document. Below is an example of           
a simple script the connects to Control/File program, enters record             
type, action, and Key, and extracts the returned header message.                
                                                                                
US04DDS1       Set user id from the script. In this case to DDS1                
SS01C          Set System from the script. In this case to C                    
PS03FIL        Set Program from the script. In this case to FIL                 
CT             Pass control to connect program                                  
FU             Position to First Unprotected Field                              
NU             Tab to next Unprotected Field                                    
EI03           Enter from the input data area a 3 chr field.                    
NU             Tab to next Unprotected Field                                    
EI03           Enter from the input data area a 3 chr field.                    
NU             Tab to next Unprotected Field                                    
EI08           Enter from the input data area an 8 chr field.                   
00             Hit enter key (ie pass control to application program)           
FP             Position to first protected field                                
MO60           Move from the TWA to the output area 60 chrs.                    
**             End of script                                                    
                                                                                
FACPAK Engineering                                                              
------------------                                                              
A new Facpak COMFACS routine FASCRIPT is used to execute a script. The          
parameter list is the address of the script, the address of an optional         
input data stream, and the address of an optional output data stream.           
FASCRIPT will obtain a dummmy UTL entry from a pool of UTL entries and          
will assign the calling task's VTAM buffer to the dummy UTL entry. The          
buffer will be used to define the script and is used for passing data           
between the calling task and the task that processes the script. The            
parameter list to FASCRIPT is defined in the PAN book FASCRIPTD which           
is included in Appendix 2.                                                      
                                                                                
The dummy UTL entry and the buffer will be used for the duration of the         
script. The script will be held in the FACWRKF file and will be read            
into the task TIA . The Buffer will be intitialised by creating a header        
record and by moving the script to the TBUFF (or the first part of the          
script if it is too long). Typical TBUFF header fields will be :                
                                                                                
Id of calling task (or LU62 id)                                                 
Worker file Id                                                                  
Location of this part of script in worker file                                  
Location of next part of script in worker file                                  
Address of next entry to be processed in TBUFF                                  
                                                                                
                                                                                
Writing a SCRIPT                                                                
----------------                                                                
Script source books may be created in GEN. They are saved as a sub-group of     
BOOK Records. It is necessary to enter 'S' in the record type field, and        
names up to 10 characters long are valid.                                       
(JCL books - Type J and LIBRARY books - Type L are also supported)              
All scripts must start with #SCRIPT XXXXXXXX where the X's denote the name      
of the script. Scripts are saved under this name as script records.             
Syntax has been designed to be pseudo C like, and a sample is given below.      
                                                                                
#SCRIPT SAMPLE //This is a comment to the end of the line                       
#DEF PASS DDS;LABEL L2;  //Equates PASS to DDS and TITLE to L2                  
* This line is ignored because it begins with a *                               
/* this is a comment which ............................................         
can span more than 1 line*/                                                     
USRS DDS1; SYSS CON; PRGS GEN; PWDS %PASS; $CT;                                 
NTHUNP 2;INPS EXC;TAB;INPS DISP;TAB;INPS FT/C;                                  
ENTER;.%LABEL;NTHUNP 8;INPI 3;TAB;INPI 3;ENTER;NTHUNP 12;NEXT;NEXT;NEXT;        
NEXT;NEXT;OUTO 8; NEXT;OUTO 8;END;                                              
                                                                                
#DEF is used to define a line of 8 character (max) equate names. There is no    
practical limit on the lengths of the value to which they may be equated.       
Commands are the equate names as defined in FASCRIPTQ or the 2 character op-    
codes themselves.                                                               
In addition to this are: Comments as detailed above                             
                         Equates as detailed above                              
                         ; which is used as a command delimiter                 
                         . which may be used to define a label                  
                         % which is used to define replacement for an equate    
                         ENTER which means the `enter` key was pressed          
                                                                                
To compile a script                                                             
-------------------                                                             
Scripts may be compiled using the UPDATE action. The result of compiling        
can be viewed on the print queue.                                               
Compiled scripts may also be viewed in GEN by entering SCRIPT as the            
record and the name as defined in #SCRIPT. This script viewer can also be       
used to poke in small changes to a compiled script without the need to          
recompile the whole script                                                      
A test script may be partially compiled by inserting a comditional compiler     
stop, the symbol @@. Compilation will stop at that point. Since the compiler    
performs no validation apart from basic substitution, it is up to the writer    
of the script to ensure that all relevant loops etc. are included.              
                                                                                
Appendix 1 - Script Commands defined by FASCRIPTQ                               
----------                                                                      
       ++INCLUDE FASCRIPTQ                                                      
                                                                                
Appendix 2 - Parameter list to V(FASCRIPT) defined by FASCRIPTD                 
----------                                                                      
       ++INCLUDE FASCRIPTD                                                      
                                                                                
------------------------------------------------------------------------        
                                                                                
Running scripts from CON/MAD                                                    
----------------------------                                                    
                                                                                
The Control MAD program has a generalised overlay for executing scripts.        
The program accepts a script name and record format followed by a number        
of data objects (Script input). MAD will then process the script and            
return a condition code and a number of data objects (Script output).           
                                                                                
For scripts there are four new MAD commands:-                                   
                                                                                
0035 - Upload script data to mainframe.                                         
0036 - Download script data to PC.                                              
0039 - Execute the script.                                                      
                                                                                
0038 - Fast (one frame) script executor.                                        
                                                                                
There are also four new data objects:-                                          
                                                                                
2004 - Script object.   Fmt=HLOLSCRIPT   HL     = Header length                 
                                         OL     = Output length                 
                                         SCRIPT = Script name                   
eg.                                                                             
To run a script called SCRDEMO with input data in the format of a 6chr          
header and 20 bytes output the script object would look like this:              
                                                                                
422004110620SCRDEMO+                                                            
                                                                                
2005 - Data object.     Fmt=HHHHHHInput data    (HHHHHH = Header chrs)          
                        or =HHHHHHOutput data                                   
                                                                                
A typical script record would look something like this.                         
                                                                                
42200528000001ADD   RECORDFREDS DATA+                                           
  |   | |     |                                                                 
  |   | |     |                                                                 
  |   | |     Input data (or output data)                                       
  |   | Header                                                                  
  |   Data len                                                                  
  Object                                                                        
                                                                                
                                                                                
                                                                                
2006 - Confirmation object. nnnnnn = number of data objects loaded.             
                                                                                
2007 - Return code. rrrrrr,pppppp  r=return code,p=position                     
                                                                                
For executing a script the sequence of events is as follows.                    
                                                                                
QQ3100035+  <------- Action 35 (Upload)            422004110620SCRDEMO+         
42200528000001ADD   RECORDFREDS DATA+42200528000002ADD   RECORDSTEVESDA         
TA+42200528000003ADD RECORDSJIMS  DATA+319990+  <--- EOD                        
                                                                                
The 999 object is used to specify end of data. When MAD sees the 999            
object it will respond with a confirmation object 2006 to show how many         
data objects it has loaded.                                                     
                                                                                
4120066000003+  3 objects loaded                                                
                                                                                
The script can now be executed.                                                 
                                                                                
QQ3100039+  <------- Run the script.                                            
                                                                                
This action returns the script return code object.                              
                                                                                
42200713000000,000021+  Return code zero (Good) Pos=end of script.              
42200713000999,000010+  Return code 999 (Bad) Pos=Error location.               
                                                                                
Once the script has been executed the output data is waiting to be              
downloaded. This is done with the action 36.                                    
                                                                                
QQ3100036+  <------- Download output.                                           
                                                                                
42200526000001Serial#0000234      +42200526000002Serial#0000235      +42        
200526000001Serial#0000236      +319990+                                        
                                                                                
                                                                                
                                                                                
Using MAD to perform repetitive program actions. ie adding records.             
-------------------------------------------------------------------             
                                                                                
=SCRIPT service request (AATK's profs.)                                         
---------------------------------------                                         
                                                                                
The following are the commands which can be used in =script.                    
1. In the SCRIPT NAME Field.                                                    
* followed by the name of a short script means display the script on the        
screen                                                                          
 TEXT or DIRECT means that the script is to be typed in onto the screen         
Inputting the name of a script causes the script to be passed to scrunch        
2. In the INPUT FILE Field.                                                     
TEXT SCREEN OR DIRECT means that the input is to come from the screen           
TEST means that the dummy worker file records, delimited by a º with eof        
denoted by a ºº are to be typed in on the input screen                          
S= followed by a number means that the worker file with that sequence           
number is                                                                       
    to be used for input                                                        
A valid worker file key (with the components separated by ,`s may also          
be used)                                                                        
A valid worker file key (with the components separated by ,`s may also          
be used)                                                                        
                                                                                
3. In the OUTPUT FILE Field.                                                    
No Input means default to screen                                                
* means use the same worker file for input as output                            
SCREEN, TEXT or DIRECT means output to the screen                               
A valid worker file key may be entered as above                                 
4. OPTIONS Field.                                                               
DDS Terminals may enter a logon id with the command                             
U=XXXXXXXXXX where XXXXXXXXXX is the logon id                                   
                                                                                
                                                                                
