*          DATA SET DCMINIO    AT LEVEL 011 AS OF 05/04/95                      
 MINIO - A KEYED ELEMENT BUFFER FILE MAINTENANCE MODULE                         
 ------------------------------------------------------                         
                                                                                
 Program source- DDMINIO                                                        
 Control dsect-  DDMINBLKD                                                      
 Relo name-      MINIO                                                          
 Phase name-     T00A74                                                         
                                                                                
 PURPOSE                                                                        
 -------                                                                        
                                                                                
  MINIO provides an efficient way to maintain, via datamgr-like                 
commands, an unlimited set of keyed elements or element clusters.               
                                                                                
  MINIO is intended for applications which involve a potentially large          
number of relatively small data items. Without it, the two most                 
obvious ways of handling such data are-                                         
                                                                                
                                                                                
      The smaller the average data item size the more wasteful this             
      method becomes. In many cases it is completely out of the                 
      question. For volatile data sets, which may involve                       
      massive and frequent deletes and re-adds, it is very cumbersome.          
      Also, dealing with the whole data set as a unit is awkward.               
                                                                                
   2) Keep the data items as elements. With this method you either              
      have to confine yourself to one record or deal with the                   
      problem of record overflow, which entails maintaining an                  
      element sequence across multiple records. This is tedious                 
      to do at all and very tedious to do efficiently.                          
                                                                                
    (A third approach would be to keep the data in stand-alone                  
     directory records. These are records on a pointer file that                
     contain data in the control bytes and disk address area and                
     do not act as pointers at all. This is a big improvement over              
     1) but still suffers from some of the drawbacks. Also, the                 
     dump/load facilities do not support this kind of record.)                  
                                                                                
WHAT DOES MINIO DO?                                                             
-------------------                                                             
                                                                                
   MINIO maintains the data as elements in a specialized set of                 
records which constitute a MINIO 'file'. A MINIO file can reside                
on any normal DDS pointer/direct access pair of files. Any number of            
MINIO files can reside on a given physical file, and they can exist             
alongside non-MINIO records.                                                    
                                                                                
   MINIO file record keys consist of two parts -                                
                                                                                
      - the master key, which identifies the set.                               
                                                                                
      - the element key, which is equal to or higher than the key of            
        the highest element within the record and lower than the                
        lowest key in the next record. The last record of a set                 
        always has ff's in the element key and is sort of an                    
        'anchor' record.                                                        
                                                                                
   Elements and clusters are kept in sequence within a record. When an          
add occurs which would cause record overflow, the record is split. A            
new record is created with lowest half (or some other percentage) of            
the elements being moved. This splitting is always in the direction of          
the front of the file. No attempt is made to combine records. A file            
record key is never changed.  If a record becomes empty it is marked            
deleted unless it is the last record of the set. MINIO may re-use               
deleted records.                                                                
                                                                                
   MINIO allows you to control the way in which records are split               
on overflow. In MINSPCT you can specify what percent of the                     
element space in the original record is to be moved to the new                  
record. The default is 50%. If you were doing a lot of adds in                  
ascending sequence (as in an initial file load from an external                 
source) you would end up with a more compact file if you specify                
a higher percentage. This is of most benefit in a file that is                  
likely to remain fairly static.                                                 
                                                                                
Note- keeping the high element key in the file key has the virtues              
      of simplicity and of guaranteeing that the file records need              
      never be accessed out of physical sequence. It has the                    
      disadvantages of limiting key size and of making combining                
      records difficult. There is another approach which involves               
      keeping a master directory of record contents (keys and/or                
      number of records) and using artificial record sequence numbers.          
      For a non-keyed, positional buffering application (like a text            
      file) this would be more appropriate.                                     
                                                                                
  MINIO allows the user to provide multiple io buffers. This can make           
it operation much more efficient in complex transaction sequences.              
                                                                                
ELEMENTS                                                                        
--------                                                                        
                                                                                
    Elements can exist singly or as part of a cluster.  In the case of          
a cluster the first element is the key element and the others are               
non-key elements. If you are using clusters you must set the range for          
non-key element codes in MINBLKD in MINNKLO and MINNKHI. All elements           
outside of that range are key elements. A cluster can contain only one          
key element. A cluster is, of course, maintained as a unit by MINIO and         
its position is determined by its key element. Clusters are not split           
between two physical records.                                                   
                                                                                
   Clusters are useful because trying to contain a complex set of               
variable length data in a single element is difficult.                          
                                                                                
   The user is responsible for creating the cluster. He passes it               
as a unit to MINIO.                                                             
                                                                                
   It is possible to keep many different kinds of elements and many             
different kinds of data in one MINIO file.                                      
                                                                                
ELEMENT KEYS                                                                    
------------                                                                    
                                                                                
    The element key length is a constant for a MINIO file.  The                 
user provides it in MINEKL.                                                     
                                                                                
   An element key consists of the element code and the first MINEKL-1           
data bytes (not, of course, the element length). If the data portion            
of the element is not long enough, the key is extended with x'00's on           
the right.                                                                      
                                                                                
    In the file record keys, the element key occupies the low order             
MINEKL bytes. The rest is the master key.                                       
                                                                                
    An element code of x'ff' is not allowed. There are no other code            
restrictions.                                                                   
                                                                                
HOW TO USE MINIO                                                                
----------------                                                                
                                                                                
   MINIO uses a control block dsect (MINBLKD) to receive various                
addresses and control values from the user, and to pass values back.            
                                                                                
   MINBLKD is contained in the PAN book DDMINBLK and is fairly well             
commented.                                                                      
                                                                                
   All errors (including end-of-file) are returned in MINERR.                   
                                                                                
PARAMETER LIST                                                                  
--------------                                                                  
                                                                                
PARAM 1      BYTE  0     Command equate (see DDMINBLKD)                         
             BYTES 1-3   A(MINBLK) Control Dsect.                               
                                                                                
MINIO COMMANDS                                                                  
--------------                                                                  
                                                                                
   Note- For all commands, set the master key in MINMKEY.  For READ and         
         HIGH, set the search argument in MINEKEY.  For ADD and WRITE,          
         set the element or cluster in the area pointed to by MINELEM.          
                                                                                
   Note- Minio automatically 'opens' the record set when necessary.             
         This entails building a record table in the area at MINRTAB.           
         The key (and disk address and status bytes) of the ff record           
         are set for the user in MINMKEY.                                       
                                                                                
READ       - Returns the exact element or cluster requested or sets             
----         record not found.                                                  
                                                                                
HIGH       - Returns the element or cluster with the requested key if           
----         one exists, or the next higher one, or end-of-file.                
                                                                                
SEQ        - Must be preceded by a READ, HIGH, SEQ, or BSEQ.                    
---          Returns the next element or cluster end-of-file.                   
                                                                                
BSEQ       - Must be preceded by a READ, HIGH, SEQ, or BSEQ.                    
----         Returns the next lower element or cluster or end-of-file.          
                                                                                
ADD          The element or cluster in MINELEM will be added to                 
---          the file. Duplicate element keys are not allowed.                  
                                                                                
WRITE      - Must be preceded by a READ, HIGH, SEQ, or BSEQ.                    
-----        Amend the data in MINELEM. The key can be changed, but             
             duplicate element keys are not allowed.                            
                                                                                
DEL        - Must be preceded by a READ, HIGH, SEQ, or BSEQ.                    
---          The element or cluster is removed from the record.                 
                                                                                
COPY       - A copy of the MINIO file is created. The new master                
----         key must be set in MINEKEY. Deleted records and                    
             records with no elems are not copied. No attempt is                
             made to compress the file.                                         
                                                                                
DLF        - Delete an entire MINIO file. The elements are left                 
---          intact, but each file record is marked deleted.                    
                                                                                
RFL        - Restore a previously deleted MINIO file.                           
---                                                                             
                                                                                
CLOSE      - Must be issued after any updative sequence of commands             
-----        so that MINIO can clean up any buffers with pending io's.          
             On a close MINIO checks to see if the status bytes now             
             in MINMKEY are equal to what they were when the set was            
             opened. If not the ff record and its pointer are updated           
             with the new values.                                               
                                                                                
  See DDMINBLK for further information.                                         
