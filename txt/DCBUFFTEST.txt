Source book:   DDBUFFTEST                                                       
Phase name:    BUFFTEST                                                         
                                                                                
 This program can be used to simulate the processing of BUFFERIN arrays.        
It allows you to define all the parameters for the BUFFD macro and              
run a test. An output trace showing various statistics can be used to           
determine how many track buffers and how much disk space to allocate            
to the specific application to get the desired performance results.             
                                                                                
 SYSIN cards:-                                                                  
                                                                                
 The first SYSIN card may specify a non-standard DDSIO version to load:         
                                                                                
DDSIO=DDSIOT                                                                    
                                                                                
 Several tests may be run in a single job - all the tests run on the            
same disk file (see sample execution JCL below).  Each test must                
specify all the parameters required for the BUFFD macro (see DCBUFFERIN         
for details) on separate input cards as follows:                                
                                                                                
TYPE=x        - where x=B, P or D                                               
                                                                                
KEYLEN=nnn    - where nnn is a number between 1 and 255                         
                                                                                
COMLEN=nnnn   - where nnnn is a number between 1 and 1000                       
                                                                                
COLUMNS=nnn   - where nnn is a number between 1 and 255 (for TYPE=B             
                and P only)                                                     
                                                                                
BUFFERS=nnn   - where nnn is a number between 2 and 255                         
                                                                                
                                                                                
 The following parameter card must also be specified:                           
                                                                                
NUMRECS=nnnn  - where nnnnn is a number between 1 and 1000000.  This            
                specifies the number of records to be put to the array.         
                                                                                
 The following parameter cards are optional:                                    
                                                                                
CYCLES=nnnn   - where nnnn is a number between 2 and 1024.  This                
                specifies the number of PUT cycles (see below).                 
                                                                                
HEXPRT=x      - where x is Y or N.  Specifies whether you want to get           
                a print out of the buffers when an I/O occurs.                  
                                                                                
NDXPRT=x      - where x is Y or N. Specifies whether you want to get            
                print outs of the buffer and track indices.                     
                                                                                
"comments"    - cards which start with either a space or an asterisk.           
                                                                                
 Once all the above parameters have been coded the following card               
will run the simulation:                                                        
                                                                                
RUN           - no parameters                                                   
                                                                                
 The simulation will put the number of records specified in the                 
NUMRECS card to the array in a 'bad' sequence.  Record keys are                 
created with an EBCDIC number representing the key in the following             
sequence:  Highest, lowest, highest-2, lowest+2 etc., eg if the number          
of records specified was 10 the following keys would be created:-               
                                                                                
 Record#01 Key=00000010                                                         
 Record#02 Key=00000001                                                         
 Record#03 Key=00000008                                                         
 Record#04 Key=00000003                                                         
 Record#05 Key=00000006                                                         
 Record#06 Key=00000005                                                         
 Record#07 Key=00000004                                                         
 Record#08 Key=00000007                                                         
 Record#09 Key=00000002                                                         
 Record#10 Key=00000009                                                         
                                                                                
 To emulate updating of records (putting a record whose key already             
exists in the array) use the CYCLES parameter card to set the number            
of times the records in the array are updated. The number specified             
in this parameter should be one greater than the number of updates              
desired (the first cycle will add records to the array, subsequent              
cycles will update records as their keys will already exist in the              
array).  Records are updated in the same sequence in all cycles.                
                                                                                
                                                                                
 Printed output:                                                                
                                                                                
 The first page of every test will be a print out of the input                  
parameters followed by:                                                         
                                                                                
 Initial statistics followed by                                                 
                                                                                
 A trace of all the adds to the array followed by                               
                                                                                
 A trace of all the updates to the array (if CYCLES>1) followed by              
                                                                                
 Put statistics followed by                                                     
                                                                                
 A trace of all records in the array (a read high for a key of                  
binary zeroes followed by a read sequential of all records in                   
the array until EOF is encountered) followed by                                 
                                                                                
 Final statistics                                                               
                                                                                
------------------------------------------------------------------------        
 The statistics matrix:                                                         
------------------------------------------------------------------------        
**** Statistics ****                                                            
Usage count.........nnnnnnnn (where n is the current usage count)               
I/O count...........nnnnnnnn (where n is the number of I/Os executed)           
Tracks allocated....nnnnnnnn (where n is the number of tracks allocated)        
Tracks used.........nnnnnnnn (where n is the number of tracks used)             
Track size..........nnnnnnnn (where n is the available track size)              
Track buffer size...nnnnnnnn (where n is the used track size)                   
Record size.........nnnnnnnn (where n is the record size)                       
Records per track...nnnnnnnn (where n is the number of records/track)           
Total index size....nnnnnnnn (where n is the indices storage allocated)         
Maximum records.....nnnnnnnn (where n is the maximum number of records)         
Number of records...nnnnnnnn (where n is the actual number of records)          
Storage allocated...nnnnnnnn (where n is the total storage allocated)           
------------------------------------------------------------------------        
                                                                                
 The final statistics matrix tells you all you need to know to tune             
your application.  There is a balance between the number of I/Os you            
are willing to do and the amount of storage you allocate.  In theory            
more storage buffers means less I/O but in some cases allocating more           
storage doesn't reap the benefits expected - you may have to allocate           
a lot more buffers to get a good reduction in I/O executes.  If enough          
virtual storage is available you can have the entire array in storage           
all the time and therefore reduce the I/O count to zero.  You can               
calculate the number of buffers required for this using the formula:            
                                                                                
 Number of records * Record length                                              
 --------------------------------- +1 = number of buffers to allocate           
       Track buffer size                                                        
                                                                                
 Sample execution JCL:                                                          
                                                                                
//FLLL     JOB  ,FLLL,CLASS=A,MSGCLASS=X,MSGLEVEL=(2,0)                         
//*MAIN CLASS=SYSTEMS                                                           
//BUFFTEST EXEC PGM=BUFFTEST,REGION=6144K                                       
//STEPLIB  DD   DSN=DDS.LOADLIB,DISP=SHR                                        
//LOADLIB  DD   DSN=DDS.LOADLIB,DISP=SHR                                        
//SYSOUT   DD   SYSOUT=*                                                        
//SYSPRINT DD   SYSOUT=*                                                        
//* ** Note:  BUFF1D is BUFFERIN file defined for TESTBUFF **                   
//BUFF1D   DD   UNIT=VIO,SPACE=(CYL,(10),,CONTIG),DSN=&&BUFF1                   
//*                                                                             
//SYSIN    DD   *,DLM=XX,DCB=BLKSIZE=80                                         
                                          >> Comment card                       
DDSIO=DDSIOT                              >> Test version of DDSIO used         
                                          >> Comment card                       
 ** START OF FIRST SIMULATION **          >> Comment card                       
TYPE=P                                    >> Packed accumulators                
KEYLEN=64                                 >> Key length 64                      
COMLEN=32                                 >> Comment length 32                  
COLUMNS=255                               >> 255 accumulators                   
BUFFERS=40                                >> 40 buffers                         
                                          >> Comment card                       
NUMRECS=2000                              >> Add 2000 record                    
CYCLES=2                                  >> Update them once                   
                                          >> Comment card                       
HEXPRT=N                                  >> Don't print I/O buffers            
NDXPRT=Y                                  >> Do print indices                   
                                          >> Comment card                       
RUN                                       >> Run the first simulation           
                                          >> Comment card                       
 ** START OF SECOND SIMULATION **         >> Comment card                       
TYPE=B                                    >> Binary accumulators                
KEYLEN=12                                 >> Key length 12                      
COLUMNS=10                                >> 10 accumulators                    
BUFFERS=4                                 >> 4 buffers                          
                                          >> Comment card                       
NUMRECS=5000                              >> Add 5000 records                   
CYCLES=10                                 >> Update them 9 times                
                                          >> Comment card                       
HEXPRT=N                                  >> Don't print I/O buffers            
NDXPRT=Y                                  >> Do print indices                   
                                          >> Comment card                       
RUN                                       >> Run the second simulation          
                                          >> Comment card                       
XX                                        >> End of SYSIN data                  
//                                        >> End of JCL (optional)              
