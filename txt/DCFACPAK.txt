FACPAK is the name of the DDS program system that controls all on-line program  
activity in the DDS system.  On-line programs are those programs that are       
initiated by the entry of a message at one of the communications terminals at   
DDS or one of DDS's clients.                                                    
         <   > How 3270's work                                                  
In order to understand the operation and function of FACPAK, it may be helpful  
to follow the path of one of these input messages as it is processed by FACPAK, 
and a response is returned to the original terminal.                            
                                                                                
Most of the terminals connected to FACPAK are IBM 3270's or compatible equipment
from alternative manufacturers.  These terminals are fairly complex, internally 
programmed, devices, unlike the simpler devices used on most time sharing and   
minicomputer systems.  The 3270 is actually a terminal system, consisting of the
terminal controller, and the display screen/keyboard units.  Depending on the   
controller, there may be only a few, or 16 or more screen/keyboard units        
attached.  Printers may also be attached, but we will return to them later.  The
screen/keyboard units are called 3278's, the controllers are 3274's or 3276's.  
                                                                                
The 3270 type terminals provide for limited output and input formatting and     
editing in the controller and display.  This allows a large reduction in the    
amount of data that must be sent between the terminal and the main computer, and
insures a substantial amount of structure is present in input messages, thus    
simplifying input editing.                                                      
                                                                                
The input editing consists of enabling specific data fields on the screen for   
update, and protecting the rest.  This means that when an operator types on the 
keyboard, data will appear on the screen, and be saved in an internal buffer by 
the 3270, so long as the cursor is located in an unprotected field.  If the     
operator attempts to type into a protected field, an alarm will sound, the      
keyboard will lock, and an error indicator will appear on the screen to explain 
the error.  The operator must reset the terminal to allow further input.        
                                                                                
When the operator has filled all desired information into the screen, the enter 
button is pressed to signal the 3270 that the data is ready to be sent to the   
main computer.  Until this point, all activity has been confined to the 3270,   
and nothing has occured at the main system.  Now the 3270 extracts from the     
screen buffer only that data which has been entered by the operator, and builds 
it into a message to be sent to the main system.  Meanwhile, the same thing has 
been happening on all the other screens attached to this same 3270 controller,  
as well as the screens attached to all the other controllers.                   
         <   > Communication to DDS                                             
The input message will now be sent over a communications line to the DDS        
computers. A communications line is simply a telephone line that is designed for
transmitting data, rather than voice calls.  Lines are available to operate in  
various ways, depending on the usage required.  DDS's clients use their         
terminals so frequently and constantly during the work day, that it would be    
impractical to dial the DDS number each time they wished to be connected, so our
clients use a type of line called a leased, or dedicated, line.  This means that
it is constantly connected; no dialing is required.                             
                                                                                
The communications line to a given client office services all the terminals in  
that office, and may even be routed to more than one controller in the same, or 
another, office.  This is called multi-drop communications. Since many terminals
share the line, some means must be used to allocate the line to only one        
terminal while it sends it's message. The 3270 uses a technique called polling  
to accomplish this.                                                             
         <   > Polling                                                          
Polling means that when the 3270 controller is ready to send a message from a   
terminal, it does not immediately begin to use the line, instead it just listens
for a message from the main computer.  When the main system wishes to receive   
from this particular terminal, it sends a poll, which is a special message that 
says 'terminal n, do you have a message for me?'.  If there is no message, the  
controller responds 'no', but if there is, the message is sent.                 
                                                                                
Of course, these poll messages do not just appear by magic, there is a part of  
FACPAK that is constantly sending them to one terminal after another. This part 
is called Line Control, and it has responsibility for both sending and receiving
on communications lines.  We will discuss sending more later.                   
         <   > Line Control                                                     
Line Control must know which terminals to poll, so there is a list in FACPAK,   
called the User Terminal List (UTL), that Line Control follows.  This list is   
also used to record much information about the terminal, such as what type of   
equipment it is, what program it is currently using, what file set it may       
access, etc.  An individual entry in this list is often also called a UTL.      
         <   > Message Queue In                                                 
After the input message is received, it is passed by Line Control to a FACPAK   
module called Message Queue In, which, along with a module called Tasker,       
handles problems associated with processing many input messages at once.  We    
will return to these modules later, but for now will assume that no other work  
is in progress, so that this message can be processed immediately.              
         <   > Monitor: TIA to TWA                                              
When processing of an input message begins, it is passed to a module called     
Monitor, which controls the program which processes it.  Monitor first expands  
the input message into a Terminal Work Area (TWA), reconstructing the original  
input screen, both protected and unprotected fields, by combining the input     
message contained in the Terminal Input Area (TIA) with it's own saved version  
of the protected part of the screen.  It knows what is on the protected part of 
the screen because it saved the screen from the last time it was sent to the    
terminal.  We will discuss how the first screen gets there later.               
         <   > Application Handling                                             
Monitor now calls the application program to process the input message.  The    
application program runs as a subroutine of Monitor.  It is passed the address  
of the TWA as one of it's parameters, so it can see what was on the terminal    
screen when the user decided to send the message.  The particular application   
program that Monitor calls is determined by an entry in the UTL for this        
terminal.  The program is also passed the addresses of several useful general   
purpose subroutines it can use in the course of processing the message.         
                                                                                
Eventually, the application program will finish processing the input screen. In 
the course of doing so, it may have modified the TWA, changing various fields,  
moving in an error message, or replacing it's contents with a completely new    
screen image.  When the application program (subroutine) returns to Monitor, the
TWA is translated into an output message.  This output message will update only 
the information on the terminal screen which has been changed.  Information     
placed in the TWA by the application program is used to determine which fields  
have been changed and must be updated.                                          
         <   > Sending Message Back                                             
Monitor now passes the output message to Line Control, where it is held until   
the line that this terminal is attached to becomes available.  Then, Line       
Control sends the message to the terminal controller by first sending a special 
message called an Addressing Sequence.  This special message says 'are you ready
to receive a message?'.  If the reply is 'no', the line is used to send or      
receive some other message, but if the reply is 'yes', the output message is    
sent to the destination terminal.                                               
         <   > $CT - Connect procedure                                          
We now know how messages are processed during a work session with a user        
terminal, but we have not yet discussed how things get started:  how does the   
user's terminal screen get set up with the protected and unprotected screens in 
the first place, and how does the program number get into the UTL?  Both of     
these functions are performed by a special FACPAK program called the Connect    
Program.  Before a terminal has been used for the first time, any input at all  
will be passed to the Connect Program. If this program cannot interpret it,     
(perhaps because the terminal doesn't have it's initial protected/unprotected   
screen) the Connect Program simply sends out an initial screen image, and an    
error message instructing the user to 'connect'.  If the input is a valid input 
from the initial screen, the Connect Program interprets it as a request to use a
named application program, places that program's number into the UTL, and sends 
that program's initial screen to the user terminal.                             
         <   > Multiple Tasks                                                   
Up to now, this discussion has assumed that only one input message is being     
processed at a time.  In order to improve performance, FACPAK can actually      
process many messages at once.  Several FACPAK modules act together to allow    
this.  When Line Control has received an input message, it passes the message to
Message Queue In, where rather than being passed directly to Monitor, the       
message is queued for later processing. The messages are queued by system (Spot,
Acc, etc.) and in the order they were received.  A FACPAK module called Tasker  
is then responsable for scheduling the processing of the message.  Tasker is    
called at the start of the day to initiate processing, and then also gains      
control during the day at the end of each transaction, and whenever the system  
must wait for the completion of a disk i/o request.  Whenever Tasker gains      
control, it attempts to start another task processing another input message.  It
checks to make sure that the maximum number of simultaneous tasks has not been  
exceeded, and if not starts another one if there is any input to be processed.  
Input is selected for processing by system, but there are no restrictions on    
which application programs or files can be processed simultaneously.  Each task 
is allocated its own section of main storage by FACPAK, containing it's i/o     
buffers, TIA, TWA, program load area, and working storage area.  The layout and 
usage of this working storage area is discribed and discussed elsewhere.        
(DCWORKSTOR)                                                                    
         <   > System ABENDs                                                    
Various conditions that occur during application program execution can cause    
abnormal program termination.  These include program checks, loops (detected by 
the expiration of a timer set by FACPAK), deadly embrace (attempting to lock a  
disk record locked by another application task while holding a lock on a record 
that task has requested a lock on), and others. Locking and deadly embrace are  
discussed further in the Data Management documents.  When any of these          
conditions occur, the task must be abnormally terminated but FACPAK must        
continue to run.  A FACPAK module called Abend intercepts these conditions, and 
restores the system to full operation.  Abend writes an image of main storage to
disk so that storage dumps can be displayed or printed, and then generates a    
message to the terminal that originated the input message that was being        
processed at the time of the abnormal termination.  The message discribes what  
occured and give some debugging information.  Abend then cleans up all the      
FACPAK internal control blocks related to this task and this message, and passes
control to tasker to start up another task.                                     
         <   > Recovery from ABEND                                              
When a transaction is abnormally terminated during it's processing, it may have 
written or added updated records to the disk files.  These updates may be       
incorrect, incomplete, or inconsistant so they must be removed from the files.  
FACPAK makes provisions to automatically handle these problems by maintaining a 
recovery file for each system that records the contents of each record before   
and after each change.  Should the changes need to be removed, FACPAK will      
"unwind" all the changes associated with a given transaction by stepping        
backwards through the recovery file and restoring all the "before" records to   
the main disk file.                                                             
         <   > Handling SOON reports                                            
Often during the course of the day's work, one of our users will have a need to 
process a report that will require a large amount of disk i/o or main processor 
resources.  Rather than run this report as a transaction, we wish to run it as a
separate job at a lower priority than FACPAK so that it's demands will not      
result in poor performance for the other users.  The FACPAK facility that allows
this is called the SOON system.  SOON allows an online transaction to generate a
set of job control statements and input data statements which are then sent to  
the MVS operating system to be processed as an off line job.  SOON also provides
for notifying the user when the job is completed and the output is ready for    
viewing or printing.                                                            
         <   > The Print Queue                                                  
The output of these off line jobs, and also that of many on line transactions,  
is stored in a special file called the print queue.  The print queue is a       
special file that can be updated simultaneously by both online and multiple off 
line applications.  It contains a directory which seperates the print format    
output by client, and provides for sequential numbering of reports generated by 
a client.  The reports on the print queue can be displayed on a user terminal,  
or can be sent to a remotely attached printer for hard copy output.  They can   
also be sent to a Shuttle, a DDS product consisting of an IBM PC/AT and DDS     
developed software that allows the PC to receive the reports, store them on     
local disk, and later print them in any order as many times as desired.         
         <   > CALLOV                                                           
One of the general purpose subroutines provided within FACPAK for the use of    
application programs is a phase loader called Call Overlay (CALLOV). This       
routine can load both executable modules and screen images into the             
application's task working storage.  Screen image phases are loaded into the    
task's TWA at an address passed to CALLOV by the caller.  Executable phases are 
loaded automatically into the correct position in the task's programs area based
on the predefined overlay structure of the application program.                 
         <   > Programs File                                                    
All these loadable phases are contained in a disk file called the programs file.
This file is built and loaded on request by the operators when FACPAK is started
in the morning.  Individual phases can also be added to the file or updated     
during the day by a program called the $LOAD service request.  The executable   
phases are created by the MVS assembler and linker.  The screen overlay phases  
are created by a DDS program called Supergen.                                   
         <   > Application Controllers                                          
Generally, the program called by Monitor consists of many phases, each designed 
to accomplish one part of an overall task.  The main phase, which is the one    
called directly by Monitor, is usually a special phase called a Controller.  The
Controller does some basic set up and initialization processing, then examines  
the input to determine which phase should be loaded to do further processing.   
The Controller then loads that phase and passes control to it.  The Controller  
generally also contains a collection of subroutines tha are of general utility  
for all the phases of the program.  While several such Controllers have been    
developed for various systems, more recent systems have used a generalised      
Controller called GENCON that does all of this work based on tables assembled   
into a seperate phase called a System Controller.                               
