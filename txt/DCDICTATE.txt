         TITLE 'DICTATE - DATA DICTIONARY MODULE'                               
The DDS data dictionary system consists of a catalogue of common words          
and phases for a specific system in a specific language. Each item in           
a dictionary is assigned a unique number for that system and the DICTATE        
module will translate the numeric dictionary numbers to the text that is        
contained in the dictionary for the language.                                   
                                                                                
In order that a dictionary reference can be spotted in a string of text         
(eg a print line) it must be preceded by a special hex code that shows          
that a dictionary reference number follows. This code is called an              
escape character. There are several values defined, each with a specific        
function. These are equated in the Pan book DDDDEQUS and are as follows:        
                                                                                
DD#ESCL2 EQU   32   X'20'=ESCAPE/LEFT/LEN=2                                     
DD#ESCL3 EQU   33   X'21'=ESCAPE/LEFT/LEN=3                                     
DD#ESCL  EQU   34   X'22'=ESCAPE/LEFT                                           
DD#ESCC  EQU   35   X'23'=ESCAPE/CENTRE                                         
DD#ESCR  EQU   36   X'24'=ESCAPE/RIGHT                                          
DD#ESCS  EQU   37   X'25'=ESCAPE/SQUASH                                         
DD#ESCSX EQU   38   X'26'=ESCAPE/ENDOFSQUASH                                    
DD#ESCF  EQU   39   X'23'=ESCAPE/CENTRE IN FIELD FILLED WITH HYPHENS            
*                                                                               
DD#ESUL2 EQU   40   X'28'=ESC-UNDERLINE/LEFT/LEN=2                              
DD#ESUL3 EQU   41   X'29'=ESC-UNDERLINE/LEFT/LEN=3                              
DD#ESUL  EQU   42   X'2A'=ESC-UNDERLINE/LEFT                                    
DD#ESUC  EQU   43   X'2B'=ESC-UNDERLINE/CENTRE                                  
DD#ESUR  EQU   44   X'2C'=ESC-UNDERLINE/RIGHT                                   
DD#ESUS  EQU   45   X'2D'=ESC-UNDERLINE/SQUASH                                  
                                                                                
Each of the hex codes is followed by a two byte dictionary reference            
number that identifies the text string. Each system has a standard              
set of equates that can be included in the program. The equates are a           
set of pan books with the name XXDDEQUS where XX is the standard two            
char system id. A selection of items in the Account system pan book             
ACDDEQUS are shown below. Note the naming convention that all dictionary        
equates for the account system start with AC# which makes them unique in        
all existing programs and easy to locate with editor programs. The max          
value of a dictionary reference number is 16k. The X'80' bit is used to         
flag that the equated value refers to an item that is actually stored           
as a type D item on disk GENDIR/GENFIL and is located via GETTEXT. The          
x'40' bit is used to flag that the item is to be found in the common            
data dictionary.                                                                
                                                                                
AC#ACC   EQU   0036                ACCOUNT                                      
AC#ACCAD EQU   0307                ACCOUNT ADDRESS                              
AC#ACCCN EQU   0254                ACCOUNT CODE AND NAME                        
AC#ACCF  EQU   0149                ACCOUNT FILTER                               
AC#ACCHX EQU   0026+32768          ACCOUNT HISTORICAL CROSS ANALYSIS            
AC#ACCL  EQU   0179                ACCOUNT LISTING                              
AC#ACCN  EQU   0037                ACCOUNT NAME                                 
AC#ACCP  EQU   0308                ACCOUNT PROFILE                              
AC#ACCTS EQU   0309                ACCOUNT TOTALS                               
                                                                                
All escape sequences are four bytes long (except X'20' and X'21' which          
are three bytes long). The fourth character in the escape sequence is           
the total length of the field. The DICTATE module will find the longest         
phrase in the dictionary shorter that the defined field length. If no           
shorter field exists, it take the shortest expression in the dictionary         
and truncates it to the output field length. The output field containing        
the escape sequence will then be filled with spaces and the text from           
the dictionary will be moved to the field as defined by the escape              
sequence control character. The special single byte X'26' escape chr can        
be inserted in a data string to delimit the extent of any squash escape         
sequences that preceed in in the data string. Squashing occurs on the           
whole string unless a pair of end of squash chrs X'2626' is encountered         
in the string to delimit the squashing action.                                  
Escape sequences are as follows :-                                              
                                                                                
X'20nnnn'    Defines a two byte short data field (third set to space)           
X'21nnnn'    Defines a three byte short data field.                             
X'22nnnnll'  Left justify the text string defined by nnnn in a field of         
             length ll bytes.                                                   
X'23nnnnll'  Centre justify the text string defined by nnnn in a field          
             of length ll bytes.                                                
X'24nnnnll'  Right justify the text string defined by nnnn in a field           
             of length ll bytes.                                                
X'25nnnnll'  Left justify the text string defined by nnnn in a field of         
             length ll bytes and delete trailing blanks ie squash data.         
X'2626'      Terminate squashing. Set to blanks after squash.                   
X'27nnnnll'  Centre justify the text string defined by nnnn in a field          
             of length ll bytes that has been filled with hyphens.              
                                                                                
There also exists a similar set of escape sequences where the X'08' bit         
of the escape code has been turned on. These work as above except that          
underline characters are moved into the field instead of the text string        
located in the dictionary. (See the DDDDEQUS equates above).                    
                                                                                
If the X'80' bit of the length field is on then it is assumed that the          
field len (without the x'80' bit on) is split into two halves as for a          
column heading eg X'90' implies a field 16 bytes long to be treated as g        
two 8 byte fields. If the dictionary contains such a field then it will         
be used. The heading feature can be invoked in the macros DCDD,MVCDD by         
using an alignment chr of H.                                                    
                                                                                
DICTATE parameter list.                                                         
*---------------------                                                          
This is provided by the Pan book DDDICTATED and is shown below. Dictate         
is called automatically in the online system for all TWA fields, and            
offline for all print lines printed via V(PRINT) if flags have been set.        
If the system code is set to a space chr then DICTATE will find the             
system from the UTL for online applications or from MASTC for offline           
programs. If the language code is set to a space chr then the language          
value will be taken from the UTL online and from MASTC offline.                 
                                                                                
DICTATED DSECT                     PARAMETER LIST FOR DICTATE                   
*                                                                               
DDACTN   DS    X                   ACTION BYTE                                  
DDACTNA  EQU   C'A'                GET A(SINGLE ESCAPE SEQUENCE ENTRY)          
DDACTNC  EQU   C'C'                SET DEFAULT CASE TO SUBACTION VALUE          
DDACTNI  EQU   C'I'                INITIALIALISE DICTIONARY                     
DDACTNL  EQU   C'L'                TRANSLATE LIST IN DDIADR TO DDOADR           
DDACTNS  EQU   C'S'                SINGLE ESCAPE SEQUENCE TRANSLATE             
DDACTNT  EQU   C'T'                MULTIPLE TRANSLATE LENGTH IN DDILEN          
*                                                                               
DDRETN   DS    X                   RETURN CODE OR SUB ACTION VALUE              
DDCASEU  EQU   C'U'                SET CASE TO UPPER (DEFAULT OFFLINE)          
DDCASEL  EQU   C'L'                SET CASE TO LOWER                            
*                                                                               
DDSYS    DS    X                   SYSTEM CODE EG ACC=X'06' OR SPACE            
DDLANG   DS    X                   LANGUAGE CODE EG GER=X'03' OR SPACE          
*                                                                               
DDILEN   DS    X                   INPUT DATA LENGTH (ACTION T ONLY)            
DDIADR   DS    AL3                 INPUT DATA ADDRESS                           
*                                                                               
DDOLEN   DS    X                   OUTPUT DATA LENGTH (ACTION A)        00021**3
*                                   CALLER MUST EXTRACT "DDOLEN" BYTES  00022**4
*                                   FROM "DDOADR" IMMEDIATELY UPON      00023**4
*                                   RETURN FROM DICTATE                 00024**4
DDOADR   DS    AL3                 OUTPUT DATA ADDRESS (ACTION L AND A)         
                                                                                
Defining escape sequences via MVCDD macro                                       
*----------------------------------------                                       
A typical program will move English text to an output area by using             
a data constant in the program or a literal. To convert to using the            
data dictionary a special MVCDD macro is available to replace the               
MVC instuction when moving text strings. To convert to MVCDD replace            
the MVC op-code by MVCDD, leave the first field alone, and replace              
the second field by the data dictionary reference equate.The length             
is deduced from the first field as normal,and the macro generates a             
four chr escape sequence to give a left justified action. To specify            
anything other than left justify use a special third parameter in               
MVCDD to specify justification ie L for left, R for right, C for centre         
and S for squash. If the output is required to be an underlining string         
then the justify chr shoul be followed by a U to indicate this                  
requirement. Examples for the account system are shown below .                  
The MVCDD macro generates a single MVC instruction so that B *+10 etc           
can be left unchanged. The special alignment chr H can be used to               
define that the field length is to be treated as a heading ie consists          
of two fields each of half the nominated length.                                
Note that the standard equate book must also be included in the assembly        
which in the case of the account system is ACDDEQUS.                            
                                                                                
         MVC   FIELD+3(11),=C'AMOUNT     '                                      
         MVCDD FIELD+3(11),AC#AMT                                               
         ...                                                                    
         MVC   FIELD,=C'  AMOUNT'                                               
         MVCDD FIELD,AC#AMT,R                                                   
         ...                                                                    
         MVC   FIELD1,=C' GROSS  '                                              
         MVC   FIELD2,=C'BILLED  '                                              
         MVCDD WORK(16),AC#GRSBD,H                                              
         MVC   FIELD1,WORK                                                      
         MVC   FIELD2,WORK+8                                                    
         ...                                                                    
         MVC   SUBL1(12),=C'   AMOUNT   '                                       
         MVC   SUBL2(12),=C'   ------   '                                       
         MVCDD SUBL1(12),AC#AMT,C                                               
         MVCDD SUBL2(12),AC#AMT,CU                                              
         ...                                                                    
         MVC   SUBL1(12),=C'---AMOUNT---'                                       
         MVCDD SUBL1(12),AC#AMT,F                                               
          ...                                                                   
       ++include ACDDEQUS                                                       
                                                                                
Defining escape sequences via DCDD macro                                        
*----------------------------------------                                       
Those programs which define text strings via DC statements can be               
converted by using the DCDD macro to define a data dictionary constant.         
The opcode is DCDD with the first parameter as the data dictionary              
reference equate,the second parameter as the length of the field, and           
the optional third parameter as the justification and underline chrs as         
in the MVCDD macro defined above. There is also an optional keyword             
parameter that defines the padding required for the remainder of the DC         
field after the escape sequence.                                                
The used of DCDD is best illustrated by examples as shown below.                
                                                                                
         DCDD  AC#AMT,3                                                         
 +       DC    AL1(33),AL2(AC#AMT)                                              
         ....                                                                   
         DCDD  AC#AMT,6                                                         
 +       DC    AL1(34),AL2(AC#AMT),AL1(6),2C' '                                 
         ....                                                                   
         DCDD  AC#AMT,16,H                                                      
 +       DC    AL1(34),AL2(AC#AMT),AL1(16+128),2C' '                            
         ....                                                                   
         DCDD  AC#AMT,6,PAD=NONE                                                
 +       DC    AL1(34),AL2(AC#AMT),AL1(6)                                       
         ....                                                                   
         DCDD  AC#AMT,10,RU,PAD=NULLS                                           
 +       DC    AL1(44),AL2(AC#AMT),AL1(10),6X'00'                               
         ....                                                                   
       ++include ACDDEQUS                                                       
                                                                                
Redefining escape sequences via DSDD macro                                      
*----------------------------------------                                       
Those programs which define text strings via DCDD statements can have           
an equivalent DS area defined by copying the DCDD statement and changing        
the op code to DSDD. If the data dictionary equated name has the format         
XX#ABCDE the the name of the DS area generated by DSDD will be XX@ABCDE         
or if the underline function is requested XX$ABCDE. Hence the XX#               
convention is extended to XX@ and XX$. The later are assumed to be              
data dictionary references that have been resolved by a call to DICTATE.        
The generated label can be over written by the LABEL= parameter. This is        
especially useful when different versions of the same data dictionary           
item is required (eg different lengths) as duplicate labels would be            
generated.                                                                      
Examples of the use of DCDD and DSDD are shown below.                           
                                                                                
         DCDD  AC#AMT,6,PAD=NONE                                                
 +       DC    AL1(34),AL2(AC#AMT),AL1(6)                                       
         DCDD  AC#AMT,6,LU,PAD=NONE                                             
 +       DC    AL1(42),AL2(AC#AMT),AL1(6)                                       
         DCDD  AC#AMT,3,L,PAD=NONE                                              
 +       DC    AL1(41),AL2(AC#AMT)                                              
                                                                                
         DSDD  AC#AMT,6                                                         
AC@AMT   DS    CL(6)                                                            
         DSDD  AC#AMT,6,LU                                                      
AC$AMT   DS    CL(6)                                                            
         DSDD  AC#AMT,3,L,PAD=NONE,LABEL=AC3AMT                                 
AC3AMT   DS    CL(3)                                                            
                                                                                
Building lists of escape sequences using DCDDL and DSDDL macros                 
*--------------------------------------------------------------                 
DICTATE can be called passing a list of dictionary escape sequences             
(with PAD=NONE) in the second parameter and passing in the third                
parameter an output area where the output list will be created. The             
list of escape values can be built by the DCDDL macro. This is the              
same as DCDD except that PAD=NONE is forced by DCDDL. Each item                 
created by DCDDL macro is saved in a macro global table and all                 
preceeding rererences can be created by a single invocation of the              
DSDDL macro. If the XX@... and XX$... data names and areas generated            
by DSDDL are to appear in an assembly listing code DSDDL PRINT=YES.             
                                                                                
A sample set of code is shown below to define a list of data dictionary         
items using DCDDL macro calls,a call to DICTATE to resolve the list             
into an area defined by the DSDDL macro, and sample MVC instructions.           
Note that the call to DICTATE passes spaces in system and language so           
that DICTATE will figure these out automatically.                               
                                                                                
         GOTO1 =V(DICTATE),PLIST,C'L   ',DCLIST,DSLIST                          
         ...                                                                    
         MVC   OUTPUT(L'AC@ACCC),AC@ACCC                                        
         ...                                                                    
         MVC   OUTPUT(L'AC$CR),AC$CR                                            
         ...                                                                    
DCLIST   DS    0C                                                               
         DCDDL AC#ACCN,12,L                                                     
         DCDDL AC#DR,2                                                          
         DCDDL AC#CR,6,C                                                        
         DCDDL AC#CR,6,CU                                                       
         DCDDL AC#CR,3,C,LABEL=AC1CR                                            
         DCDDL AC#CR,3,CU,LABEL=AC2CR                                           
DCLISTX  DC    X'00'                                                            
         ...                                                                    
         DSDDL PRINT=YES                                                        
AC@ACCN  DS    CL(12)                                                           
AC@DR    DS    CL(2),CL1                                                        
AC@CR    DS    CL(6)                                                            
AC$CR    DS    CL(6)                                                            
AC1CR    DS    CL(3)                                                            
AC2CR    DS    CL(3)                                                            
         ...                                                                    
       ++include ACDDEQUS                                                       
         ...                                                                    
                                                                                
Getting address of item(s) in the dictionary                                    
*-------------------------------------------                                    
DICTATE can be called requesting that the address of the entry in the           
appropriate dictionary be passed back in the third parameter. This              
allows the caller to process the dictionary item which can then be in           
a special format for the caller. As the actual entry address is passed          
back the caller should be aware of his responsibility to ensure that            
he does not destroy the dictionary.                                             
                                                                                
A sample set of code is shown below to define a valid escape seqence in         
DUB and the extracting of the address of the entry.                             
Note that the call to DICTATE passes spaces in system and language so           
that DICTATE will figure these out automatically.                               
                                                                                
         MVCDD DUB,AC#ENTRY                                                     
         GOTO1 =V(DICTATE),PLIST,C'A   ',DUB                                    
         ICM   RF,15,PLIST+8                                                    
         BZ    COCKUP                                                           
                                                                                
Defining escape sequences in screen generations                                 
*----------------------------------------------                                 
The SCRGEN program will examine field data cards for special syntax to          
spot symbolic references to data dictionary definitions. A data                 
dictionary escape sequence (DDES) is started and ended with an & chr.           
Following the first & is a dictionary reference number (min 2 digits)           
or a dictionary equate name (max 8 chrs) of the format SS#XXXXX where           
SS is the system letters and XXXXX is the equate name.This is delimited         
with a / followed by a one or two digit length field to define the              
length of the output escape area.If standard left justify is required           
the DDES is terminated with an &. If other justification is                     
required then the length is delimited with a / and a justify chr of             
L or R or C or S for left/right/centre/squash is specified followed             
by the DDES terminator chr &. If an underline string is required the            
justify chr can be followed by a U before the DDES terminator chr &.            
                                                                                
If the whole TWA field consists of a single left justified DDES and no          
other text then the /ll/L& end of DDES can be omitted as the ll length          
field defaults to the whole TWA field length and left justification is          
assumed.                                                                        
                                                                                
To use equates in the SCRGEN a special option card must be input to             
name the PAN book containing the equated values. For the account system         
the book is ACDDEQUS and the option card is                                     
                                                                                
OPTION DICT=ACDDEQUS                                                            
                                                                                
The screen is printed using the English data dictionary for the system.         
To see the screen printed in specified languages use OPTION LANG ...            
card to specify the languages. Valid letters are E for English, F for           
French, and G for German. To see the output in these three languages            
the option card is                                                              
                                                                                
OPTION LANG=EFG                                                                 
                                                                                
Examples of valid DDES specified in field cards are listed below. Note          
the output DDES can be longer or shorter that the symbolic &......&             
sequence of chrs used to define it. Care should be taken when using             
mixtures of DDES and text. The next text source text location follows           
the last & chr and the corresponding next object text location follows          
the last byte of a DDES whose length is defined by the source expression        
                                                                                
Note that the case of the field (default Upper-only set to lower if an L        
in column 13 of the F card) is used to output UPPER or lower case. If           
using lower case the first chr is automatically switched to Upper.              
                                                                                
The data dictionary for account holds one single 12 byte entry for the          
value given by AC#ADRL ie C'address line'                                       
                                                                                
&AC#ACC                 Only valid as a single field in Col 31 of F card        
&AC#ACC/10/L&           Same as above if field length is 10                     
&AC#ADRL/15/L& 1        Generates Address line    1                             
&AC#ADRL/15/R& 1        Generates    Address line 1                             
&AC#ADRL/15/RU& 1       Generates    ------------ 1                             
&AC#ADRL/15/S& 1        Generates Address line 1                                
&AC#ADRL/15/S&ABc       Generates Address lineABc                               
AB&AC#ADRL/20/C&YZ      Generates AB    Address line    YZ                      
AB&AC#ADRL/20/CU&YZ     Generates AB    ------------    YZ                      
                                                                                
Requesting Data Dictionary support offline                                      
*----------------------------------------------                                 
To cause the V(PRINT) printing module to look for and resolve data              
dictionary escape sequences it is necessary to set a control flag               
and set the system and language required. The call to DICTATE will              
be for upper case resolution on the whole print line whose width is             
defined by the full word BOXWIDTH (default F'132'). Sample coding               
is as follows                                                                   
                                                                                
         L     RE,=V(BOXD)                                                      
         USING DDBIGBOX,RE                                                      
         OI    BOXDDCTL,BOXDDREQ   SET DATA DCTNRY SUPPORT REQUIRED             
         MVI   BOXSYS,6            SET ACCOUNT SYSTEM                           
         MVC   BOXLANG,MCLANG      SET LANGUAGE TO LANG= CARD VALUE             
                                                                                
Stand-alone programs that use V(PRINTER) should be converted to                 
using the PRINTERL relo module with its DDDPRINTL dsect that defines            
similarly named fields eg DDPDDCTL/DDPSYS/DDPLANG. The data dictionary          
is then supported with auto language conversion for DATE/TIME/PAGE              
fields in the headline printing logic.                                          
                                                                                
Data Dictionary naming conventions                                              
*---------------------------------                                              
Each system has a data dictionary load library module for each language.        
The modules are core resident phases on-line and are loaded by DICTATE          
when required offline. The member names are of the format T00Dsl where          
s is the system hex code and l is the language code. Hence the account          
system german data dictionary is DDS.LOADLIB(T00D63).                           
                                                                                
There also exists a general data dictionary which is used for storing           
terms that are common to all systems. Only the low order 14 bits of a           
dictionary reference number are used to number messages. The X'40' bit          
is used to flag that the item is to be found in the common or general           
data dictionary. The general dictionaries use F as the system letter            
so that the common german data dictionary is member T00DF3 and the              
corresponding equate book is named GEDDEQUS.                                    
                                                                                
The source book naming conventions are illustrated below for the account        
system.                                                                         
                                                                                
DDDDEQUS   System standard equate names for Escape sequence control chrs        
GEDDEQUS   Common standard equate names for items in general dictionary         
                                                                                
ACDDEQUS   Account standard equate names for dictionary items                   
ACDDENG    Account English data dictionary T00D60                               
ACDDFRE    Account French data dictionary  T00D64                               
ACDDGER    Account German data dictionary  T00D63                               
