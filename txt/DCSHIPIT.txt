SHIPIT - Routine to compress screens for binary transfer to emulator            
--------------------------------------------------------------------            
                                                                                
This routine is linked into FACPAK, and relies on the availability of           
the ZIPxxx proc, to which it links through the TABS dataspace.                  
                                                                                
Simply, shipit enables an application to transmit a number of screens           
of data within a single transaction, by the use of compression and              
binary transfer using structured fields.                                        
                                                                                
An application which wishes to take advantage of the shipit logic needs         
to be able to build a series of screens for transfer without needing            
a response between screens, other than the <enter> press which usually          
signifies the next screen is required.                                          
                                                                                
The application builds a screen as normal, and before exiting back to           
monitor places a call to shipit, with the parameters as described in            
FASHIPWRK.                                                                      
                                                                                
Shipit translates the data, and returns either cc equal, or cc low.             
The application is then expected to perform one of two functions:               
                                                                                
cc equal: Shipit is prepared to accept (at least) another screen's              
          worth of data. Build the next screen as if you had just               
          received a normal press of <enter> and were coming in through         
          the top of the program.                                               
                                                                                
cc low  : The shipit buffer is full. No more data can be accepted. You          
          must return to monitor immediately. TBUFF contains a binary           
          transfer stream with a compressed field embedded therein.             
          Do not alter the screen you built in any way. Be prepared             
          to resume from the top of the program with the last screen            
          you built.                                                            
                                                                                
Shipit takes advantage of the speed of the structured transfer to send          
a series of TBUFFs in what is called a 'conversation' (although it is           
really a monologue...) Each TBUFF holds a number of screens which have          
been stacked and compressed. This allows a large amount of data to              
be transferred very quickly, with minimal recoding.                             
                                                                                
Tests indicate that it is possible to get at least 4 full screens into          
a single buffer. This coupled with the advantage of the conversation            
logic offers potential to transfer data in a fraction of the time of            
normal downloads.                                                               
