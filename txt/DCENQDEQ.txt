<T>THE DDS ENQUEUE/DEQUEUE SYSTEM                                               
THIS DOCUMENT DESCRIBES THE DDS ENQUEUE/DEQUEUE SYSTEM. THIS SYSTEM             
HAS BEEN DESIGNED TO PROVIDE A MECHANISM THAT CAN GLOBALLY PROTECT              
RESOURCES WHICH CAN BE ACCESSED FROM MULTIPLE DOS AND MVS SYSTEMS.              
IT CONSISTS OF A SPECIAL DISK FILE FAC.DDSQDQ IN WHICH GLOBALLY                 
PROTECTED RESOURCES ARE KEPT IN AN ENQUEUE RECORD, AND A SPECIAL                
SOFTWARE ROUTINE DMENQDEQ WHICH MANAGES THE ENQUEUE RECORD AND THE              
RESOURCES CONTAINED WITHIN IT.                                                  
                                                                                
THE REPORT HAS BEEN DIVIDED INTO THE FOLLOWING SECTIONS.                        
                                                                                
SOFTWARE CONSIDERATIONS                                                         
                                                                                
ENQUEUE RECORD FORMAT                                                           
                                                                                
SERVICE REQUEST $QDQ                                                            
                                                                                
UTILITY PROGRAMS                                                                
                                                                                
OPERATOR MESSAGES                                                               
         TITLE 'THE DDS ENQUEUE SYSTEM - SOFTWARE CONSIDERATIONS'               
THE RELO MODULE DMENQDEQ SHOULD BE INCLUDED IN ALL LINK EDITS OF                
PROGRAMS THAT CAN ACCESS THE DDS WKFILE AND/OR PRTQUE. THESE TWO FILES          
ARE SHARED ACCROSS ALL SYSTEMS AND NEED TO BE PROTECTED FROM                    
SIMULTANEOUS UPDATE. THE WKFILE AND THE PRTQUE SOFTWARE MODULES WILL            
CALL DMENQDEQ TO ENQUEUE THE FILE BEFORE AN UPDATE ACTION IS ATTEMPTED.         
WHEN CONTROL IS ACHEIVED THE UPDATIVE FUNCTIONS WILL BE PERFORMED AND           
THE SOFTWARE MODULE WILL CALL DMENQDEQ TO DEQUEUE THE RESOURCE.                 
                                                                                
IN ORDER TO PERFORM AN ENQUEUE OR DEQUEUE, DMENQDEQ HAS FIRST TO GAIN           
CONTROL OF THE ENQUEUE RECORD ITSELF.THIS IS DONE BY EXECUTING A                
SPECIAL CHANNEL PROGRAM. IF THE ENQUEUE RECORD IS FREE, DMENQDEQ THEN           
PROCEEDS TO ENQUEUE OR DEQUEUE THE REQUIRED RESOURCE. IF THE ENQUEUE            
RECORD IS OWNED BY ANOTHER CPU/PTN THEN DMENQDEQ SAVES THE TIME OF              
THE FIRST ATTEMPT TO ENQUEUE AND THEN LOOPS FOR A CERTAIN AMOUNT OF             
TIME RETRYING TO ENQUEUE THE ENQUEUE RECORD. WHEN IT EVENTUALLY GAINS           
CONTROL DMENQDEQ THEN PROCEEDS TO ENQUEUE OR DEQUEUE THE REQUIRED               
RESOURCE. IF IT FAILS TO ENQUEUE THEN A MESSAGE IS SENT TO THE                  
OPERATOR. THE MAXIMUM AMOUNT OF TIME THAT IS SPENT TRYING TO PHYSICALLY         
ENQUEUE THE ENQUEUE RECORD DEPENDS UPON WHETHER THE JOB IS OFFLINE OR           
ONLINE AND IS HELD AS A CONSTANT IN DMENQDEQ. THE CURRENT TIME                  
INTERVAL IS DEFINED TO BE TWO MINUTES, WITH A ONE SECOND WAIT BETWEEN           
OFFLINE ATTEMPTS.                                                               
                                                                                
WHEN DMENQDEQ GAINS CONTROL OF THE ENQUEUE RECORD IT SEARCHES THE               
TABLE OF RESOURCES HELD IN THE RECORD. FOR AN ENQUEUE IF THE NAMED              
RESOURCE IS NOT IN THE TABLE IT MAKES AN ENTRY NAMING THE RESOURCE,             
THE OWNER CPU/PTN, AND THE TIME OF THE ENQUEUE IN SECONDS, AND THEN             
WRITES THE NEW ENQUEUE RECORD BACK TO DISK WITH A KEY OF ZERO TO                
DEQUEUE THE ENQUEUE RECORD. FOR A DEQUEUE IF THE NAMED RESOURCE IS IN           
THE TABLE THE ENTRY IS REMOVED BY CLEARING IT AND SHUFFLING UP THE              
TABLE SO IT ONLY CONTAINS ACTIVE ENTRIES, AND THEN THE NEW ENQUEUE              
RECORD IS WRITTEN BACK TO DISK WITH A KEY OF ZERO TO FREE THE ENQUEUE           
RECORD. IF FOR AN ENQUEUE THE RESOURCE IS ALREADY IN THE TABLE AND IS           
OWNED BY ANOTHER CPU/ADR THEN THE RESOURCE IS ALREADY ENQUEUED.                 
IN THIS CASE THE ENQUEUE RECORD IS IMMEDIATELY DEQUEUED BY WRITING IT           
STRAIGHT BACK TO DISK WITH A KEY OF ZERO. THE TIME OF THE FIRST                 
ATTEMPT TO ENQUEUE THE RESOURCE IS SAVED AND THE WHOLE ENQUEUE LOGIC            
IS REEXECUTED FOR A CERTAIN TIME INTERVAL UNTIL CONTROL IS ACTUALLY             
ACHEIVED FOR THE DESIRED RESOURCE. IF, HOWEVER, IT FAILS TO ENQUEUE             
THE RESOURCE DURING THIS INTERVAL THEN A MESSAGE IS SENT TO THE                 
OPERATOR. THE MAXIMUM AMOUNT OF TIME THAT IS SPENT TRYING TO LOGICALLY          
ENQUEUE THE RESOURCE DEPENDS UPON WHETHER THE JOB IS OFFLINE OR                 
ONLINE, AND IS HELD AS A CONSTANT IN DMENQDEQ. THE CURRENT TIME                 
INTERVAL IS DEFINED TO BE EIGHT MINUTES, WITH A TWO SECOND WAIT                 
BETWEEN OFFLINE ATTEMPTS TO ENQUEUE THE RESOURCE.                               
                                                                                
THE PARAMETER LIST PASSED TO DMENQDEQ IS AS FOLLOWS.                            
                                                                                
P1/0    ACTION VALUE     A=ADD A NEW ENQUEUE RECORD                     00003   
                         D=DEQUEUE RESOURCE                             00004   
                         E=ENQUEUE RESOURCE (UNCONDITIONAL)             00005   
                         F=ENQUEUE RESOURCE IF AVAIL ELSE RETURN        00006   
                         R=READ ENQUEUE RECORD KEY AND DATA             00007   
                         T=TEST RESOURCE STATUS                         00008   
P1/1-3  A(RESOURCE)      FOR ACTIONS D,E,F,T ONLY                       00010   
                         C'PRTQ'=PRTQUE FILE                            00011   
                         C'WRKR'=WKFILE FILE                            00012   
                         C'ALL' =ALL RESOURCES FOR THIS CPU/ADR         00013   
                         C'CPU' =ALL RESOURCES FOR THIS CPU             00014   
                                                                        00015   
P2/0    RETURN CODE      X'80'=ENQREC DISK ERROR                        00016   
                         X'40'=ENQREC NOT FOUND                         00017   
                         X'08'=WAIT OCCURED ON RESOURCE                 00018   
                         X'04'=RESOURCE TABLE IS FULL                   00019   
                         X'02'=RESOURCE IS OWNED BY SOMEONE ELSE        00020   
                         X'01'=RESOURCE IS OWNED BY MYSELF              00021   
P2/1-3  RETURN ADDR      ADDRESS OF VARIOUS INTERNAL AREAS              00023   
                                                                        00024   
P3/0-1  RETURN CPU ID    DOS=P'0NNN' CPU NUMBER PWOS                    00025   
                         MVS=C'XX'   LAST TWO CHRS OF CPU ALPHA ID      00026   
P3/2-3  RETURN ADR ID    DOS=X'00PP' WHERE PP IS PARTITION PIK          00028   
                         MVS=X'AAAA' WHERE AAAA IS ADDRESS SPACE NUM    00029   
         TITLE 'THE DDS ENQUEUE SYSTEM - ENQUEUE RECORD FORMAT'                 
A TABLE OF THE SYSTEM RESOURCES THAT ARE OWNED BY VARIOUS CPU AND DOS           
PARTITIONS (OR MVS ADDRESS SPACES) IS MAINTAINED BY DMENQDEQ IN A               
SPECIAL SINGLE TRACK DISK FILE CALLED FAC.DDSQDQ. THIS FILE CONSISTS            
OF A SINGLE 1500 BYTE RECORD PRECEEDED BY A 30 BYTE KEY FIELD. IF THE           
KEY FIELD ON DISK IS BINARY ZEROS THEN THE ENQUEUE RECORD IS AVAILABLE.         
IF THE KEY FIELD IS NON ZERO THEN IT CONTAINS THE CPU ID AND PARTITION          
ID OF THE CURRENT OWNER.                                                        
                                                                                
WHEN THE KEY FIELD IS NON ZERO IT MEANS THAT THE OWNER CPU/PTN HAS A            
COPY OF THE ENQUEUE RECORD IN HIS CORE AREA AND IS IN THE PROCESS OF            
UPDATING IT. THE RECORD IS UPDATED FOR AN ENQUEUE BY INSERTING A 30             
BYTE TABLE ENTRY FOR A RESOURCE. THIS TABLE ENTRY HAS THE SAME FORMAT           
AS THE KEY FIELD, AND CONTAINS THE RESOURCE NAME AND THE CPU/PTN ID             
OF THE OWNER. THE RECORD IS UPDATED FOR A DEQUEUE BY REMOVING THE               
TABLE ENTRY CREATED BY THE ENQUEUE. WHEN THE OWNER CPU/PTN HAS UPDATED          
THE COPY OF THE ENQUEUE RECORD IT IS WRITTEN BACK TO FAC.DDSQDQ WITH A          
KEY FIELD OF BINARY ZEROS TO SIGNIFY THAT IT IS NOW AVAILABLE.                  
                                                                                
THE 1500 BYTE ENQUEUE RECORD CONSISTS OF 50 TABLE ENTRIES EACH OF 30            
BYTES. THE FIRST AND LAST ENTRIES ARE NOT USED SO THAT THERE IS SPACE           
FOR 48 DIFFERENT RESOURCES IN THE TABLE. THE FORMAT OF THE 30 BYTE              
KEY FIELD AND THE 30 BYTE TABLE ENTRY ARE AS FOLLOWS.                           
                                                                                
KEY      XL4   CPU ID OF OWNER CPU                                              
         XL4   PTN ID OF OWNER PARTITION OR ADDRESS SPACE                       
         XL4   TIME IN SECONDS THAT THE KEY WAS ENQUEUED BY OWNER               
         XL1   N/D (ZERO)                                                       
         XL1   N/D (ZERO)                                                       
         CL8   N/D (SPACES)                                                     
         CL8   N/D (SPACES)                                                     
                                                                                
ENTRY    XL4   CPU ID OF OWNER CPU                                              
         XL4   PTN ID OF OWNER PARTITION OR ADDRESS SPACE                       
         XL4   TIME IN SECONDS THAT THE RESOURCE WAS ENQUEUED                   
         XL1   ENQUEUE TYPE (NOT USED YET SET TO ZERO)                          
         XL1   ENQUEUE COUNT                                                    
         CL8   RESOURCE ID                                                      
         CL8   RESOURCE SUB ID (NOT USED YET SET TO SPACES)                     
                                                                                
THE CPU ID FOR A MVS CPU HAS THE FORMAT C'XXXX' WHERE XXXX IS THE FOUR          
CHR CPU ID EXTRACTED FROM MVS SUPERVISOR FIELD SMCASID. THE CPU ID FOR          
A DOS CPU HAS THE FORMAT X'00000NNN' WHERE NNN IS THE PWOS CPU ID               
EXTRACTED FROM THE DOS RASLINK TABLE.                                           
                                                                                
THE PTN ID FOR AN MVS ADDRESS SPACE HAS THE FORMAT C'AD'X'NNNN' WHERE           
NNNN IS THE ADDRESS SPACE NUMBER EXTRACTED FROM THE MVS SUPERVISER              
TIOT. THE PTN ID FOR A DOS PARTITION HAS THE FORMAT C'XX'X'00NN' WHERE          
XX IS THE ALPHA PARTITION NAME (EG BG OR F4) AND NN IS THE PARTITION            
PIK EXTRACTED FROM THE DOS PARTITION COMRG.                                     
                                                                                
THE ENQUEUE FUCTION USES A SPECIAL CHANNEL PROGRAM TO ENSURE THAT A             
JOB THAT IS TRYING TO ENQUEUE THE ENQUEUE RECORD EITHER GAINS CONTROL           
OF THE RECORD WITH HIS CPU/PTN LEFT IN THE KEY OR EXITS WITH A COPY             
OF THE KEY WHEN IT IS NON ZERO.THE CHANNEL PROGRAM IS AS FOLLOWS.               
                                                                                
SEEK               THE TRACK WHICH CONTAINS ENQUEUE RECORD                      
SRCH ID EQUAL      FOR RECORD ONE (THE ENQUEUE RECORD KEY & DATA)               
TIC                EXIT WITH ERROR IF NOT FOUND                                 
READ KEY AND DATA  READ 30 BYTE KEY INTO A SPECIAL KEY AREA                     
SRCH KEY EQL       FOR KEY OF BINARY ZEROS                                      
TIC                EXIT IF NOT FOUND (IE THE RECORD IS ALREADY OWNED)           
READ DATA          READ 1500 BYTE ENQUEUE RECORD DATA INTO DATA AREA            
SRCH ID EQUAL      FOR RECORD ONE                                               
TIC                EXIT WITH ERROR IF NOT FOUND                                 
WRITE KEY AND DATA WRITE 1530 KEY & DATA WITH MY CPU/PTN IN KEY                 
         TITLE 'THE DDS ENQUEUE SYSTEM - $QDQ SERVICE REQUEST'                  
THE SERVICE REQUEST $QDQ ENABLES ENQUEUE STATISITICS ACCUMULATED BY             
FACPAK TO BE DISPLAYED. THERE ARE TWO BASIC MODES. THE DEFAULT MODE             
IS COUNT TO DISPLAY ALL THE COUNTERS ACCUMULATED BY DMENQDEQ ON                 
BEHALF OF FACPAK. THESE COUNTERS SHOW THREE SETS OF FIGURES. THE FIRST          
SET ARE THE LOGICAL COUNTERS FOR PRTQUE, THE SECOND SET ARE THE LOGICAL         
COUNTERS FOR WKFILE, AND THE THIRD SET SHOW THE COUNTERS OF PHYSICAL            
ACTIVITY ON THE ENQUEUE RECORD ITSELF. THESE COUNTERS CAN ALSO BE RESET         
TO ZEROS BY INPUTTING 'RESET' IN PARA 2 OF THE SERVICE REQUEST IF THE           
FIRST PARAMETER IS EMPTY (THE DEFAULT), OR 'C', OR 'COUNT'.                     
                                                                                
THE DISPLAY MODE IS OBTAINED BY INPUTTING 'D' OR 'DISPLAY' IN THE FIRST         
SERVICE REQUEST PARAMETER.THIS WILL READ THE CURRENT ENQUEUE RECORD KEY         
AND DATA AND DISPLAY IT ON THE SCREEN. THE DATA SHOWN INCLUDES THE              
CONTENTS OF THE KEY FIELD (IF NON ZERO) AND ANY ENTRYS IN THE ENQUEUE           
RECORD ITSELF. THE RESOURCE NAME, CPU ID, PARTITION ID, TIME OF THE             
ENQUEUE IN SECONDS, AND THE NUMBER OF SECONDS THAT THE RESOURCE HAS             
BEEN ENQUEUED ARE ALL DISPLAYED. IT IS ALSO POSSIBLE TO INPUT A REPEAT          
COUNT IN PARA 2. THIS WILL CAUSE THE ENQUEUE RECORD COUNT AND DATA TO           
READ A MAXIMUM NUMBER OF TIMES EQUAL TO THE INPUT VALUE UNTIL AN                
ENQUEUE RECORD KEY AND DATA IS READ THAT IS NON EMPTY. THIS FIRST               
NON ZERO RECORD IS THE ONE THAT IS DISPLAYED.                                   
         TITLE 'THE DDS ENQUEUE SYSTEM - UTILITY PROGRAMS'                      
ASIDEQ                                                                          
                                                                                
THIS PROGRAM SHOULD BE RUN AS ONE OF THE VERY FIRST JOBS AFTER AN IPL           
ON A CPU. IT INVOKES A SPECIAL CALL TO DMENQDEQ TO DEQUEUE ALL                  
RESOURCES THAT THIS CPU MAY OWN. THIS IS ESPECIALLY USEFUL AFTER                
A MACHINE CRASH WHERE VARIOUS RESOURCES MAY HAVE BEEN LEFT IN AN                
ENQUEUED CONDITION WHICH WILL CAUSE MESSAGES TO THE OPERATOR FROM               
JOBS RUNNING ON OTHER CPUS.                                                     
                                                                                
DMENQTEST                                                                       
                                                                                
THIS PROGRAM READS A SET OF DATA CARDS THAT CONTAIN CODED VERSIONS              
OF ALL THE DIRECT PARAMETER LIST CALLS TO DMENQDEQ. COLUMN 1 CONTAINS           
THE DMENQDEQ ACTION BYTE CHARACTER, AND COLUMNS 2-5 CONTAIN THE FOUR            
CHARACTER RESOURCE NAME. APART FROM ITS USE AS A TEST VEHICLE FOR               
DMENQDEQ IT CAN BE USED FOR THE SPECIFIC FUNCTION OF INITIALISATION             
OF A BRAND NEW FAC.DDSQDQ FILE. FOR THIS FUNCTION A SINGLE CARD                 
CONTAINING AN 'A' IN COLUMN ONE CALLS DMENQDEQ TO ADD A NEW EMPTY               
ENQUEUE RECORD TO THE FILE.                                                     
         TITLE 'THE DDS ENQUEUE SYSTEM - OPERATOR MESSAGES'                     
IF A JOB GETS A DISK ERROR WHEN TRYING TO READ THE ENQUEUE RECORD, OR           
AN ABNORMALLY LONG TIME INTERVAL OCCURS WHEN ATTEMPTING TO ENQUEUE A            
RESOURCE, A MESSAGE IS ISSUED TO THE OPERATOR. THIS MESSAGE INFORMS             
OF THE CONDITION ENCOUNTERED BY THE JOB AND LISTS THE REPLY OPTIONS.            
THE ISSUING JOB WILL REMAIN IN A WAIT STATE UNTIL ONE OF THE FOLLOWING          
REPLY CHARACTERS IS INPUT.                                                      
                                                                                
C - CANCEL THIS JOB. IF IT IS OBVIOUS THAT THE CONDITION SHOULD NOT             
    OCCUR ON THE JOB THAT ISSUES THE MESSAGE THEN THE REPLY OF A 'C'            
    WILL CAUSE THE JOB TO CANCEL.                                               
                                                                                
R - RETRY THE ENQUEUE. IF 'R' FOR RETRY IS INPUT THEN ANOTHER ATTEMPT           
    TO ENQUEUE THE NAMED RESOURCE WILL BE MADE. IN MOST CIRCUMSTANCES           
    RETRY SHOULD BE THE NORMAL RESPONSE UNLESS A CONDITION EXISTS THAT          
    MAKES IT OBVIOUS THAT A RETRY WILL NOT SOLVE THE PROBLEM.                   
                                                                                
I - IGNORE THE CONDITION. AN 'I' FOR IGNORE SHOULD BE INPUT ONLY WHEN           
    THE ERROR CONDITION HAS BEEN DIAGNOSED. FOR A DISKERR MESSAGE AN            
    'I' CAUSES A NEW ENQUEUED RECORD TO BE CREATED AND SHOULD ONLY BE           
    INPUT IF A RETRY FAILS TO CLEAR THE ORIGIONAL DISK ERROR. FOR A             
    WAIT ON MSG AN 'I' SHOULD ONLY BE INPUT IF THE NAMED CPU/PTN                
    IS KNOWN TO HAVE FAILED AND COULD HAVE LEFT THE NAMED RESOURCE              
    PERMANENTLY ENQUEUED. IN THIS CASE AN 'I' WILL IGNORE THE FACT THAT         
    THE RESOURCE IS ASSIGNED TO THE NAMED CPU/PTN AND WILL REASSIGN             
    IT TO THE JOB THAT ISSUED THE MESSAGE.                                      
                                                                                
THE FORMAT OF THE OPERATOR MESSAGE AND THE MEANINGS OF THE VARIOUS              
FIELDS IS AS FOLLOWS.                                                           
                                                                                
MESSAGE RESOURCE/CPU /PTN  C=CANCEL R=RETRY I=IGNORE                            
                                                                                
MESSAGE IS EITHER DISKERR OR WAIT ON                                            
                                                                                
RESOURCE IS THE NAME OF THE RESOURCE THAT IS CAUSING THE MESSAGE. IF            
THIS IS 'ENQ-RECD' IT IS THE ENQUEUE RECORD ITSELF THAT EITHER HAS A            
DISKERR OR IS LOCKED FOR TOO LONG. NOTE THAT IF A CPU/PTN DIES JUST             
AFTER IT HAS READ THE ENQUEUE RECORD THEN THE ENQUEUE RECORD IS LEFT            
IN A STATE WHERE THE FAILED CPU/PTN PERMANENTLY OWNS THE ENQUEUE                
RECORD. IF THE RESOURCE IS 'WRKR' THEN THE NAMED CPU/PTN HAS HELD THE           
WKFILE FOR AN UNREASONABLE TIME PERIOD OR THE JOB RUNNING IN THE                
CPU/PTN MAY HAVE DIED AFTER ENQUEUING WKFILE. IF THE RESOURCE                   
IS 'PRTQNNNN' THEN THE NAMED CPU/PTN HAS HELD ONE OF THE SYSTEM PRTQUE          
FILES FOR AN UNREASONABLE TIME PERIOD. NOTE THAT 'NNNN' IS USED TO              
UNIQUELY IDENTIFY DIFFERENT COPIES OF THE PRTQUE FILES WHERE NNNN IS            
THE NUMBER OF TRACKS DEFINED FOR THE FIRST EXTENT (IE MULTIPLE PRTQUES          
MUST HAVE DIFFERENT SIZED FIRST EXTENTS).                                       
                                                                                
CPU IS THE CPU ID OF THE CPU THAT OWNS THE NAMED RESOURCE.IF THIS FIELD         
IS DOTS THEN NO SPECIFIC CPU IS RESPONSIBLE. A DOS CPU IS IDENTIFIED            
BY A THREE DIGIT NUMBER (EG 091) AND AN MVS CPU ID IS IDENTIFIED BY A           
THREE CHARACTER ID (EG SY1)                                                     
                                                                                
PTN IS THE ID OF THE DOS PARTITION OF A DOS CPU OR THE ADDRESS SPACE            
ID OF AN MVS CPU. IF THIS FIELD IS DOTS THEN NO SPECIFIC CPU/PTN IS             
RESPONSIBLE. A DOS PTN IS IDENTIFIED BY A TWO CHR PARTITION ID                  
(EG BG OR F2) AND A MVS ADDRESS SPACE IS IDENTIFIED BY A FOUR DIGIT             
NUMBER.                                                                         
                                                                                
SOME ACTUAL EXAMPLES OF MESSAGES THAT COULD BE ISSUED BY A JOB WHEN             
TRYING TO ENQUEUE A RESOURCE (NOTE THAT ONLY WRKR AND PRTQ ARE                  
CURRENTLY DEFINED AS VALID RESOURCES) ARE GIVEN BELOW WITH A BRIEF              
EXPLANATION OF POSSIBLY HOW AND WHY CONDITIONS.                                 
                                                                                
DISKERR ENQ-RECD/..../.... C=CANCEL,R=RETRY,I=IGNORE                            
                                                                                
THIS JOB CAN NOT ACCESS THE ENQUEUE RECORD. IF OTHER JOBS ARE ISSUING           
THIS MESSAGE AS WELL THEN THERE IS A SEVERE HARDWARE PROBLEM WITH               
THE DISK ON WHICH FAC.DDSQDQ RESIDES. IF AN 'R' FOR RETRY DOES NOT              
CLEAR THE CONDITION THEN THERE IS A PERMANENT ERROR. IN THIS CASE AN            
'I' FOR IGNORE SHOULD BE INPUT TO ONLY ONE OF THE JOBS ISSUING THE              
MESSAGE. THIS WILL CAUSE THAT JOB TO COMPLETELY REBUILD A NEW EMPTY             
ENQUEUE RECORD AND IF THIS SUCCEEDS THE JOB WILL CONTINUE AS NORMAL             
AND AN 'R' FOR RETRY SHOULD BE INPUT TO OTHER JOBS THAT MAY ALSO HAVE           
THE DISKERR MESSAGE REPLY PENDING. IF AN 'I' DOES NOT WORK THEN ALL             
JOBS SHOULD BE CANCELLED AND A NEW FAC.DDSQDQ FILE SHOULD BE CREATED.           
                                                                                
WAIT ON WRKR    /..../.... C=CANCEL,R=RETRY                                     
                                                                                
THIS JOB HAS BEEN TRYING FOR SEVERAL MINUTES TO ENQUEUE THE WKFILE.             
AS NO CPU/PTN IS SPECIFIED THE WRKR RESOURCE IS NOT LOCKED, AND THE             
ENQUEUE RECORD HAS BEEN NORMALLY ACCESSED DURING THIS PERIOD. IT IS             
PROBABLE THAT THIS JOB HAS JUST BEEN UNLUCKY (IE EVERY TIME IT TRIED            
TO ENQUEUE WRKR SOMEONE ELSE BEAT IT TO IT) AND IT MAY ALSO BE RUNNING          
WITH A LOW PRIORITY SO THAT THE NUMBER OF ATTEMPTS IT COULD MAKE IN             
THE ALLOTTED TIME INTERVAL WAS LOW ANYWAY. AN 'R' FOR RETRY SHOULD BE           
THE NORMAL OPERATOR REPLY.                                                      
                                                                                
WAIT ON PRTQ1240/091 /F3   C=CANCEL,R=RETRY,I=IGNORE                            
                                                                                
THIS JOB HAS BEEN TRYING FOR SEVERAL MINUTES TO ENQUEUE ONE OF THE              
SYSTEM PRTQUE FILES. EVERY TIME THIS JOB TRIED DURING THESE FEW                 
MINUTES IT FOUND THAT THE PRTQUE WAS CONSISTANTLY OWNED BY THE JOB              
THAT IS/WAS RUNNING IN PARTITION F3 OF THE DOS CPU 091. IF THERE IS             
A JOB RUNNING IN 091/F3 THAT CAN ENQUEUE THE PRTQUE FOR A LONG PERIOD           
OF TIME (EQ PQMAINT) THEN INPUT AN 'R' FOR RETRY. IF CPU 091 HAS GONE           
DOWN, OR A JOB THAT WAS PREVIOUSLY RUNNING IN 091/F3 HAS ABENDED, THEN          
IT IS PROBABLE THAT THE JOB LEFT PRTQ1240 IN A LOCKED CONDITION. IN             
THIS CASE AN 'I' FOR IGNORE WILL CAUSE THIS JOB TO GAIN CONTROL OF              
PRTQ1240 AND TO PROCEED AS NORMAL. NOTE THAT AN 'R' FOR RETRY IS                
ALWAYS THE SAFEST FIRST REPLY IE IF THE PRTQUE IS REALLY LOCKED THEN            
THE SAME MESSAGE WILL OCCUR FOR THIS JOB IN A FEW MINUTES TIME. NOTE            
ALSO THAT OTHER JOBS MAY BE TRYING TO ENQUEUE THE PRTQUE AND MAY ALSO           
ISSUE THE SAME MESSAGE UNTIL THE CONFLICT IS RESOLVED EITHER BY                 
091/F3 DEQUEUING PRTQ1240, OR BY A SUBSEQUENT REPLY OF 'I' FOR IGNORE.          
                                                                                
WAIT ON ENQ-RECD/SY2 /0003 C=CANCEL,R=RETRY,I=IGNORE                            
                                                                                
THIS JOB HAS BEEN TRYING FOR SEVERAL MINUTES TO ENQUEUE A SYSTEM                
RESOURCE.EVERY TIME THIS JOB TRIED DURING THESE FEW MINUTES TO GAIN             
ACCESS TO THE ENQUEUE RECORD IT FOUND THAT THE ENQUEUE RECORD WAS               
CONSISTANTLY OWNED BY THE JOB THAT IS/WAS RUNNING IN ADDRESS SPACE              
0003 OF MVS CPU SY2. UNDER NORMAL CIRCUMSTANCES THE ENQUEUE RECORD              
ITSELF SHOULD ONLY BE ENQUEUED FOR A FRACTION OF A SECOND, SO ONLY IF           
THE JOB RUNNING IN SY2/0003 HAS AN EXTREEMLY LOW PRIORITY SHOULD THE            
REPLY BE AN 'R' FOR RETRY. IF CPU SY2 HAS GONE DOWN OR A JOB THAT               
THAT WAS PREVIOUSLY RUNNING IN SY2/0003 HAS ABENDED, THEN IT IS                 
PROBABLE THAT THE JOB LEFT THE ENQUEUE RECORD IN A LOCKED CONDITION.            
IN THIS CASE AN 'I' FOR IGNORE WILL CAUSE THIS JOB TO GAIN CONTROL OF           
THE ENQUEUE RECORD AND TO DEQUEUE ANY RESOURCES THAT MAY HAVE BEEN              
ALLOCATED TO SY2/0003, AND THEN TO PROCEED AS NORMAL. NOTE ALSO THAT            
OTHER JOBS WHICH ARE TRYING TO ACCESS THE ENQUEUE RECORD MAY ALSO               
ISSUE THE SAME MESSAGE UNTIL THE CONFLICT IS RESOLVED EITHER BY                 
SY2/0003 SPRINGING TO LIFE AND RELEASING THE ENQUEUE RECORD, OR BY THE          
SUBSEQUENT REPLY OF AN 'I' FOR IGNORE.                                          
