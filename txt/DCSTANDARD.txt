Assembler language for IBM 370 and on is a powerful beast.  While there are many
different ways that assembler programs can be written, we think it is helpful   
that there are some DDS standards so that a program written by one person can be
picked up and worked on more easily by another.                                 
                                                                                
This is not an attempt to stamp out indivuality!  Indeed, different groups adopt
slightly varying 'styles'.                                                      
                                                                                
         <   > Register Usage                                                   
                                                                                
In the NBASE or NMOD1 macros (usually unexpanded - hidden) are the register     
equate statements.  R1 is equated to 1,...  RA is equated to 10,...  RF is      
equated to 15 etc.  The reason for this is to ensure that register usage appears
in cross reference listing at the back of the assembly.  This allows you to see,
for instance, if you have a register free to use as another base register.  You 
must you this standard.  The only acception is in expressions like BCTR R1,0    
where R0 is not actually being affected.                                        
                                                                                
Specific Registers                                                              
__________________                                                              
                                                                                
RB is first base register.                                                      
RC is usually used to cover NMOD area as the macro uses this.                   
RD is ABSOLUTELY reserved for register save area.                               
RE should be used for return address in BAL instructions.                       
   XIT assumes that you used RE.                                                
RF should be used for BALR to other CSECTs, Modules.                            
                                                                                
Less fixed, but more a matter of convention:                                    
                                                                                
R2 is A(TWA screen header) for on-line programs.                                
   Many validation routines assume this.                                        
R8 is A(SPOOL areas) for many off-line programs.                                
R9 is usually used for second base register, then R8 or R7.                     
                                                                                
R0 has some limitations.  It can't be used as a base register and does not work 
for EX instructions.  A recommended use is for your BCT loops.                  
                                                                                
Some macros will use R0, R1, RE, RF.  So be conscious of your register usage    
round macros.                                                                   
                                                                                
Be sure to DROP registers that you are no longer USING.  This will save         
some agonizing bugs.                                                            
                                                                                
         <   > Program Structure                                                
                                                                                
Assembler is not a highly structured language in the sense that C or Pascal are.
But that does not mean that you should write spaghetti code, with branches all  
over the place.  Try and think of a routine as taking up a page (or max 2) in   
the output listing.  Then your program will indicate the main program flow,     
usually with a few BAL instructions, at the beginning of the code.              
                                                                                
Each subroutine should have a friendly name (such as POSTBUY) rather than       
meaningless labels (such as QB144).  On the other hand, insignificant labels    
within the sub-routine should have insignificant labels such as PB4.  At the    
beginning of the subroutine, a brief description of what is happening is        
appropriate.  And it particularly important that you indicate what parameters   
are set as you come into the routine (registers set etc).  You may also wish to 
indicate usage of registers within the routine and values that will be set at   
XIT.                                                                            
                                                                                
Conditional branches should usually go forward (or down the page) with the      
exception of loops.  Be very sparing with your use of relative branching.       
Branching to *+8 or *+10 is fine. *+12 or more is dangerous and aggravating for 
somebody else.  Under no circumstance can you branch round macros.              
                                                                                
         <   > Documentation                                                    
                                                                                
One of the advantages of Assembler is that, because it supports a rich range of 
documentation features, allows the documentation to be part of the source code. 
This is a very personal area, as different groups use different techniques.  But
the following guidelines apply:                                                 
                                                                                
Program and sub-routine descriptions are covered briefly in the section above.  
Paragraph and/or line comments should be of a logical nature (example LOOKING   
FOR MATCH IN TABLE) rather than a redundant physical level (MOVE FIELDA TO      
FIELDB).                                                                        
                                                                                
If you are maintaining a program written originally by somebody else, keep to   
the style of the original writer. (For example, some separate each paragraph    
with SPACE 1 commands, others with an * in column 1.)   The key ingredient here 
is consistency.                                                                 
                                                                                
Use EJECTs to add to readability.                                               
                                                                                
Although the assembler does not demand it, instructions should be written in    
column 10, operators start in column 16, and comments start in column 36.       
                                                                                
Every program should start with a TITLE card.  This should indicate the phase   
name and a very terse description.                                              
                                                                                
Include a PRINT NOGEN before the NMOD1 statement.  It adds clutter if macros are
expanded - takes away from the real instructions.  Also, included DSECTs etc.   
should be hidden with a PRINT OFF statement to keep listings to a manageable    
size.  It is better to have a separate listing of DSECTs once for the system,   
rather than printed out in every listing.                                       
