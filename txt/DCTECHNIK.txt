         TITLE 'Programming Techniques'                                         
 Pseudo-Arithmetic Instructions                                                 
 ------------------------------                                                 
The Load Address instruction can be used in many situations that involve        
fixed integers n (less than 4096) and up to three registers (R1 R2 and R3).     
                                                                                
         LA    R1,n               Loads value into R1                           
         LA    R1,n(R1)           Adds n to R1                                  
         LA    R2,n(R1)           Adds n to R1 giving R2                        
         LA    R3,0(R1,R2)        Adds R1 to R2 giving R3                       
         LA    R3,n(R1,R2)        Adds n and R1 to R2 giving R3                 
                                                                                
BCTR instruction is used for subtracting 1 from a register.                     
                                                                                
         BCTR  R1,0               Subtracts 1 from R1                           
                                  (Note the use of 0 not R0)                    
                                                                                
Multiplication or division by powers of 2 can be achieved  sing shift instruct. 
                                                                                
         SLA   R1,4               Multiplies R1 by 16                           
         SRA   R1,2               Divides R1 by 4                               
                                                                                
 Data Handling                                                                  
 -------------                                                                  
To clear an area of storage under 256 bytes use XC instruction.  (Note for      
larger areas see XCEF macro.)                                                   
                                                                                
         XC    area,area                                                        
                                                                                
To fill an area of storage with a character (say -) use the following -         
                                                                                
         MVI   AREA,C'-'                                                        
         MVC   AREA+1(L'AREA-1),AREA                                            
                                                                                
(Note - a similar technique can be used for groups of characters.)              
                                                                                
To test an area for any data use OC or NC instruction.  (This is particularly   
useful for testing binary rows of accumulators.)                                
                                                                                
         OC    ACCUMS,ACCUMS                                                    
         BZ    SKIPTOTS                                                         
                                                                                
To test if an area is filled with a character (say *).                          
                                                                                
         CLI   AREA,C'*'                                                        
         BNE   NO                                                               
         CLC   AREA+1(L'AREAI-1),AREA                                           
         BNE   NO                                                               
                                                                                
To test a register for zero/plus/minus, load and test it with itself            
                                                                                
         LTR   R1,R1                                                            
         BZ    ZERO                                                             
                                                                                
To test for numeric input data (say 8 byte data at field)                       
                                                                                
         MVC   WORK(8),=8X'F0'                                                  
         MVZ   WORK(8),FIELD                                                    
         CLC   WORK(8),=8X'F0'                                                  
         BNE   NOTNUMRC                                                         
                                                                                
Variable length instructions that use EX can conveniently be written -          
                                                                                
         L     R1,LENGTH                                                        
         BCTR  R1,0                                                             
         EX    R1,*+8                                                           
         B     *+10                                                             
         MVC   FIELDA(0),FIELDB                                                 
                                                                                
To swap two registers or two areas of storage without using a third,            
use three Exclusive ORS.                                                        
                                                                                
         XC    FIELDA,FIELDB                                                    
         XC    FIELDB,FIELDA                                                    
         XC    FIELDA,FIELDB      (magic)                                       
                                                                                
The use of PWOS (packed without sign) fields is attractive for file-saving with 
dump readability and can be packed and unpacked as follows -                    
                                                                                
         PACK  WORK(3),INPUT(5)   This example converts 4 byte input field      
         MVC   PWO(2),WORK             to 2 byte PWO                            
                                                                                
         UNPK  WORK(7),PWO(4)     And this converts 3 byte PWO to 6 byte        
                                  output.                                       
         MVC   OUTPUT(6),WORK                                                   
                                                                                
 Rounding                                                                       
 --------                                                                       
Suppose that you want to divide A by B and get the rounded answer in C          
                                                                                
         L     R2,A               Load into any even register.                  
         SR    R3,R3                                                            
         SRDA  R2,31              This will put twice A in R2 and R3.           
         D     R2,B                                                             
         LTR   R3,R3              See if the answer is negative.                
         BM    *+8                If it is we don't need to add 1               
         AH    R3,=H'1'           (not a LA instruction).                       
         SRA   R3,1               Divides by 2.                                 
         ST    R3,C               Rounded answer in C.                          
                                  (Remainder is still in R2.)                   
 Relocatable Factors                                                            
 -------------------                                                            
If you are writing a module which uses A or V type ADCONS, and you are not sure 
whether your module will be self-relocating, the following technique comes to   
the rescue.                                                                     
                                                                                
         LA    R9,RELO                                                          
         S     R9,RELO                                                          
         GOTO1 =V(somwhere),PARAS,RR=R9                                         
          etc.                                                                  
                                                                                
RELO     DC    A(*)                                                             
                                                                                
 Handling Lists/Table                                                           
 --------------------                                                           
Simple lists of known dimension are handled with the BCT instruction. Suppose I 
want to know if a 3 character field is a valid month.                           
                                                                                
         LA    R2,MONTHLST                                                      
         LA    R3,12                                                            
                                                                                
LOOP     CLC   0(3,R2),FIELD                                                    
         BE    OK                                                               
         LA    R2,3(R2)                                                         
         BCT   R3,LOOP                                                          
         B     INVALID                                                          
                                                                                
                                                                                
                                                                                
                                                                                
MONTHLST DC    C'JANFEB...'                                                     
                                                                                
More complicated lists, where width and/or length of table may vary, are handled
better with a BXLE loop as the coding will stay 'SOFT' when the table changes.  
                                                                                
         L     R3,=V(FRUITS)      Point to start of list                        
         LH    R4,0(R3)           Get width of each entry                       
         L     R5,2(R3)           Get end of table address                      
         LA    R3,6(R3)           Points to first entry                         
                                                                                
LOOP     ...                                                                    
         ...                                                                    
         BXLE  R3,R4,LOOP                                                       
         B     MISSED                                                           
                                                                                
                                                                                
The table referred to above would be defined as follows -                       
                                                                                
         CNOP  2,4                Forces to odd half-word alignment             
         ENTRY FRUITS                                                           
FRUITS   DC    H'10'              Width of each entry                           
         DC    A(FRUITEND-1)      End of list minus 1                           
         DC    CL10'APPLE'                                                      
         DC    CL10'GRAPEFRUIT'                                                 
         DC    CL10'WATERMELON'                                                 
         ...                                                                    
         ...                                                                    
         DC    CL10'LASTFRUIT'                                                  
FRUITEND DS    0C                                                               
                                                                                
 Handling Addresses in DSECTS                                                   
 ----------------------------                                                   
It is often useful to have a list of addresses of items that are covered by a   
DSECT, but this is not permitted by the assembler.  The following technique     
comes to the rescue.  (Say we need addresses of 10 input fields in a TWA.)      
                                                                                
         LA    R2,HEADLIST                                                      
         LA    R3,4                                                             
         SLL   R3,4                                                             
         LA    R5,10                                                            
                                                                                
LOOP     EX    R3,0(R2)           This will load the address of a field into R4 
         ...                           (believe it or not)                      
         ...                                                                    
         LA    R2,4(R2)                                                         
         BCT   R5,LOOP                                                          
         B     DONE                                                             
                                                                                
HEADLIST LA    R0,TWAFLD1 LA    R0,TWAFLD2                                      
         ...                                                                    
         LA    R0,TWAFLDA                                                       
