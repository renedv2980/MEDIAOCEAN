         <   > Introduction                                                     
Test facilities are available for both on-line and off-line development.  They  
are designed to make it easy to create test versions of programs and then to    
modify (patch) them in order to either fix them or cause dumps.  Extensive      
development work has been done as well to support running test programs against 
real data without updating the real files, as well as providing test versions of
real files which can be updated.                                                
                                                                                
The first step in any program testing is to take some step to assure the        
continued existence of the program. Depending on the magnitude of the change,   
this may involve saving the source and executable code, or the executable code  
only.  Take care to preserve not only the original program, but (perhaps even   
more importantly) the orignal dsects as well. Also, remember that there is      
really no such thing as a simple change - only changes that seem simple. The    
problem we run into time and again is that other relocatable programs that are  
included with yours may also have changed - and you have no real way of knowing 
that they have. So a one instruction fix that is linked as the live version of a
program without back-up can turn into an instant disaster. Thus the simple rule 
- NEVER LINK A NEW VERSION OF A PROGRAM UNDER THE PRODUCTION NAME. Link it as a 
test version and then rename the phases. Period.                                
                                                                                
There is a test on-line system (FACTEST) that closely parallels the features of 
the production systems (FACADV/FACREP).  The MAF sign-on for the test system is 
/TST.  All on-line testing should be done on the test system. If at any time you
are unsure which system you are connected to, enter $WHOAMI in the service      
request field. The screen will clearly indicate the system you are using.       
Needless to say, testing on the live system is not viewed favorably.  While our 
systems endeavor to recover from program failures, we are not able to memory    
protect storage, and a runaway application can damage core enough to bring the  
system down.                                                                    
                                                                                
The on-line test facilities are supported by the following service requests :   
                                                                                
                                                                                
   $LOAD - Moves programs from the MVS Load Library to the FACPAK               
           PRGMS file. Allows you to create test versions of a program,         
           or to load test versions as live.                                    
                                                                                
   $DISP - Allows display and patch of programs on FACPAK PRGMS file.           
   $PATCH                                                                       
                                                                                
   $TEST - Allows you to create a file where you can log updates                
           without writing to a real data file.                                 
                                                                                
   $CT   - Allows you to indicate which version of a program should be          
           used, and to associate a terminal with the $TEST facility.           
                                                                                
   $PHASE- Allows you to see all the overlays that have been loaded             
           at a particular phase level.                                         
                                                                                
While these are discussed in detail under the appropriate headings in           
the manual, we will deal with their use specifically for testing here.          
                                                                                
         <   > $LOAD                                                            
 $LOAD is used to transfer an executable module from the MVS load library to the
FACPAK PRGMS file. The PRGMS file is a direct access file that contains all the 
overlays used by the system. Having it as a direct access file guarantees that  
an overlay can be fetched in one i/o, as well as allowing us to patch the       
program without fear of destroying the load library. When the PRGMS file is     
'reloaded' at system start-up, the system loads all the overlays that are       
defined in the phase list (FAPLHS) from the load library. Everything goes back  
to square one. (You may observe that square one is not necessarily a good place 
to be if an overlay has disappeared or if a non-working test version has        
inadvertently become live. Most emphatically, square one is not necessarily the 
same as yesterday.) This also means that if you have defined test levels of     
phases, they will disappear.                                                    
                                                                                
 $LOAD has a lot of options, but here is a quick guide to using them.           
                                                                                
 The PHASE field is the name of the program on the load library.                
                                                                                
 The LEVEL field asks you whether the program will be live (blank) or a         
test version (A,B,C). Note that there is no necessary relation between          
the levels of a phase on the load library and in the phase list. Thus,          
you can add T21100 to the phase list as T21100A, B, or C.  Technically, you can 
even add T21100A on the load library as T21100C in the phase list. Bear in mind,
however, that the system provides no help later on if you get confused.         
                                                                                
 The ACTION field asks whether this is a special event, like whether this is the
first time that you are loading this phase to this level (action=Add), or       
whether you are removing a phase from a level (action=Del).                     
                                                                                
 The NODES field is used to define an overlay structure. Unless you are adding a
new phase, do not enter node information.  See the sections on CALLOV and the   
'PHASE LIST' for more information. What is quite important is to make sure that 
you do not inadvertently add node information by not erasing the results of a   
previous $LOAD from the screen.                                                 
                                                                                
To be a part of the production system a program must be defined in two places - 
an entry must appear in the program name list in FATAB that equates the program 
name to the program number, and entries must be made in FAPHLS to define each of
the overlays and the manner in which they are to be loaded. It is NOT necessary 
to do this in order to test. There is, however, a bit of work involved if these 
entries have not been made.                                                     
                                                                                
If your program is not defined in the program name list, you must identify it to
the system by number (and not by name) in the PROGRAM field on the $CT screen.  
The entry looks like P=nn.                                                      
                                                                                
If your program is not defined in the phase list you have a choice to make. If  
you have a simple overlay structure (like a base program that loads all of its  
overlays directly behind it), you can execute directly from the load library. To
do this you specify C=Y in the PROGRAM field. The disadvantage of this approach 
is that patching is difficult.                                                  
                                                                                
The other choice is to create test versions of the overlays in the phase list   
using $LOAD. To do this you enter the  loadlib name and the phase list level,   
which must be A, B, or C.  The first time you add the phase at a particular     
level, you must specify A(dd) in the Action field. If you are adding a phase,   
you must also provide node information. For now, let us leave it that the nodes 
for a base program are always 01, and the overlays that come immediately behind 
it have nodes of 10. Screens are always 00.                                     
                                                                                
         <   > $DISP/$PATCH                                                     
$DISP/$PATCH are used to alter object code in the version of the program that is
on the PRGMS file. To display a portion of a program, enter the phase name in   
the first field, and the program displacement in the second. If you wish to     
patch after the display you must enter a 'P' in the third parameter when you    
request the display. The strategy of patching is more an art than a science.    
Perhaps we can add more here later.                                             
                                                                                
         <   > $TEST                                                            
$TEST is used to allow you to create a testing environment where you can read   
real files, but all writes are intercepted and written to an assigned area on   
the TSTRCVR file. The idea is to allow you to see what your program would have  
done if it had added or changed the record, without the damage that results from
adding absolute garbage to a real data file.  To begin, select a short ID (like 
your initials) and add it through $TEST. The system will assign a 'control      
interval' where your records will be written, and indicate the current last     
record address.  It is important not to enter anything else at this time. It can
only go wrong.                                                                  
                                                                                
When you are ready to sign on, you invoke the $TEST facility by specifying I=ID 
(where ID is the test ID you selected) after the program name. However, that is 
not quite enough. If you actually want the records written to your control      
interval, you must also specify U=N (update=no). If you are on the test system, 
and have read-only access to a data file, forgetting to do this is an exercise  
in frustration - your adds and writes are simply discarded. If you are on the   
real system and forget to do this, you will continue to update the actual data  
files.                                                                          
                                                                                
After logging on and successfully entering a transaction, if you input $TEST in 
the s/r field and your ID in the first parameter, the current status of your    
control interval is displayed to you. If the last record address has not changed
you have done something wrong. If it has changed, you can proceed to use $TFM to
display the results of the transaction. You might want to make a note of the    
last record address, since the trail of the next transaction will begin at the  
record after it. You may also change the last record address to point to the    
beginning of any other track in your control interval. When you change the track
address (the first two bytes), you must always reset the record number (the     
third byte) to 0.                                                               
                                                                                
The TSTRCVR file is an image of a RECOVERY file. Before each data record on this
file there is a 24 byte recovery header. The first byte represents the          
transaction code (01=copy, 02=change, 03=add). Adds are obvious, copies are     
images of records before a change, changes are images of records after a change.
The second byte represents the file code, which is distinct for each system.    
Usually you can guess the actual file from what the record looks like (e.g.,    
directory pointers are short and have a key and disk address, requests are      
EBCDIC, etc.). The file number table is found in DATAMGR.                       
                                                                                
The only really useful help I can offer here is to point out the 'E' option - if
you are looking at a record that has an elemental structure, and you wish to    
display the elements (like in PFM), you must use action E rather than action D. 
The E tells TFM to eliminate the recovery header - that is, not count the       
recovery header as part of the record. Ignore any error messages that are on the
screen when you do this. Otherwise, the input is similar to $PFM.               
                                                                                
         <   > $CT                                                              
$CT has been discussed in passing. Here is a summary of the options specific to 
testing, all of which are entered in the PROGRAM field.                         
                                                                                
1.  I=ID to reference a test environment previously set up in $TEST.            
                                                                                
2.  U=N  to actually cause updates to be recorded in the test control interval. 
                                                                                
3.  T=A/B/C to use an alternate version of the program                          
                                                                                
4.  C=Y  to invoke the program from LOADLIB                                     
                                                                                
5.  P=nn to specify a program not defined in FATAB (must also specify C=Y).     
                                                                                
6.  DDS=N makes your terminal appear not to be a DDS terminal (which            
    has special authorization)                                                  
                                                                                
7.  A=xxxx gives your terminal the specified authorization bits, which          
    are found in TWAAUTH                                                        
                                                                                
8.  L=AAAA allows you to override a limit access code associated with           
    an ID. For example, you can sign on using an ID with a limit access         
    code, and then access any data by saying 'L= ,'. The data input here        
    goes in TWAACCS.                                                            
                                                                                
         <   > $PHASE                                                           
$PHASE is useful if you wish to see which overlays have been loaded at a        
particular level (blank/A/B/C). Overlays which exist at the level you specify   
are followed by that letter. Those which do not are followed by a blank. When an
overlay has not been loaded at a particular level, the default version is       
executed. Note that if you are testing in T=B mode, and you have loaded your    
test versions as 'A' phases, you will in fact use the blank (default) version.  
There is no hierarchical structure to A,B,C - they are simply used to uniquely  
identify a level.                                                               
