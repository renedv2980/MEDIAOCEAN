Source book:   DDBUFFERIN                                                       
Relo. name:    BUFFERIN                                                         
DSECT:         DDBUFFD                                                          
Testing bed:   BUFFTEST (see DCBUFFTEST for use)                                
Note:          View this book in expanded mode to see the included DSECT        
               in full.                                                         
                                                                                
 Module maintains keyed arrays of data and/or accumulators.  For some           
applications it can be used instead of BUFFALO (see notes at the end of         
this book for differences).  Records (rows) are added to the arrays in          
random key sequence and read back in ascending or random key sequence.          
If the array doesn't fit into the available storage track buffers are           
written off to a disk file (named in the BUFFD macro) and read back in          
as required - these I/Os are invisible to the caller.                           
                                                                                
 There is a test program (BUFFTEST) which can be used to run simulations        
of array processing - see DCBUFFTEST for details.                               
                                                                                
                                                                                
 Each array is defined using the BUFFD macro as follows:-                       
                                                                                
LABEL    BUFFD TYPE=D(DATA) or B(INARY) or P(ACKED),                            
               KEYLEN=hard or soft expression,                                  
               COMLEN=hard or soft expression,                                  
               COLUMNS=hard or soft expression,                                 
               BUFFERS=hard or soft expression (default=2),                     
               REPCOM=Y (default) or N,                                         
               FILE=file name (optional if LABEL defined)                       
                                                                                
 Macro definition:-                                                             
                                                                                
LABEL    -     Gives a name to the array control block and may be used          
               to generate a file name (if not specified with the FILE          
               parameter).  If the file name is not defined with the            
               FILE= parameter the LABEL itself must not be more than 7         
               characters long - the generated file name will be the            
               array name suffixed with a D (eg LABELD).                        
                                                                                
TYPE=D   -     The array contains data only with no accumulators.               
                                                                                
TYPE=B   -     The array contains binary accumulators of length 4.              
                                                                                
TYPE=P   -     The array contains packed accumulators of length 8.              
                                                                                
KEYLEN   -     Defines the length of the key for each row.  This may be         
               coded as a hard length (eg 10) or as a soft length               
               (eg MYKEYLEN, L'MYKEY etc.). The maximum length of key           
               supported is 256 bytes.                                          
                                                                                
COMLEN   -     Defines the length of the comment for each row.  For             
               TYPE=D this is the length of the data.  This may be coded        
               as a hard length (eg 20) or as a soft length (eg MYCOMLN,        
               L'MYCOM etc.).                                                   
                                                                                
COLUMNS  -     For TYPE=B or P only, defines the number of accumulator          
               columns in the record.  This may be coded hard or soft.          
               The maximum number of columns supported is 256.                  
                                                                                
BUFFERS  -     Defines the number of core buffers to allocate, if not           
               given the default is 2.  The number of core buffers may          
               affect performance - too few buffers may increase the            
               amount of disk I/O.  The number of I/Os executed is              
               held in the control block (BUFFNIOS) as an unsigned              
               halfword.                                                        
                                                                                
REPCOM   -     May be defined for TYPE=B and P only.  This option               
               controls the 'comment' area in the record.  If REPCOM=Y          
               is specified the comment area in the record will always          
               be updated when a record is put to the array, otherwise          
               it will only be updated if the comment area in the array         
               is nulls.                                                        
                                                                                
FILE     -     Defines the file name for the array - maximum of 8               
               characters in length.                                            
                                                                                
Each row in the array has the same structure as follows:-                       
                                                                                
 For TYPE=DATA arrays                                                           
                                                                                
Row key   -     Key of length KEYLEN                                            
Data      -     Data of length COMLEN                                           
                                                                                
 For TYPE=BINARY arrays                                                         
                                                                                
Row key   -     Key of length KEYLEN                                            
(Comment) -     Optional comment of length COMLEN                               
Accums    -     (COLUMNS)XL4                                                    
                                                                                
 For TYPE=PACKED arrays                                                         
                                                                                
Row key   -     Key of length KEYLEN                                            
(Comment) -     Optional comment of length COMLEN                               
Accums    -     (COLUMNS)PL8                                                    
                                                                                
Building and processing arrays:-                                                
                                                                                
 Use the BUFFERIN module to build and process arrays - the parameter            
list to the module is defined in DDBUFFD.  Apart from the initialization        
call (BUFFACTN=BUFFAINI) and close call (BUFFACTN=BUFFACLO) the actions         
may be processed in any sequence.                                               
                                                                                
 BUFFERIN actions:-                                                             
                                                                                
BUFFAINI -     This initializes the array.  The maximum number of rows          
               in the array is determined by the size of the file               
               defined and the size of each record.  The INI function           
               opens the file and extracts the number of tracks defined         
               (see notes on 'Defining files' later on).  The number of         
               rows per track is calculated using the formula                   
               (TRACKSIZE/RECORDSIZE) - this multiplied by the number of        
               tracks defined in the execution JCL is the maximum number        
               of rows allowed in the array.  If you run out of space in        
               the array give it a bigger file to work with.  Track             
               buffers and a track index are also allocated in 31-bit           
               addressable storage - addresses in the control block             
               point to these buffers.  Once an array has been processed        
               it can be used again by issuing another INI call (if this        
               is used don't issue a CLO call between each INI call as          
               MVS will drop dynamic file allocations when a file is            
               closed).  Note that the total record size may not exceed         
               the size of a track.  Also note that the fields in BUFFD         
               may be set by the application before using the INI call -        
               in which case the BUFFD macro can be defined with mimimal        
               values (eg KEYLEN=1,COLUMNS=1).  The same array may be           
               used multiple times for different structured arrays using        
               this method.                                                     
                                                                                
BUFFAPUT -     This adds or updates a record in the array.  If the key          
               of the row already exists in the array the record in the         
               array will be updated (ie the data will be replaced if           
               TYPE=DATA is defined, or the comment and accumulators            
               will be updated in the array record for the other types),        
               if not a new row will be created.                                
                                                                                
BUFFAGET -     Returns a row from the array with a specific key.  If the        
               key doesn't exist in the array an error is returned.             
                                                                                
BUFFARDH -     Returns a row from the array with a key equal to or              
               greater than the specified key.  An error is returned if         
               the specified key is greater than the highest one in the         
               array.                                                           
                                                                                
BUFFASEQ -     Return the next row in the array following a GET, PUT or         
               RDH. An error is returned after the last row has been            
               read.                                                            
                                                                                
BUFFACLO -     Optional call which closes the file and issues FREEMAINs         
               for the acquired buffers.  MVS will normally do this for         
               you when the application terminates.  Note that if your          
               execution JCL uses dynamic allocation for the file this          
               will probably be dropped by MVS when the file is closed          
               so a subsequent INI call for the same array may fail.            
                                                                                
 BUFFERIN control block and parameter list definitions:-                        
                                                                                
       ++INCLUDE DDBUFFD                                                        
                                                                                
Note:-  Although you have to pass the address of COMFACS to BUFFERIN as         
        a parameter only CDATAMGR is referenced (which happens to be the        
        first address in COMFACS).  So if COMFACS isn't available to            
        your application use the following coding technique:-                   
                                                                                
COMFACS  DS    0F                  ** Don't define this as 0A **                
         DC    V(DATAMGR)                                                       
                                                                                
 Defining files                                                                 
                                                                                
Use one of the following styles of DD statement for disk files:-                
                                                                                
//myfile   DD  UNIT=VIO,SPACE=(TRK,ntrks)  where ntrks=number of tracks         
           or                              to assign                            
//myfile   DD  UNIT=VIO,SPACE=(CYL,ncyls)  where ncyls=number of                
                                           cylinders to assign                  
                                                                                
Notes for applications which currently use BUFFALO:-                            
                                                                                
BUFFALO supports compressed binary accumulators (using CVDX and CVBX) -         
BUFFERIN doesn't - if binary accumulators aren't big enough use packed.         
BUFFERIN doesn't handle the KEYLIST function that is supported in               
BUFFALO.  BUFFERIN never removes a record from the array whereas BUFFALO        
removes rows whose accumulators are all zero.  BUFFALO only allows a            
single array to be defined - BUFFERIN allows any number of arrays (as           
long as there is enough virtual storage to support them - note that             
each array must have a unique LABEL and file assigned - each array              
control block is 420 bytes long).  The default file name that BUFFALO           
uses is BUFFWK in the US and SORTWK9 in the UK - when converting                
you can use the same file name for your array by using the FILE=                
parameter in the DBUFF macro (eg FILE=BUFFWK) - which means you won't           
have to make any JCL changes.                                                   
