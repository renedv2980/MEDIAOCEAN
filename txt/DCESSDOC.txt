Definition of SIXPAK Products                                                   
-----------------------------                                                   
SIXPAK is a set of PC and mainframe programs that communicate via LU6.2         
protocol which provides a client/server architecture between work               
stations on a LAN and data stored on the mainframe. The design aims are         
to take advantage of products that already exist (eg MONSOON which will         
be used to run requests) and to keep the first version as simple as             
possible to facilitate an early release. The major programs involved            
are ESS, VERDICT, and EDICT.                                                    
                                                                                
ESS, VERDICT and EDICT will pass messages to each other. A message is           
either a control message (eg Are you still there), an information msg           
(eg File now ready for sending), or a request (eg Send me the next              
file). Requests can be created by workstations. A message will consist          
of a fixed length,fixed format header followed by a variable length,            
variable format data area. The contents of this data is a function of           
the message type .                                                              
                                                                                
ESS                                                                             
---                                                                             
ESS (External System Server) is a PC program that runs on an OS/2 box           
that receives requests from workstations on the LAN on which it resides.        
Its main function is to act as a multi-tasking server which takes               
requests from DDS written client programs running on the LAN and to pass        
on those requests to the mainframe when the data requested is not               
available locally.                                                              
                                                                                
Communication to the mainframe will be via APPC/APPN functions provided         
by the OS/2 Communication Manager and bulk file tranfers will use the           
new IBM Netview file tranfer programs for workstations. ESS routines            
that communicate with the mainframe will use CPI-C (Common Program              
Interface - Communications) as the API to the APPC (Advanced  Program           
to Program Communication) functions that enable LU6.2 protocol in the           
OS/2 Communication Manager environment.                                         
                                                                                
ESS will maintain conversations with two MVS partner programs. When ESS         
wants to send a request to MVS, or to send status data or information           
messages, it will do so via its conversation with VERDICT, which is             
the MVS program whose principal function is to listen (receive) for             
requests from the ESS servers. When the data from a previoulsy ESS              
submitted request becomes available the MVS program EDICT will spot             
that the data is ready and will sent a message to ESS that the data             
is available. ESS maintains a convestation with EDICT in which ESS              
is the listening partner in this conversation.                                  
                                                                                
VERDICT                                                                         
-------                                                                         
VERDICT is a new MVS program whose principle function is to receive             
requests from each ESS server out on the SNA network . If the request           
is trivial (eg a request for the date/time) then ESS will answer the            
request itself and go back into receive mode. If the request requires           
that a job is run, then VERDICT will write the request to the Print             
Queue and inform ESS that the request has been received, and has been           
submitted for processing via a MONSOON job. It will then return to              
receive mode ready for the next request. VERDICT will maintain an               
APPC conversation with each ESS server in the SNA network and will              
use the APPC API into native MVS VTAM to provide the LU6.2 support.             
                                                                                
EDICT                                                                           
-----                                                                           
EDICT is an existing program that looks for reports on the Print                
Queue that have a special class (G) and have a special header line              
that contain the destination address of the report data. EDICT then             
sends the report to the required location. This program will be                 
extended to support each ESS server as a possible destination for               
the report data on the Print Queue. It will also be extended so that            
data in a DDS worker file or MVS data set can be sent as well as                
reports on the Print queue. EDICT will maintain an APPC conversation            
with each ESS server on the SNA network and will use the APPC API into          
native VTAM to provide the LU6.2 support. The steady state mode of              
EDICT will be send. When data is available for an ESS server EDICT will         
sent a file ready notification to ESS which includes the name name and          
the size of the file. ESS will make a decision based upon the file              
information to respond to EDICT in one of two ways. The first is to             
acknowledge the message with the response that ESS will itself schedule         
the file transfer. The Second is to ask EDICT to send the file itself           
as part of the conversation (ie a simple file transfer dialogue). When          
the transfer has completed EDICT will mark the report as sent and will          
go back to its send state ready for the next file .                             
                                                                                
ESS to MVS Conversations                                                        
------------------------                                                        
ESS acts as the server to its client workstations on the LAN. However           
when it is talking to MVS its role is reversed - it becomes a client            
to the MVS server. In client/server conversations it is conventional            
for the client to initiate a conversation to its server. The main               
reason for this is that the server is considered to be permanent and            
the client transient . Thus there is much more probabilty of the                
server being around to respond when first contact is required. The              
other main reason is that it is the server's responsibility to check            
and maintain security and thus can refuse access at the client's first          
attempt to communicate.                                                         
                                                                                
When ESS is initialised on the OS/2 workstation it will initiate two            
conversations to its MVS server partner programs VERDICT and EDICT. It          
is assumed that the two MVS programs will be permanently running so that        
the conversations can be initialised.                                           
                                                                                
As CPI-C is the SAA programming interface for APPC, the conversations           
between partner programs will be described using the basic CPI-C verbs          
and function calls as these are well understood and documented. Also            
referred to will be a set of standard DDS messages for passing requests,        
information, and errors. These will be defined in detail in Appendices          
to this document.                                                               
         EJECT                                                                  
Message Header Format                                                           
---------------------                                                           
Information in a message header is needed to define the message,identify        
the sender, and to contain enough information so that message logs can          
be created for audit trails and debugging. LU6.2 is transparent to user         
data, allowing binary information to be sent. We need to take advantage         
of the conciseness of binary data, but also bear in mind the readability        
of the data, and the fact that binary representations of numbers differ         
by platform.                                                                    
We also recognise that different sorts of messages require more data in         
the header than simple control messages. It is important that the basic         
header does not contain fields that are only required by more complex           
messages. We thus have the structure of a 16 byte basic header that all         
messages will contain. This header will contain flags that identify if          
an extended header is used and if any data follows the header.                  
                                                                                
Len Typ  Basic header field                                                     
--- ---  ------------------                                                     
 2   C   DD character string at start of every message.                         
 1   C   Message type C=Control,I=Info,E=Error,R=request,                       
 3   C   Message Id within Type.                                                
 2   B   Sender Id. Each application has unique Id.                             
 2   B   Date of Message                                                        
 3   B   Time of Message                                                        
 1   B   Header Send Flags - set be sender/originator                           
 1   B   Header Recv Flags - set by receivor/replyer                            
 1   B   Header Type Extended,Withdata                                          
                                                                                
Len Typ  Extended Header Field                                                  
--- ---  ---------------------                                                  
10   C   Request Reference (Originator)                                         
 1   C   Request Priority  (Originator)                                         
 3   C   Request Application System                                             
 3   C   Request Application Program                                            
 8   C   Request User Id                                                        
 8   C   Request Password                                                       
 6   C   Spare                                                                  
                                                                                
Len Typ  Exchange data at Handshake                                             
--- ---  --------------------------                                             
 8   C   Exchange text field c'MYNAMEIS'                                        
 6   C   Unique integer ID                                                      
 8   C   Password                                                               
 8   C   Network Id                                                             
 8   C   Logical Unit Id                                                        
 8   C   Transaction Program Name                                               
 2   C   Version                                                                
 2   C   Level                                                                  
 8   C   Date YYYYMMDD                                                          
 6   C   Time HHMMSS                                                            
         EJECT                                                                  
ESS/VERDICT message flow                                                        
------------------------                                                        
The details of the ESS/VERDICT message flow is shown below. The numbers         
represent important points in the conversation flow which are explained         
in the nores following the flows. The >>> symbol means that data flows          
accoss the session.                                                             
                                                                                
n# ESS-----------------------       VERDICT-------------------------            
01 Initialise_Conv(Id)                                                          
02 Set_Conv_Type(Id,Basic)                                                      
   Set_Synch_level(Id,Confirm)                                                  
   Set_Return_Control(Id,Alloc)                                                 
03 Allocate_Conv(Id)                                                            
04 Flush(id)                  >>>   Accept_Conv(Id)                             
                                    Set_Recv_Type(Id,R&Wait)                    
05                                  Receive(Id)                                 
   ..                               ..                                          
   ..                               ..                                          
06 ESS HAS A SIMPLE REQUEST         ..                                          
07 Set_Send_Type(Id,S&PtR)          ..                                          
   Send(Id,DDS#R001)          >>>   ..                                          
   Set_Recv_Type(Id,R&Wait)         Set_Send_Type(Id,S&PtR))                    
08 Receive(Id)                <<<   Send(ID,DDSREQ#+Answer)                     
                                    Set_Recv_Type(Id,R&Wait)                    
                              >>>   Receive(Id)                                 
   ..                               ..                                          
   ..                               ..                                          
   ..                               ..                                          
09 ESS HAS A COMPLEX REQUEST        ..                                          
10 Set_Send_Type(Id,S&PtR)          ..                                          
   Send(Id,DDS#R002)          >>>   ..                                          
   Set_Recv_Type(Id,R&Wait)         Set_Send_Type(Id,S&PtR))                    
11 Receive(Id)                <<<   Send(ID,DDSREQ#+Sendmemore)                 
                                    Set_Recv_Type(Id,R&Wait)                    
12 Set_Send_Type(Id,Sdata)           ..                                         
13 Send(Id,Req Data)                ..                                          
   Send(id,Req Data)                Receive(Id)                                 
   ..                               Receive(Id)                                 
   Set_Send_Type(Id,S&PtR)          ..                                          
14 Send(Id,DDSREQEND)         >>>   ..                                          
   Set_Recv_Type(Id,R&Wait)         Set_Send_Type(Id,S&PtR))                    
15 Receive(Id)                <<<   Send(ID,DDSREQ#+MVSreference)               
                                    Set_Recv_Type(Id,R&Wait)                    
                              >>>   Receive(Id)                                 
   ..                               ..                                          
   ..                               ..                                          
                                                                                
17 ESS CLOSING DOWN NORMAL          ..                                          
18 Set_Deal_Type(Id,Flush)          ..                                          
   Deallocate(Id)              >>>  Task exits normally                         
   ..                               ..                                          
                                                                                
19 ESS CLOSING DOWN ABEND           ..                                          
20 Set_Deal_Type(Id,Abend)          ..                                          
   Deallocate(Id)              >>>  Task sets flag for ESS down                 
   ..                               ..                                          
   ..                               ..                                          
                                                                                
                                                                                
01,02,03,04 - Conversation is initialised by ESS. The conversation mode         
is Set to Basic mode conversation, with synch level of confirm, and with        
a request to return when the session is allocated. The Allocate command         
at #03 causes the LU-LU session to be set up ,and the Flush command at          
#04 causes a conversation startup request to be sent.                           
                                                                                
04,05 - VERDICT has been started on the MVS system and has ititialised          
a task that is going to be the partner for this conversation. An Accept         
conversation has been issued followed by a receive. ESS is now in its           
normal state of Send and VERDICT is it its normal state of receive.             
                                                                                
06,07,08 - ESS has a simple request. This is a request that is defined          
entirely by the data in the request record and can be answered by               
VERDICT. The first simple request that ESS sends to VERDICT is the              
"handshake" request where the request contains LUID data, date/time             
and some simlpe text. Another example is where ESS has timed out                
and sends an "Are-you-still-there" request to VERDICT. If a simple              
request is valid, VERDICT adds the requested data to the request and            
sends the data back. Each partner resorts back to their normal state.           
                                                                                
09,10,11 - ESS has a complex request. This is a request that needs              
extra data to define the request or requires data outside of the                
scope of VERDICT. In this case the dialogue starts in the same way as           
a simple request at 05,06,07 above but the reply does not contain an            
answer but will return a request for more data if any .                         
                                                                                
12,13,14 - ESS will send as many request records as are required to             
define the details of the request and VERDICT will receive these records        
and process them eg validate and write to the PQ. ESS will then send a          
special end-of-request record .                                                 
                                                                                
15 - When VERDICT receive the end-or-request record it processes the            
request and either returns an error message or an OK message with the           
MVS request reference (eg PQ ID). ESS receives the reply and returns to         
send state and VERDICT reverts back to receive state.                           
                                                                                
17,18 - If ESS is coming down for a normal reason (eg at its end-or-day)        
then it will inform VERDICT of this fact.                                       
                                                                                
19,20 - If ESS has a problem that requires it to abend it will try to           
inform VERDICT of this fact.                                                    
         EJECT                                                                  
ESS/EDICT message flow                                                          
------------------------                                                        
The details of the ESS/EDICT message flow is shown below. The numbers           
represent important points in the conversation flow which are explained         
in the nores following the flows. The >>> symbol means that data flows          
accoss the session.                                                             
                                                                                
n# ESS-----------------------       EDICT---------------------------            
01 Initialise_Conv(Id)                                                          
02 Set_Conv_Type(Id,Basic)                                                      
   Set_Synch_level(Id,Confirm)                                                  
   Set_Return_Control(Id,Alloc)                                                 
03 Allocate_Conv(Id)                                                            
04 Flush(id)                  >>>   Accept_Conv(Id)                             
                                    Set_Recv_Type(Id,R&Wait)                    
05                                  Receive(Id)                                 
   ..                               ..                                          
   ..                               ..                                          
06 ESS DOES HANDSHAKE REQUEST       ..                                          
07 Set_Send_Type(Id,S&PtR)          ..                                          
   Send(Id,DDS#R001)          >>>   ..                                          
   Set_Recv_Type(Id,R&Wait)         Set_Send_Type(Id,S&PtR))                    
08 Receive(Id)                <<<   Send(ID,DDSREQ#+Answer)                     
                                    Set_Recv_Type(Id,R&Wait)                    
                              >>>   Receive(Id)                                 
   ..                               ..                                          
09 ESS REVERSE STATE REQUEST        ..                                          
   Set_Send_Type(Id,S&ptR)          ..                                          
   Send(Id,DDS#C001)          >>>   EDICT now in send state                     
   Set_Recv_Type(id,R&Wait)                                                     
   Receive(Id)                                                                  
   ..                               ..                                          
   ..                               ..                                          
10 ..                               EDICT SENDS A FILE READY MESSAGE            
   ..                               Set_Send_Type(Id,S&PtR)                     
11 ..                         <<<   Send(Id,DDSINF#)                            
   Set_Send_Type(Id,S&ptR)          Set _Recv_Type(Id,R&Wait)                   
12 Send(Id,DDS#C001)          >>>   Receive(id)                                 
   Set_Recv_Type(id,R&Wait)                                                     
   Receive(Id)                      EDICT now in send state                     
   ..                               ..                                          
   ..                               ..                                          
                                                                                
13                                  EDICT DOES A FILE TRANSFER                  
   ..                               Set_Send_Type(Id,S&PtR)                     
14 ..                         <<<   Send(Id,DDSINF#)                            
   Set_Send_Type(Id,S&ptR)          Set _Recv_Type(Id,R&Wait)                   
15 Send(Id,DDS#C002)          >>>   Receive(id)                                 
   Set_Recv_Type(id,R&Wait)                                                     
16 Receive(Id)                                                                  
   ..                               Set_Send_Type(Id,Sdata)                     
   ..                               Send(Id,Req Data)                           
   Receive(Id)                <<<   Send(id,Req Data)                           
   ..                               ..                                          
   ..                               Set_Send_Type(Id,S&PtR)                     
17 Set_Send_Type(Id,S&PtR)    <<<   Send(Id,DDSREQEND)                          
   Send(Id,ESSreference)      >>>   Receive(Id)                                 
   Receive(iD)                                                                  
   ..                               ..                                          
   ..                               ..                                          
                                                                                
18 ..                               EDICT CLOSING DOWN NORMALLY                 
   ..                               Set_Deal_Type(Id,Flush)                     
   ESS task takes normal exit  <<<  Deallocate(Id)                              
   ..                               ..                                          
                                                                                
19 ..                               EDICT CLOSING DOWN ABEND                    
   ..                               Set_Deal_Type(Id,Abend)                     
   ESS sets EDICT down flag    <<<  Deallocate(id)                              
                                                                                
                                                                                
01,02,03,04 - Conversation is initialised by ESS. The conversation mode         
is Set to Basic mode conversation, with synch level of confirm, and with        
a request to return when the session is allocated. The Allocate command         
at #03 causes the LU-LU session to be set up ,and the Flush command at          
#04 causes a conversation startup request to be sent.                           
                                                                                
04,05 - EDICT has been started on the MVS system and has ititialised            
a task that is going to be the partner for this conversation. An Accept         
conversation has been issued followed by a receive. ESS is now in send          
state of and EDICT is in receive state.                                         
                                                                                
06,07,08 - ESS and EDICT do a "handshake" request where ESS passes some         
data to EDICT and EDICT replys with its own version of the data. This           
dialogue ensures that the two partners can exchange data normally and           
that it is valid for these two LUID's to communicate.                           
                                                                                
09 - EDICT is still in receive state after the handshake . The normal           
state of a conversation is that ESS is in receive state and EDICT is in         
sent state. This sequence issued by ESS puts the programs in the normal         
states for ESS/EDICT conversation.                                              
                                                                                
10,11,12 - EDICT has spotted that a file has become ready which is              
desined for ESS. EDICT sends an information message to ESS that defines         
details of the file. ESS decides that it will use Netview FTP to down           
load the file so it replies to the EDICT message with a confirmation of         
this fact. EDICT receives the reply, marks the file with an ESS has been        
informed flag, and resorts back to send state.                                  
                                                                                
13,14,15 - EDICT has spotted that a file has become ready which is              
desined for ESS. EDICT sends an information message to ESS that defines         
details of the file. ESS decides that the file is small enough for it           
to be sent by EDICT. So it requests that EDICT sends the file.                  
                                                                                
16,17 - EDICT sends the file with as many sends that are required and           
ESS receives the data. EDICT then sends an end-of-file message and asks         
ESS to confirm receipt. EDICT receives the reply,and marks the file with        
an ESS informed plus File sent flags, and resorts back to send state.           
                                                                                
18,19 - EDICT is coming down normally or abnormally and will deallocate         
the conversation with the appropriate type. This will be picked up by           
the ESS receive and ESS will know that the conversation with EDICT will         
have to be re-established.                                                      
