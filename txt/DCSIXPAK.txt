Definition of Product                                                           
---------------------                                                           
SIXPAK is a set of PC and mainframe programs that communicate via LU6.2         
protocol which provides a client/server architecture between work               
stations on a LAN and data stored on the mainframe. The design aims are         
to take advantage of products that already exist (eg MONSOON which will         
be used to run requests) and to keep the first version as simple as             
possible to facilitate an early release. The major programs involved            
are ESS, VERDICT, and EDICT.                                                    
                                                                                
ESS                                                                             
---                                                                             
ESS (External System Server) is a PC program that runs on an OS/2 box           
that receives requests from workstations on the LAN on which it resides.        
Its main function is to act as a multi-tasking server which takes               
requests from DDS written client programs running on the LAN and to pass        
on those requests to the mainframe when the data requested is not               
available locally.                                                              
                                                                                
Communication to the mainframe will be via APPC/APPN functions provided         
by the OS/2 Communication Manager and bulk file tranfers will use the           
new IBM Netview file tranfer programs for workstations. ESS routines            
that communicate with the mainframe will use CPI-C (Common Program              
Interface - Communications) as the API to the APPC (Advanced  Program           
to Program Communication) functions that enable LU6.2 protocol in the           
OS/2 Communication Manager environment.                                         
                                                                                
ESS will maintain conversations with two MVS partner programs. When ESS         
wants to send a request to MVS, or to send status data or information           
messages, it will do so via its conversation with VERDICT, which is             
the MVS program whose principal function is to listen (receive) for             
requests from the ESS servers. When the data from a previoulsy ESS              
submitted request becomes available the MVS program EDICT will spot             
that the data is ready and will sent a message to ESS that the data             
is available. ESS maintains a convestation with EDICT in which ESS              
is the listening partner in this conversation.                                  
                                                                                
VERDICT                                                                         
-------                                                                         
VERDICT is a new MVS program whose principle function is to receive             
requests from each ESS server out on the SNA network . If the request           
is trivial (eg a request for the date/time) then ESS will answer the            
request itself and go back into receive mode. If the request requires           
that a job is run, then VERDICT will write the request to the Print             
Queue and inform ESS that the request has been received, and has been           
submitted for processing via a MONSOON job. It will then return to              
receive mode ready for the next request. VERDICT will maintain an               
APPC conversation with each ESS server in the SNA network and will              
use the APPC API into native MVS VTAM to provide the LU6.2 support.             
                                                                                
EDICT                                                                           
-----                                                                           
EDICT is an existing program that looks for reports on the Print                
Queue that have a special class (G) and have a special header line              
that contain the destination address of the report data. EDICT then             
sends the report to the required location. This program will be                 
extended to support each ESS server as a possible destination for               
the report data on the Print Queue. It will also be extended so that            
data in a DDS worker file or MVS data set can be sent as well as                
reports on the Print queue. EDICT will maintain an APPC conversation            
with each ESS server on the SNA network and will use the APPC API into          
native VTAM to provide the LU6.2 support. The steady state mode of              
EDICT will be send. When data is available for an ESS server EDICT will         
sent a file ready notification to ESS which includes the name name and          
the size of the file. ESS will make a decision based upon the file              
information to respond to EDICT in one of two ways. The first is to             
acknowledge the message with the response that ESS will itself schedule         
the file transfer. The Second is to ask EDICT to send the file itself           
as part of the conversation (ie a simple file transfer dialogue). When          
the transfer has completed EDICT will mark the report as sent and will          
go back to its send state ready for the next file .                             
                                                                                
ESS to MVS Conversations                                                        
------------------------                                                        
ESS acts as the server to its client workstations on the LAN. However           
when it is talking to MVS its role is reversed - it becomes a client            
to the MVS server. In client/server conversations it is conventional            
for the client to initiate a conversation to its server. The main               
reason for this is that the server is considered to be permanent and            
the client transient . Thus there is much more probabilty of the                
server being around to respond when first contact is required. The              
other main reason is that it is the server's responsibility to check            
and maintain security and thus can refuse access at the client's first          
attempt to communicate.                                                         
                                                                                
When ESS is initialised on the OS/2 workstation it will initiate two            
conversations to its MVS server partner programs VERDICT and EDICT. It          
is assumed that the two MVS programs will be permanently running so that        
the conversations can be initialised.                                           
                                                                                
As CPI-C is the SAA programming interface for APPC, the conversations           
between partner programs will be described using the basic CPI-C verbs          
and function calls as these are well understood and documented. Also            
referred to will be a set of standard DDS messages for passing requests,        
information, and errors. These will be defined in detail in Appendices          
to this document.                                                               
                                                                                
ESS/VERDICT message flow                                                        
------------------------                                                        
The details of the ESS/VERDICT message flow is shown below. See numbers         
represent important points in the conversation flow which are explained         
in the nores following the flows. The >>> symbol means that data flows          
accoss the session.                                                             
                                                                                
n# ESS-----------------------       VERDICT-------------------------            
01 Initialise_Conv(Id)                                                          
02 Set_Conv_Type(Id,Basic)                                                      
   Set_Synch_level(Id,Confirm)                                                  
   Set_Return_Control(Id,Alloc)                                                 
03 Allocate_Conv(Id)          >>>   Accept_Conv(Id)                             
                                                                                
04 Set_Send_Type(Id,S&PtR)          Set_Recv_Type(Id,R&Wait)                    
05 Send(Id,DDSMSG1)           >>>   Receive(Id)                                 
   Set_Recv_Type(Id,R&Wait)         Set_Send_Type(Id,S&PtR))                    
06 Receive(Id)                <<<   Send(ID,DDSMSG1)                            
                                    Set_Recv_Type(Id,R&Wait)                    
                              >>>   Receive(Id)                                 
   ..                               ..                                          
   ..                               ..                                          
   ..                               ..                                          
07 ESS NO ACTIVITY TIMER-POP        ..                                          
08 Set_Send_Type(Id,S&PtR)          ..                                          
   Send(Id,DDSMSG2)           >>>   ..                                          
   Set_Recv_Type(Id,R&Wait)         Set_Send_Type(Id,S&PtR))                    
09 Receive(Id)                <<<   Send(ID,DDSMSG2)                            
                                    Set_Recv_Type(Id,R&Wait)                    
                              >>>   Receive(Id)                                 
   ..                               ..                                          
   ..                               ..                                          
   ..                               ..                                          
10 ESS HAS A REQUEST                ..                                          
11 Set_Send_Type(Id,S&PtR)          ..                                          
   Send(Id,DDSMSG3)           >>>   ..                                          
   Set_Recv_Type(Id,R&Wait)         Set_Send_Type(Id,S&PtR))                    
12 Receive(Id)                <<<   Send(ID,DDSMSG3)                            
                                    Set_Recv_Type(Id,R&Wait)                    
13 Set_Send_Type(Id,Sdata)           ..                                         
14 Send(Id,Request)                 ..                                          
   Send(id,Request)                 Receive(Id)                                 
   ..                               Receive(Id)                                 
15 Set_Send_Type(Id,S&Confirm)>>>   ..                                          
   ..                               Confirmed(Id)                               
   ..                                                                           
                                                                                
                                                                                
01,02,03 - Conversation is initialised by ESS. The type of conversation         
is Set to Basic mode conversation, with synch level of confirm, and with        
a request to return when the session is allocated. VERDICT has started          
a task to listen to this ESS server and has issued an Accept of the ESS         
program's Allocate. If the RC is not zero then the session and or               
Conversation has not been allocated. It this case a wait of N minutes           
should to done by ESS and control returned to Step#01.                          
                                                                                
04,05,06 - ESS sends standard hello message with a prepare to receive           
setting and issues a Receive for the reply. VERDICT receives the message        
and verifies that the hello data checks out. If so it adds its data to          
the Hello message and Sends it back to ESS with a prepare to receive            
setting which is received at #06 by ESS. ESS checks out the reply and           
if OK the handshake is complete. VERDICT returns to Receive Mode and            
ESS to Send mode.                                                               
                                                                                
07,08,09 - There has been no activity for N minutes so ESS times out            
and sends an "Are-you-still-there" request to VERDICT. If there is a            
normal exchange of data as in the handshake routine in 05,06,07 then            
ESS remains in its normal send stae and VERDICT in its normal receive           
state. If the dialoge fails to complete then ESS will go back to stage          
#01 after issuing a deallocate conversation call.                               
                                                                                
10,11,12 - ESS has received a request from one of its work stations             
and sends an "Are-you-still-there" request to VERDICT. If there is a            
normal exchange of data as in the handshake routine in 05,06,07 then            
ESS will contine at 13mal send stae and VERDICT in its normal receive           
state. If the dialoge fails to complete then ESS will go back to stage          
#01 after issuing a deallocate conversation call.                               
