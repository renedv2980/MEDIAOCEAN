*          DATA SET DMISDDSS   AT LEVEL 007 AS OF 10/18/00                      
*CATALP DMISDDSA                                                                
***********************************************************************         
* NOTE - THIS IS THE 31 BIT ADDRESSING VERSION - HOWEVER...           *         
*                                                                     *         
* 1) MVS REQUIRES THAT IOB'S RESIDE IN 24 BIT STORAGE.                *         
*    THE IOB BUILT HERE IS IN WORKING STORAGE ACQUIRED VIA AN NMOD    *         
*    THAT AREA MUST BE BELOW THE LINE.                                *         
*                                                                     *         
* 2) IN THE DTF, THE FIELD ISFADCB IS ONLY 3 BYTES LONG. AS A RESULT, *         
*    THE DTF ITSELF MUST BE BELOW THE LINE                            *         
*                                                                     *         
* 3) BECAUSE HOB OF USER IO ADDRESS MAY NOT BE CLEAR IT IS ASSUMED    *         
*    USER IS RUNNING IN 24-BIT MODE. WE REQUIRE AN INPUT PARAMETER    *         
*    FROM A 31-BIT USER                                               *         
*                                                                     *         
* IN THE MEANWHILE, HIGH ORDER BYTES OF INPUT PARMS ARE  **CLEARED**  *         
***********************************************************************         
         EJECT                                                                  
         TITLE 'INDEX SEQUENTIAL ACCESS METHOD - 31 BIT MODE'                   
ISDDS    CSECT                                                                  
         ENTRY ISREAD              01                                           
         ENTRY ISRDSEQ             02                                           
         ENTRY ISADD               03                                           
         ENTRY ISERASE             04                                           
         ENTRY ISWRITE             05                                           
         ENTRY ISCPUID             06                                           
         ENTRY ISFNDEOF            07                                           
         ENTRY ISOPEN              08                                           
         ENTRY ISCLOSE             09                                           
         ENTRY ISOPOLD             0A                                           
         ENTRY ISRDFLS             0B                                           
         ENTRY ISRSFLS             0C                                           
         EJECT                                                                  
***********************************************************************         
* PARAMETER LIST:                                                     *         
*                                                                     *         
* P1       A(ROUTINE) OR X'0000000X' WHERE 0X IS HEX RTN ID           *         
* P2       A(I/O AREA)                                                *         
* P3       BYTES 0-1=RETURN ERROR FLAGS , BYTES 2-3=NOT USED          *         
* P4       A(DTFIS)                                                   *         
* P5       A(KEYARG)                                                  *         
* P6       DEPENDS ON P1                                              *         
*                                                                     *         
* AVAILABLE ROUTINES ARE AS FOLLOWS:                                  *         
*                                                                     *         
* ## NAME     DESCRIPTION                                             *         
*                                                                     *         
* 01 ISREAD   RANDOM READ HIGH/EQUAL FOR KEY AT P5 - LOGICAL NOT      *         
*             FOUND CAN NOT OCCUR.                                    *         
*                                                                     *         
* 0B ISRDFLS  READ HIGH/EQUAL WITH FLUSH OF BUFFER.                   *         
*                                                                     *         
* 02 ISRDSEQ  SEQUENTIAL READ. ONLY VALID AFTER ISREAD OR ISWRITE.    *         
*             P5 IS IGNORED. LAST I/O GOVERNS RECORD READ.            *         
*             IF P6(1)=FF THEN P6+1(3) IS A(FULL TRACK BUFFER)        *         
*                                                                     *         
* 0C ISRSFLS  READ SEQUENTIAL WITH FLUSH OF BUFFER.                   *         
*                                                                     *         
* 03 ISADD    ADD A RECORD. KEY IS IN RECORD AT P2. P5 IS IGNORED.    *         
*             DESTROYS SEQUENTIAL READ SEQUENCE.                      *         
*                                                                     *         
* 04 ISERASE  ERASE LAST RECORD READ. P5 IS IGNORED.                  *         
*             DESTROYS SEQUENTIAL READ SEQUENCE.                      *         
*                                                                     *         
* 05 ISWRITE  WRITE LAST REC READ. P5 IS IGNORED. KEY MUST NOT CHANGE.*         
*                                                                     *         
* 06 ISCPUID  CHECK CPU ID IN RECORD ZERO OF TRACK ONE.               *         
*                                                                     *         
* 07 ISFNDEOF RESET DISK ADDRESS OF LAST OVERFLOW RECORD.             *         
*                                                                     *         
* 08 ISOPEN   OPEN FILE AND BUILD EXTENT MATRIX.                      *         
*          IF P6(2)=CI/MI THEN P6+2(2) IS NDX LEN AND P2 IS NDX ADDR. *         
*                                                                     *         
* 09 ISCLOSE  CLOSE FILE.                                             *         
*                                                                     *         
* 0A ISOPOLD  OPEN FILE (DISP=OLD) AND BUILD EXTENT MATRIX.           *         
*          IF P6(2)=CI/MI THEN P6+2(2) IS NDX LEN AND P2 IS NDX ADDR. *         
*                                                                     *         
***********************************************************************         
          EJECT                                                                 
***********************************************************************         
* ERROR BYTE INDICATORS - RETURNED IN P3(2)                           *         
*                                                                     *         
* BYTE 0 X'80' UNRECOVERABLE ERROR                                    *         
*        X'40'                                                        *         
*        X'20' DUPLICATE KEY ON ADD                                   *         
*        X'10'                                                        *         
*        X'08'                                                        *         
*        X'04'                                                        *         
*        X'02'                                                        *         
*        X'01'                                                        *         
*                                                                     *         
* BYTE 1 X'80' INVALID CPU ID                                         *         
*        X'40'                                                        *         
*        X'20'                                                        *         
*        X'10'                                                        *         
*        X'08' NO RECORD FOUND                                        *         
*        X'04' END OF FILE                                            *         
*        X'02'                                                        *         
*        X'01'                                                        *         
***********************************************************************         
         EJECT                                                                  
         NMOD1 WORKL,**ISDDS*,RA,CLEAR=YES                                      
         USING WORKD,RC                                                         
         LA    RF,ISDDS0                                                        
         O     RF,=X'80000000'     SET FOR 31 BIT MODE                          
         SR    RE,RE               CLEAR                                        
         BSM   RE,RF               SET ADDRESS MODE IN HOB                      
ISDDS0   ST    RE,CALLMODE         AND SAVE FOR EVENTUAL EXIT                   
*                                                                               
         ST    R1,SAVER1                                                        
         MVC   PARAMS,0(R1)                                                     
         MVI   P2,0                CLEAR HIGH ORDER BYTES OF PARMS              
         MVI   P4,0                                                             
         MVI   P5,0                                                             
         L     R2,P4                                                            
         USING ISDTF,R2            R2=A(DTF)                                    
         MVI   READTYPE,0                                                       
*                                                                               
         SR    RE,RE               SET DISK DEVICE DATA                         
         ICM   RE,1,ISFDEVT                                                     
         BNZ   *+8                                                              
         LA    RE,1                                                             
         BCTR  RE,0                                                             
         SLL   RE,4                                                             
         L     RF,=A(DEVDISK)                                                   
         AR    RE,RF                                                            
         MVC   DEVDATA,0(RE)                                                    
*                                                                               
ISDDS1   OC    P1+1(2),P1+1        TEST PASSED ROUTINE NUMBER                   
         BZ    ISDDS1A             YES GO GET ADDRESS                           
         L     RF,P1               NO WE ARE PASSED A(ROUTINE)                  
         B     ISDDS1B                                                          
*                                                                               
ISDDS1A  IC    RF,P1+3                                                          
         N     RF,=X'0000001F'     MAXIMUM OF 31 ROUTINES                       
         SLL   RF,2                                                             
         L     RF,ISROUTS(RF)                                                   
*                                                                               
ISDDS1B  ST    RF,ISROUTA          SAVE ADDRESS OF ROUTINE                      
         OC    ISCILAST,ISCILAST                                                
         BZ    INIT                INITIALISE ON FIRST CALL                     
*                                                                               
ISDDS2   XC    P3(2),P3            CLEAR ERROR IND                              
         L     R3,P5               POINT TO KEYARG                              
         MVI   ISSWAPSW,0          RESET SWAP SWITCH                            
         L     RF,ISROUTA                                                       
         BR    RF                  GO TO REQUIRED IS ROUTINE                    
*                                                                               
EXIT     L     R1,SAVER1                                                        
         MVC   8(4,R1),P3                                                       
         LA    RE,EXITX                                                         
         O     RE,CALLMODE         RESTORE CALLING PROGRAM MODE                 
         BSM   0,RE                THEN PUT IT IN PSW                           
EXITX    DS    0H                                                               
         XMOD1 1                                                                
*                                                                               
RTNXIT   XIT1  ,                   JUMP TO POINT FOR SUBROUTINE EXITS           
         EJECT                                                                  
***********************************************************************         
* ISREAD - READ RANDOM                                                *         
***********************************************************************         
         SPACE 1                                                                
ISRDFLS  OI    READTYPE,FLUSH      READ REQUIRES BLK TO BE READ                 
         B     ISRD6                                                            
*                                                                               
ISREAD   BRAS  R9,CHKHILO          SEE IF BLK IN CORE                           
         B     ISRD6               KEY ARG LO                                   
         B     ISRD4               KEY ARG HI                                   
         B     ISRD10                                                           
         SPACE 1                                                                
***********************************************************************         
* KEY ARG HIGHER THAN PDBUFF IN CORE.                                 *         
* TEST FOR OVERFLOW THIS BLK                                          *         
***********************************************************************         
         SPACE 1                                                                
ISRD4    BRAS  R9,CHKHITI          SEE IF REC IN OVFLO BLK THIS PD BLK          
         BNH   ISRD8               KEY ARG LE - READ OVFLO BLK                  
         SPACE 1                                                                
***********************************************************************         
* KEY ARG UNRELATED TO ANYTHING IN CORE. SEARCH INDEX                 *         
***********************************************************************         
         SPACE 1                                                                
ISRD6    BAS   R9,READIX                                                        
         DC    AL4(0)                                                           
         B     ISRD8               KEYARG HI = READ OVERFLOW                    
         B     ISRD10                                                           
*                                                                               
ISRD8    L     R7,ISBUFF1          POINT TO PD BUFFER                           
         OC    2(4,R7),2(R7)       TEST FOR OVERFLOW PRESENT                    
         BZ    ISRD6               NO - SEARCH INDEX AGAIN                      
         BAS   R9,READOV                                                        
         DC    AL4(0)                                                           
         B     ISRD8                                                            
*                                                                               
ISRD10   BAS   R9,MOVEREC          NB - DOES NOT SET NOT FOUND IND              
         B     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* ISRDSEQ - READ SEQUENTIAL                                           *         
***********************************************************************         
         SPACE 1                                                                
ISRSFLS  OI    READTYPE,FLUSH      SET FLUSH TYPE READING                       
*                                                                               
ISRDSEQ  OC    ISPDDA,ISPDDA       TEST BUFFER CONTENTS VALID                   
         BNZ   *+6                                                              
         DC    H'0'                                                             
*                                                                               
         L     R4,ISPDKEY                                                       
         CLI   0(R4),X'FF'         TEST FOR EOF REC                             
         BE    ISEOF               YES - SET EOF                                
*                                                                               
         ICM   R7,15,ISPDPTR       GET LAST REC ADDRESS                         
         BNZ   *+6                                                              
         DC    H'0'                SEQ NOT PRECEDED BY VALID READ               
*                                                                               
         SR    RE,RE                                                            
         IC    RE,0(R7)            GET MISSING BYTES                            
         LH    R6,ISRECLN                                                       
         SR    R6,RE               GIVES RECORD BYTES PRESENT                   
         LA    R7,1(R7,R6)         LEN + CONTROL BYTE GIVES NEXT ADDR           
*                                                                               
ISRDSQ2  CLI   0(R7),X'FF'         TEST FOR EOB                                 
         BE    ISRDSQ4             YES                                          
*                                                                               
         ST    R7,ISPDPTR          SAVE NEW POINTER                             
         IC    RE,0(R7)            GET MISSING BYTES THIS REC                   
*                                                                               
         LA    RF,0(R4,RE)         GET 'TO' ADDRESS (ISPDKEY+MISSING)           
         LH    R5,ISKEYLN1                                                      
         SR    R5,RE                                                            
         EX    R5,CHKMVKEY         MVC  0(0,RF),1(R7)                           
         BRAS  R9,MOVEREC          PASS REC TO USER                             
         B     EXIT                                                             
         SPACE 1                                                                
***********************************************************************         
* EOB ENCOUNTERED                                                     *         
***********************************************************************         
         SPACE 1                                                                
ISRDSQ4  L     R7,ISBUFF1                                                       
         OC    2(4,R7),2(R7)       IS LINK PRESENT                              
         BZ    ISRDSQ5             NO                                           
         CLC   2(4,R7),BLKINDEX    CHECK NOT PD BLOCK INDEX LINK                
         BNE   *+6                                                              
         DC    H'0'                                                             
*                                                                               
         MVI   ISPDDA+3,0          MAKE SURE BLKIND FLAG OK                     
         L     R7,ISBUFF1                                                       
         LA    R7,2(R7)            POINT TO DISK ADDRESS                        
         MVC   ISOVDA,0(R7)                                                     
         LA    R8,ISXTNTIX                                                      
         BAS   RE,ISBLDCCW                                                      
         BAS   RE,SETSCTR                                                       
         BAS   RE,EXCP                                                          
         B     ISRDSQ6                                                          
         EJECT                                                                  
*======================================================*                        
* NO LINK - GET NEXT PD REC ADDRESS                                             
*======================================================*                        
         SPACE 1                                                                
ISRDSQ5  XC    ISOVDA,ISOVDA       CLEAR OVERFLOW ADDRESS                       
         MVI   ISPDDA+3,0          RESET ISPDDA BLKIND FLAG                     
         L     R4,ISTIHIKY         CLEAR TI HIGH KEY                            
         LH    R5,ISKEYLN1                                                      
         EX    R5,READXC                                                        
*                                                                               
         SR    RE,RE                                                            
         IC    RE,ISPDDA+2                                                      
         LA    RE,1(RE)                                                         
         STC   RE,ISPDDA+2                                                      
         CH    RE,ISHIPD           COMPARE TO HI REC ON PD TRACK                
         BNH   ISRDSQ5B                                                         
*                                                                               
ISRDSQ5A SR    RE,RE               BUMP TO NEXT TRACK                           
         ICM   RE,3,ISPDDA                                                      
         LA    RE,1(RE)                                                         
         STH   RE,ISPDDA                                                        
         MVI   ISPDDA+2,1                                                       
         SRDL  RE,32               TEST IF TI TRK (FIRST ON CYLINDER)           
         LH    R0,ISTRKS                                                        
         DR    RE,R0                                                            
         CHI   RE,1                                                             
         BE    ISRDSQ5A                                                         
*                                                                               
ISRDSQ5B LA    R7,ISPDDA                                                        
         LA    R8,ISXTNTPD                                                      
         BAS   RE,ISBLDCCW                                                      
         CLI   P6,X'FF'            TEST IF TRACK BUFFER PASSED                  
         BE    ISRDSQ7                                                          
*                                                                               
ISRDSQ5C BAS   RE,SETSCTR                                                       
         BAS   RE,EXCP                                                          
*                                                                               
ISRDSQ6  L     R7,ISBUFF1                                                       
         CLC   2(4,R7),BLKINDEX    TEST FOR PD BLOCK INDEX LINK                 
         BE    ISRDSQ6A                                                         
         AH    R7,0(R7)            ADD SLACK                                    
         LA    R7,6(R7)            POINT TO FIRST CONTROL BYTE                  
         L     R4,ISPDKEY                                                       
         SR    RE,RE               RESET MISSING BYTE COUNT                     
         B     ISRDSQ2                                                          
*                                                                               
ISRDSQ6A OI    ISPDDA+3,X'01'      HERE IF PD BLOCK INDEX                       
         LA    R7,6(R7)            POINT TO FIRST DISK ADDRESS                  
         MVC   ISOVDA,0(R7)        READ AND PROCESS NEXT BLOCK                  
         LA    R8,ISXTNTIX                                                      
         BAS   RE,ISBLDCCW                                                      
         BAS   RE,SETSCTR                                                       
         BAS   RE,EXCP                                                          
         B     ISRDSQ6                                                          
         EJECT                                                                  
*================================================*                              
* FULL TRACK READ LOGIC - IF ERROR OCCURS, RETRY *                              
*================================================*                              
         SPACE 1                                                                
ISRDSQ7  SR    R6,R6                                                            
         ICM   R6,7,P6+1           GET FULL TRACK BUFFER ADDRESS                
         BZ    ISRDSQ5C                                                         
         MVC   DUB(5),SRCH                                                      
*                                                                               
         CLC   0(7,R6),ISDTF+22    TEST FIRST TIME                              
         BE    *+16                                                             
         XC    0(16,R6),0(R6)                                                   
         MVC   0(7,R6),ISDTF+22                                                 
         CLC   8(2,R6),ISPDDA      TEST SAME TRACK                              
         BE    ISRDSQ9                                                          
*                                                                               
ISRDSQ8  MVI   SRCH+4,0            SET TO DO FULL TRK READ                      
*                                                                               
         MVC   CCW4+6(2),MAXIOL                                                 
         SR    R0,R0                                                            
         ICM   R0,3,CCW4+6                                                      
         LA    R1,16(R6)           IO ADDRESS = BUFF+16                         
         BAS   RE,SETIDAWS                                                      
         LA    R0,IDAWS                                                         
         ST    R0,CCW4                                                          
         MVI   CCW4,X'5E'                                                       
         OI    CCW4+4,X'20'                                                     
*                                                                               
         BAS   RE,SETSCTRZ                                                      
         BAS   RE,EXCP                                                          
         BNE   ISRDSQ5B            IF ERROR, TRY WITHOUT TRACK BUFFER           
         MVC   8(2,R6),ISPDDA                                                   
*                                                                               
ISRDSQ9  LH    R1,ISPDLN           GET BLK LEN PLUS COUNT LEN                   
         LA    R1,8(R1)                                                         
         ZIC   R0,ISPDDA+2         GET BLK NUM MINUS ONE                        
         BCTR  R0,0                                                             
         MR    R0,R0                                                            
         LA    RE,16(R6,R1)        POINT TO BLK COUNT FIELD                     
         CLC   0(5,RE),DUB                                                      
         BE    ISRDSQ10                                                         
         LA    R7,ISPDDA           REISSUE NORMAL IO IF NO MATCH                
         LA    R8,ISXTNTPD                                                      
         BAS   RE,ISBLDCCW                                                      
         XC    8(2,R6),8(R6)       RESET TRACK ADDRESS                          
         B     ISRDSQ5C                                                         
*                                                                               
ISRDSQ10 L     R0,ISBUFF1          SET 'TO' ADDR                                
         LH    R1,ISPDLN           SET 'TO' LEN                                 
         LA    RE,8(RE)            SET 'FROM' ADDR                              
         LR    RF,R1               'FROM' LEN = 'TO' LEN                        
         MVCL  R0,RE                                                            
         B     ISRDSQ6                                                          
         EJECT                                                                  
*=======================================================*                       
* ISWRITE - WRITE LAST RECORD READ                      *                       
*=======================================================*                       
         SPACE 1                                                                
ISWRITE  DS    0H                                                               
         L     R3,P2               USE RECORD AS KEYARG                         
         OC    ISPDDA,ISPDDA       TEST BUFFER CONTENTS VALID                   
         BNZ   *+6                                                              
         DC    H'0'                                                             
         L     R4,ISPDKEY                                                       
         LH    R5,ISKEYLN1                                                      
         EX    R5,SRCHCLC          CLC  0(0,R3),0(R4)                           
         BE    *+6                                                              
         DC    H'0'                KEYS NOT EQUAL                               
*                                                                               
ISWRT2   TM    ISCMPRSW,VARIABLE   FIXED/VARIABLE LENGTH RECORDS?               
         BO    ISWRT4                                                           
*                              *** FIXED LENGTH RECORDS                         
         LH    R6,ISRECLN                                                       
         L     RF,ISPDPTR          GET ADDRESS OF REC IN BUFFER                 
         SR    RE,RE                                                            
         IC    RE,0(RF)            GET MISSING KEY BYTES                        
         SR    R6,RE               GIVES ACTUAL REC BYTES PRESENT               
         LA    R7,0(RE,R3)         GET 'FROM' ADDRESS                           
         LA    RF,1(RF)            GET 'TO' ADDRESS                             
         BAS   R9,MOVEREC2         MVC  0(R6,RF),0(R7)                          
         BAS   R9,ISWRTPD          WRITE PD BLOCK                               
         B     EXIT                                                             
*                              *** VARIABLE LENGTH RECORDS                      
ISWRT4   LH    R6,ISKEYLN                                                       
         AR    R6,R3               POINT TO REC LENGTH                          
         CLC   ISRECLN,0(R6)       DID LENGTH CHANGE                            
         BNE   ISWRT10             YES                                          
* LENGTH UNCHANGED                                                              
         L     RF,ISPDPTR                                                       
         SR    RE,RE                                                            
         IC    RE,0(RF)            GET MISSING BYTES                            
         LH    R6,ISRECLN                                                       
         SR    R6,RE               GIVES ACTUAL BYTES PRESENT                   
* NOTE - WILL NOT MOVE CONTROL BYTE SO LEN OK                                   
         LA    R7,0(RE,R3)         GIVES 'FROM' ADDRESS                         
         LA    RF,1(RF)            GIVES 'TO' ADDRESS                           
         BAS   R9,MOVEREC2         MVC  0(R6,RF),0(R7)                          
         BAS   R9,ISWRTPD          WRITE BLK                                    
         B     EXIT                                                             
         EJECT                                                                  
*=======================================================*                       
* REC LENGTH HAS CHANGED                                *                       
*=======================================================*                       
         SPACE 1                                                                
ISWRT10  L     R0,ISBUFF2          SET 'TO' ADDRESS                             
         LH    R1,ISPDLN           SET 'TO' LEN                                 
         L     RE,ISBUFF1          SET 'FROM' ADDRESS                           
         LR    RF,R1               SET 'FROM' LENGTH                            
         MVCL  R0,RE               MOVE BUFF1 TO BUFF2                          
         SPACE 1                                                                
*=======================================================*                       
* MOVE BUFF2 TO BUFF1 OMITTING CHANGED REC              *                       
*=======================================================*                       
         SPACE 1                                                                
         L     RF,ISPDPTR                                                       
         SR    RE,RE                                                            
         IC    RE,0(RF)            GET COMPRESSION FACTOR                       
         LCR   RE,RE               NEGATE IT                                    
         L     RF,ISBUFF1                                                       
         AH    RE,0(RF)            ADD OLD SPARE                                
         AH    RE,ISRECLN          PLUS OLD RECLEN                              
         LA    RE,1(RE)            AND ONE FOR LUCK                             
         STH   RE,0(RF)            SET NEW SPARE                                
*                                                                               
         LA    RF,6(RE,RF)         GIVES 'TO' ADDRESS                           
         L     R7,ISBUFF2                                                       
         AH    R7,0(R7)                                                         
         LA    R7,6(R7)            GIVES 'FROM' ADDRESS                         
         L     R0,ISPDPTR                                                       
         AH    R0,ISPDLN           SET PTR TO CHANGED REC IN BUFF2              
         ST    R0,DUB+4            AND SAVE IT                                  
         EJECT                                                                  
ISWRT12  CLI   0(R7),X'FF'         CHECK FOR EOB FLAG                           
         BE    ISWRT14                                                          
*                                                                               
         LH    R6,ISKEYLN                                                       
         SR    RE,RE                                                            
         IC    RE,0(R7)            GET MISSING BYTES                            
         SR    R6,RE                                                            
         LA    R6,1(R7,R6)         POINT TO RECLEN                              
         MVC   DUB(2),0(R6)        ALIGN                                        
         LH    R6,DUB                                                           
         SR    R6,RE               GIVES ACTUAL BYTES PRESENT                   
         LA    R6,1(R6)            ADJUST FOR CONTROL BYTE                      
         C     R7,DUB+4            IS THIS CHANGED REC                          
         BNE   ISWRT13             NO                                           
         AR    R7,R6               POINT TO NEXT REC                            
         ST    RF,DUB+4            THINK ABOUT IT                               
         B     ISWRT12                                                          
*                                                                               
ISWRT13  BAS   R9,MOVEREC2         MVC  0(R6,RF),0(R7)                          
         B     ISWRT12                                                          
*                                                                               
ISWRT14  MVI   0(RF),X'FF'         SET EOB FLAG                                 
         MVC   ISPDPTR,DUB+4       SET NEW INS. ADDRS                           
         B     ISADD10             ADD RECORD                                   
         EJECT                                                                  
***********************************************************************         
* ROUTINE TO WRITE BLOCK                                              *         
***********************************************************************         
         SPACE 1                                                                
ISWRTPD  LA    R8,ISXTNTIX                                                      
         LA    R7,ISOVDA                                                        
         OC    0(4,R7),0(R7)       TEST OVERFLOW ADDRESS PRESENT                
         BNZ   *+12                YES                                          
         LA    R7,ISPDDA                                                        
         LA    R8,ISXTNTPD                                                      
*                                                                               
         BAS   RE,ISBLDCCW                                                      
         MVI   CCW4,5              SET OPCD=WRITE DATA                          
*                                                                               
         BAS   RE,SETSCTR                                                       
         BAS   RE,EXCP                                                          
         BR    R9                                                               
         EJECT                                                                  
***********************************************************************         
* ISADD - ADD A RECORD                                                *         
***********************************************************************         
         SPACE 1                                                                
B1       USING SVBLKD,BLKK1                                                     
B2       USING SVBLKD,BLKK2                                                     
B3       USING SVBLKD,BLKK3                                                     
*                                                                               
ISADD    L     R3,P2               POINT TO RECORD AS KEYARG                    
         BAS   R9,CHKHILO          SEE IF BLK IN CORE                           
         B     ISADD6              KEY ARG LO                                   
         B     ISADD4              KEY ARG HI                                   
*                                                                               
ISADD2   BNE   ISADD10             IF CC NOT =, GO ADD RECORD                   
         OI    P3,X'20'            SET DUP KEY ERROR                            
         B     ISADDX                                                           
         SPACE 1                                                                
***********************************************************************         
* KEYARG HIGHER THAN BUFFER IN CORE. TEST FOR OVERFLOW                *         
***********************************************************************         
         SPACE 1                                                                
ISADD4   BAS   R9,CHKHITI                                                       
         BNH   ISADD7              KEYARG LE - READ OVERFLOW BLK                
         SPACE 1                                                                
***********************************************************************         
* SEARCH INDEX TO FIND REC                                            *         
***********************************************************************         
         SPACE 1                                                                
ISADD6   BAS   R9,READIX                                                        
         DC    AL4(0)                                                           
         B     ISADD7                                                           
         BE    ISADD2+4            RECORD FOUND IS ERROR                        
         B     ISADD7A                                                          
*                                                                               
ISADD7   BAS   R9,READOV                                                        
         DC    AL4(0)                                                           
         B     ISADD7                                                           
         BE    ISADD2+4                                                         
*                                                                               
ISADD7A  TM    ISCMPRSW,X'80'      TEST FIXED/VARIABLE LENGTH RECORDS           
         BO    ISADD10                                                          
         B     ISADD8                                                           
         EJECT                                                                  
***********************************************************************         
* FOR FIXED LENGTH RECORDS                                            *         
* IF REC TO BE INSERTED IS LOWEST IN BUFFER -                         *         
* INTERCHANGE FIRST REC IN BLK AND INSERT REC, THEN PROCEED           *         
* WITH INSERTION. RESTORE USERS RECORD AT END.                        *         
***********************************************************************         
         SPACE 1                                                                
ISADD8   LH    R6,ISRECLN                                                       
         L     R7,ISBUFF1                                                       
         AH    R7,0(R7)                                                         
         LA    R7,7(R7)            POINT TO KEY OF FIRST REC                    
*                                                                               
         L     RF,ISPDPRKY                                                      
         LH    R5,ISKEYLN1                                                      
         EX    R5,ISADDOC          OC  0(0,RF),0(RF)                            
         BNZ   ISADD10             INSERT IS NOT LOWEST IN BLK                  
         EX    R5,SWAPMVC          MVC  0(0,RF),0(R3)                           
*                                                                               
         LA    RE,0(R6,R7)         SET NEW INSERTION ADDRESS                    
         ST    RE,ISPDPTR                                                       
*                                                                               
         LA    RE,256                                                           
ISADD8A  CR    R6,RE                                                            
         BNH   ISADD8B                                                          
         BCTR  RE,0                                                             
         EX    RE,SWAPXC37                                                      
         EX    RE,SWAPXC73                                                      
         EX    RE,SWAPXC37                                                      
         LA    RE,256                                                           
         SR    R6,RE                                                            
         AR    R3,RE                                                            
         AR    R7,RE                                                            
         B     ISADD8A                                                          
*                                                                               
ISADD8B  BCTR  R6,0                                                             
         EX    R6,SWAPXC37                                                      
         EX    R6,SWAPXC73                                                      
         EX    R6,SWAPXC37                                                      
*                                                                               
         L     R3,P2               RESET REC POINTER                            
         MVI   ISSWAPSW,C'S'       SET SWITCH                                   
         B     ISADD10                                                          
*                                                                               
SWAPXC37 XC    0(0,R3),0(R7)                                                    
SWAPXC73 XC    0(0,R7),0(R3)                                                    
SWAPMVC  MVC   0(0,RF),0(R3)                                                    
ISADDOC  OC    0(0,RF),0(RF)                                                    
         EJECT                                                                  
***********************************************************************         
* GET NUMBER OF MATCHING KEY BYTES                                    *         
***********************************************************************         
         SPACE 1                                                                
ISADD10  L     R4,ISPDPRKY         PRECEDING KEY SAVE AREA                      
         LH    R5,ISKEYLN1                                                      
*                                                                               
         TM    ISCMPRSW,X'80'      TEST FIXED/VARIABLE LENGTH RECORDS           
         BZ    *+14                                                             
         LR    RF,R4                                                            
         EX    R5,ISADDOC          CHECK FIRST IN BLK  OC 0(0,RF),0(RF)         
         BZ    *+12                SKIP COMPRESSION IF FIRST                    
         TM    ISCMPRSW,X'01'      ELSE TEST FILE USES COMPRESSION              
         BNZ   ISADD10B            YES                                          
         SR    R5,R5               NO - SET MATCH LEN = -1                      
         BCTR  R5,0                                                             
         B     ISADD10X                                                         
*                                                                               
ISADD10A EX    R5,SRCHCLC          CLC  0(0,R3),0(R4)                           
         BE    ISADD10X                                                         
*                                                                               
ISADD10B AHI   R5,-1                                                            
         BNM   ISADD10A                                                         
*                                                                               
ISADD10X LA    R5,1(R5)            SET NUMBER OF MATCHING BYTES                 
         ST    R5,DUB1             SAVE MATCHED BYTES INSERT REC                
         SPACE 1                                                                
***********************************************************************         
* RECORD  WILL FIT IN BUFFER IF SPARE IS NOT LESS THAN COMPRESSED     *         
* LENGTH OF NEW RECORD                                                *         
***********************************************************************         
         SPACE 1                                                                
         TM    ISCMPRSW,X'80'      TEST FIXED/VARIABLE LENGTH RECORDS           
         BZ    *+16                                                             
         LH    RE,ISKEYLN                                                       
         AR    RE,R3               POINT TO RECLEN                              
         MVC   ISRECLN,0(RE)       SAVE RECLEN                                  
         LH    RE,ISRECLN                                                       
         BCTR  R5,0                ADJUST FOR CONTROL                           
         SR    RE,R5               GIVES TOTAL INSERT LENGTH                    
         ST    RE,DUB2             SAVE TOTAL INSERTION LENGTH                  
*                                                                               
         L     R7,ISBUFF1          GET BUFFER ADDRESS                           
         MVC   DUB(6),0(R7)        SAVE SPARE AND LINK                          
         LH    R0,0(R7)            GET SPARE                                    
         SR    R0,RE                                                            
         BM    ISADD20             NOT ENOUGH ROOM - SPLIT BUFFER               
*                                                                               
         STH   R0,0(R7)            SET REMAINING SPARE                          
         BAS   R9,ISADDMV          MOVE BUFFER TO LEFT AND INSERT DATA          
         B     ISADD12                                                          
*                                                                               
ISADD12  BAS   R9,ISWRTPD          WRITE PRIME DATA BLOCK                       
*                                                                               
         TM    ISCMPRSW,X'80'      TEST FIXED/VARIABLE LENGTH RECORDS           
         BO    ISADDX                                                           
         CLI   ISSWAPSW,0          TEST NEED TO UNSWAP                          
         BE    ISADDX              NO                                           
         SPACE 1                                                                
***********************************************************************         
* USERS RECORD IS AT TOP OF BUFFER - GIVE IT BACK                     *         
***********************************************************************         
         SPACE 1                                                                
         L     RF,P2               GET USER ADDRESS                             
         L     R7,ISBUFF1                                                       
         AH    R7,0(R7)                                                         
         LA    R7,7(R7)            POINT TO FIRST DATA BYTE                     
         LH    R6,ISRECLN                                                       
         BAS   R9,MOVEREC2         MVC  0(R6,RF),0(R7)                          
         B     ISADDX                                                           
         EJECT                                                                  
***********************************************************************         
* REC WILL NOT FIT - SPLIT BUFFER                                     *         
***********************************************************************         
         SPACE 1                                                                
ISADD20  OC    ISOVLAST,ISOVLAST   TEST IF EOF SET FOR OVERFLOW                 
         BNZ   *+6                                                              
         DC    H'0'                                                             
*                                                                               
         XC    BILNK,BILNK                                                      
         L     RF,ISBUFF1          SAVE PD LINK INFORMATION                     
         OC    BILNK,2(RF)         ANY LINK?                                    
         BZ    *+8                 NO                                           
         OI    ISPDDA+3,X'02'      SET FLAG TO SAY BLOCK HAS BEEN SPLIT         
*                                                                               
         L     R0,ISBUFF1          MOVE BUFF1 TO BUFF2                          
         L     RE,ISBUFF2                                                       
         LH    R1,ISPDLN                                                        
         LH    RF,ISPDLN                                                        
         MVCL  RE,R0                                                            
*                                                                               
         L     R0,ISBUFF1                                                       
         LH    R1,ISPDLN                                                        
         AHI   R1,6                                                             
         XR    RF,RF                                                            
         MVCL  R0,RE               CLEAR BUFF1 + FIRST 6 BYTES OF BUFF2         
*                                                                               
         L     R0,ISPDPTR          GET OLD INSERTION ADDRESS                    
         AH    R0,ISPDLN           NOW IN BUFF2                                 
         ST    R0,ISPDPTR          SET IT                                       
*                                                                               
         L     R7,ISBUFF2                                                       
         BAS   R9,ISADDMV          MOVE BUFFER LEFT AND INSERT DATA             
         SPACE 1                                                                
***********************************************************************         
* NOW MOVE DATA TO TOP OF BUFF1 AND SET SLACK/LINK                    *         
***********************************************************************         
         SPACE 1                                                                
         L     R4,ISBUFF1                                                       
         L     R8,ISBUFF1X                                                      
         SH    R8,ISKEYLN          GIVES LAST AVAILABLE BYTE + 1                
*                                                                               
         LH    R0,ISPDLN                                                        
         SRL   R0,1                                                             
         TM    ISCMPRSW,X'80'      TEST FIXED/VARIABLE LENGTH RECORDS           
         BZ    *+8                                                              
         SRL   R0,1                FOR V/L MAX REC LE 3/4 BLK SIZE              
*                                                                               
         STH   R0,0(R4)            SET SLACK BYTES                              
         AR    R4,R0                                                            
         LA    R4,6(R4)            GET 'TO' ADDRESS                             
         L     R3,DUB3             GET 'FROM' ADDR  (SET BY ISADDMV)            
*                                                                               
ISADD22  CLI   0(R3),X'FF'         CHECK FOR EOB FLAG                           
         BE    ISADD24                                                          
*                                                                               
         LH    R6,ISKEYLN                                                       
         TM    ISCMPRSW,X'80'      TEST FIXED/VARIABLE LENGTH RECORDS           
         BO    *+8                                                              
         LH    R6,ISRECLN                                                       
*                                                                               
         SR    RE,RE                                                            
         IC    RE,0(R3)            GET MISSING BYTES                            
         SR    R6,RE               GIVES KEY BYTES PRESENT                      
         TM    ISCMPRSW,X'80'      TEST FIXED/VARIABLE LENGTH RECORDS           
         BZ    *+20                                                             
         LA    R6,1(R3,R6)         POINT TO RECLEN                              
         MVC   DUB(2),0(R6)        ALIGN                                        
         LH    R6,DUB                                                           
         SR    R6,RE               GIVES ACTUAL REC BYTES PRESENT               
         LA    R6,1(R6)            ADJUST FOR CONTROL BYTE                      
         LA    R0,0(R4,R6)                                                      
         CR    R0,R8                                                            
         BH    ISADD24             NO MORE ROOM                                 
*                                                                               
         LH    R5,ISKEYLN1         CONSTRUCT THIS KEY                           
         SR    R5,RE               GIVES KEY LEN PRESENT - 1                    
         L     RF,ISPDKEY                                                       
         AR    RF,RE               GET 'TO' ADDRESS                             
         LR    R7,R3               GET 'FROM' ADDRESS                           
         EX    R5,CHKMVKEY         MVC  0(0,RF),1(R7)                           
*                                                                               
         LR    RF,R4               GET 'TO' ADDRESS                             
         LR    R4,R0               SAVE NEXT 'TO' ADDRESS                       
         AR    R3,R6               SAVE NEXT 'FROM' ADDRESS                     
         BAS   R9,MOVEREC2         MVC  0(R6,RF),0(R7)                          
         B     ISADD22                                                          
*                                                                               
* REC WILL NOT FIT IN BUFF1                                                     
*                                                                               
ISADD24  MVI   0(R4),X'FF'         SET EOB FLAG                                 
*                                                                               
         LA    R0,1(R4)            NOW CLEAR TO END OF BLK                      
         L     R1,ISBUFF1X                                                      
         SR    R1,R0               GIVES LEN TO CLEAR                           
         XR    RF,RF                                                            
         MVCL  R0,RE                                                            
*                                                                               
         LH    R5,ISKEYLN1                                                      
         L     RF,ISBUFF1X                                                      
         SR    RF,R5               SET A(HI KEY AREA)                           
         L     R7,ISPDKEY                                                       
         EX    R5,MOVEMVC          MVC  0(0,RF),0(R7)                           
*                                                                               
* R3 POINTS TO REC IN BUFF2 THAT WON'T FIT                                      
*                                                                               
         CLI   0(R3),X'FF'         TEST EOB FLAG                                
         BNE   ISADD25             NO                                           
*                                                                               
         L     R7,ISBUFF1                                                       
         MVC   2(4,R7),DUB+2       RESTORE OLD LINK FIELD                       
         B     ISADD12                                                          
*                                                                               
ISADD25  L     R0,ISBUFF2          CLEAR TOP OF BUFF2                           
         LR    R1,R3                                                            
         SR    R1,R0                                                            
         XR    RF,RF                                                            
         MVCL  R0,RE                                                            
         EJECT                                                                  
***********************************************************************         
* NOW RESTORE MISSING BYTES OF FIRST KEY IN BUFF2                     *         
***********************************************************************         
         SPACE 1                                                                
         XR    R6,R6                                                            
         ICM   R6,1,0(R3)                                                       
         BZ    ISADD26                                                          
         SR    R3,R6                                                            
         LA    RF,1(R3)            SET 'TO' ADDRESS                             
         L     R7,ISPDKEY          ISPDKEY HAS LAST KEY MOVED                   
         BCTR  R6,0                                                             
         EX    R6,MOVEMVC          MVC  0(0,RF),0(R7)                           
*                                                                               
ISADD26  L     R4,ISBUFF2                                                       
         LA    RF,6(R4)            CONTROL BYTES NOT INCLUDED                   
         SR    R3,RF                                                            
         STH   R3,0(R4)                                                         
         MVC   2(4,R4),DUB+2       RESTORE OLD LINK FIELD                       
*                                                                               
         BRAS  R9,ISADDOV          ADD OVERFLOW RECORD IN ISBUFF2               
*                                                                               
         L     RF,ISBUFF1                                                       
         MVC   B3.SVLNK,2(RF)      SAVE OVERFLOW BLOCK D/A                      
         L     RF,ISBUFF2                                                       
         AH    RF,ISPDLN                                                        
         SH    RF,ISKEYLN          RF=(HIGH KEY IN PD BUFFER)                   
         LH    R1,ISKEYLN1                                                      
         EX    R1,*+4                                                           
         MVC   B3.SVHIKEY(0),0(RF) SAVE HIGHEST KEY ADDED                       
*                                                                               
         TM    ISFFLAG,ISFBLKIX    TEST BLOCK INDEX ON SPLIT BLOCKS             
         BZ    ISADD12             GO WRITE BUFFER 1                            
         EJECT                                                                  
***********************************************************************         
* LOGIC TO PROCESS PD BLOCK INDEX AFTER ADD PD SPLIT                  *         
*                                                                     *         
* - IGNORE IF FIRST SPLIT                                             *         
*                                                                     *         
* - ADD IF SECOND SPLIT AND DOESNT EXIST BY COPYING FIRST PD BLOCK TO *         
*   OVERFLOW AND REPLACING WITH NEW PD BLOCK INDEX                    *         
*   DIFFERENT LOGIC FOR PD BLOCK OR OV BLOCK SPLIT                    *         
*                                                                     *         
* - UPDATE IF EXISTS OR SUBSEQUENT SPLIT TO SECOND                    *         
*                                                                     *         
* PD BLOCK INDEX CONTROL DATA IS SAVED IN BIDATA                      *         
***********************************************************************         
         SPACE 1                                                                
ISADD30  TM    ISCMPRSW,X'80'      TEST FIXED/VARIABLE LENGTH RECORDS           
         BO    ISADD32                                                          
         CLI   ISSWAPSW,0          TEST NEED TO UNSWAP                          
         BE    ISADD32             NO                                           
         SPACE 1                                                                
***********************************************************************         
* USERS RECORD IS AT TOP OF BUFFER - GIVE IT BACK                     *         
***********************************************************************         
         SPACE 1                                                                
         L     RF,P2               GET USER ADDRESS                             
         L     R7,ISBUFF1                                                       
         AH    R7,0(R7)                                                         
         LA    R7,7(R7)            POINT TO FIRST DATA BYTE                     
         LH    R6,ISRECLN                                                       
         BAS   R9,MOVEREC2         MVC  0(R6,RF),0(R7)                          
         MVI   ISSWAPSW,0          CLEAR UNSWAP FLAG                            
*                                                                               
ISADD32  TM    ISPDDA+3,X'02'      HAS PD BLOCK SPLIT BEFORE?                   
         BO    ISADD34             YES - MUST BE SECOND SPLIT THEN              
*                                                                               
         BAS   R9,ISWRTPD          WRITE PD BLOCK                               
         OI    ISPDDA+3,X'02'      SET PD BLOCK SPLIT                           
*                                                                               
         L     RF,ISBUFF2          SAVE D/A + HIKEY FOR FIRST PD SPLIT          
         MVC   0(L'SVLNK,RF),B3.SVLNK                                           
         L     RE,ISBUFF1X                                                      
         SH    RE,ISKEYLN1                                                      
         LH    R1,ISKEYLN1                                                      
         EX    R1,*+4                                                           
         MVC   L'SVLNK(0,RF),0(RE)                                              
         B     ISADDX                                                           
         EJECT                                                                  
***********************************************************************         
* BUILD BLOCK INDEX BUFFER                                            *         
***********************************************************************         
         SPACE 1                                                                
ISADD34  TM    ISPDDA+3,X'01'      PD BLOCK INDEX ALREADY EXISTS?               
         BO    ISADD60             UPDATE IT                                    
         OC    ISOVDA,ISOVDA       WHICH JUST SPLIT?                            
         BNZ   ISADD35             SPLIT OV BLOCK                               
         EJECT                                                                  
***********************************************************************         
* JUST SPLIT PD BLOCK FOR SECOND TIME - NO BLOCK INDEX EXISTS YET     *         
***********************************************************************         
         SPACE 1                                                                
ISADD40  L     R0,ISBUFF1          COPY BUFFER 1 TO BUFFER 2                    
         L     RE,ISBUFF2                                                       
         LH    R1,ISPDLN                                                        
         LH    RF,ISPDLN                                                        
         MVCL  RE,R0                                                            
         BRAS  R9,ISADDOV          ADD COPY OF PD BLOCK TO OVERFLOW             
*                                                                               
         L     RE,ISBUFF1                                                       
         MVC   B1.SVLNK,2(RE)      SAVE NEW COPY PD BLOCK DA                    
         L     RF,ISBUFF2                                                       
         AH    RF,ISPDLN                                                        
         SH    RF,ISKEYLN          RF=(HIGH KEY IN PD BUFFER)                   
         LH    R1,ISKEYLN1                                                      
         EX    R1,*+4                                                           
         MVC   B1.SVHIKEY(0),0(RF) SAVE NEW COPY PD BLOCK HIGH KEY              
*                                                                               
         MVC   B2.SVLNK,B3.SVLNK   SET PD SPLIT D/A AND KEY                     
         MVC   B2.SVHIKEY,B3.SVHIKEY                                            
*                                                                               
         L     RE,ISTIHIKY                                                      
         MVC   B3.SVLNK,BILNK      SAVE HIGHEST D/A IN CHAIN                    
         MVC   B3.SVHIKEY,0(RE)    SAVE HIGHEST KEY IN CHAIN                    
*                                                                               
         BRAS  R9,ISBLDIT          BUILD INDEX BLOCK                            
*                                                                               
*??      MVC   ISOVDA,B1.SVLNK     SET ISOVDA FOR NEXT TIME THROUGH             
         B     ISADD80                                                          
         EJECT                                                                  
***********************************************************************         
* JUST SPLIT OV BLOCK FOR SECOND TIME - NO BLOCK INDEX EXISTS YET     *         
***********************************************************************         
         SPACE 1                                                                
ISADD35  BAS   R9,ISWRTPD          WRITE FIRST HALF OF OV SPLIT                 
*                                                                               
         MVC   B2.SVLNK,ISOVDA     SAVE D/A IN LOW OV BUFFER                    
         L     RF,ISBUFF1X                                                      
         SH    RF,ISKEYLN1         RF=(HIGH KEY IN LOW OV BUFFER)               
         LH    R1,ISKEYLN1                                                      
         EX    R1,*+4                                                           
         MVC   B2.SVHIKEY(0),0(RF) SAVE NEW COPY PD BLOCK HIGH KEY              
*                                                                               
         L     R0,ISBUFF1                                                       
         L     RE,ISBUFF2                                                       
         LH    R1,ISPDLN                                                        
         LH    RF,ISPDLN                                                        
         MVCL  RE,R0               MOVE BUFF1 TO BUFF2                          
*                                                                               
         MVI   ISPDDA+3,0          RESET BLKIND FLAG                            
         LA    R7,ISPDDA           READ PD BLOCK INTO ISBUFF1                   
         LA    R8,ISXTNTPD                                                      
         BAS   RE,ISBLDCCW                                                      
         BAS   RE,SETSCTR                                                       
         BAS   RE,EXCP                                                          
*                                                                               
         L     RE,ISBUFF1          CHECK CONSISTENCY                            
         CLC   BLKINDEX,2(RE)                                                   
         BNE   *+6                                                              
         DC    H'0'                BAD ERROR - SHOULD NOT EXIST YET             
*                                                                               
         BRAS  R9,SWAPB12          PUT PD INTO BUFF2 (SAVE OV IN 1)             
*                                                                               
         L     RE,ISBUFF1                                                       
         MVC   DAYWSTD,0(RE)       SAVE LINK INFORMATION BEFORE ADDOV           
         BAS   R9,ISADDOV          ADD COPY OF PD BLOCK TO OVERFLOW             
*                                                                               
         L     RE,ISBUFF1                                                       
         MVC   B1.SVLNK,2(RE)      SAVE D/A OF PD BLOCK AS ADDED TO OV          
         L     RF,ISBUFF1X                                                      
         SH    RF,ISKEYLN1         RF=(HIGH KEY IN LOW OV BUFFER)               
         LH    R1,ISKEYLN1                                                      
         EX    R1,*+4                                                           
         MVC   B1.SVHIKEY(0),0(RF) SAVE PD BLOCK HIGH KEY                       
*                                                                               
         L     RE,ISBUFF1          RESTORE SAVED LINK (ADDOV CORRUPTS)          
         MVC   0(L'DAYWSTD,RE),DAYWSTD                                          
*                                                                               
         L     R0,ISBUFF1          PUT OV BUFFER BACK IN BUFFER 2               
         L     RE,ISBUFF2                                                       
         LH    R1,ISPDLN                                                        
         LH    RF,ISPDLN                                                        
         MVCL  RE,R0                                                            
*                                                                               
         BRAS  R9,ISBLDIT          BUILD NEW BLOCK INDEX BLOCK                  
         OI    ISPDDA+3,X'03'      ENSURE BLKIND FLAG IS SET                    
         B     ISADD80                                                          
         EJECT                                                                  
***********************************************************************         
* UPDATE BLOCK INDEX WHICH ALREADY EXISTS                             *         
***********************************************************************         
         SPACE 1                                                                
ISADD60  BAS   R9,ISWRTPD          WRITE CURRENT DATA BLOCK                     
*                                                                               
         ICM   RF,15,ISOVDA                                                     
         BNZ   *+8                                                              
         ICM   RF,15,ISPDDA                                                     
         STCM  RF,15,B1.SVLNK      SAVE D/A                                     
         L     RF,ISBUFF1X                                                      
         SH    RF,ISKEYLN1         RF=(HIGH KEY IN LOW OV BUFFER)               
         LH    R1,ISKEYLN1                                                      
         EX    R1,*+4                                                           
         MVC   B1.SVHIKEY(0),0(RF) SAVE BLOCK HIGH KEY                          
*                                                                               
         MVC   B2.SVLNK,B3.SVLNK   SET SECOND HALF OF SPLIT DETAILS             
         MVC   B2.SVHIKEY,B3.SVHIKEY                                            
*                                                                               
         LA    R7,ISPDDA           READ PD BLOCK INTO ISBUFF1                   
         LA    R8,ISXTNTPD                                                      
         BAS   RE,ISBLDCCW                                                      
         BAS   RE,SETSCTR                                                       
         BAS   RE,EXCP                                                          
*                                                                               
         L     RE,ISBUFF1          CHECK CONSISTENCY                            
         CLC   BLKINDEX,2(RE)                                                   
         BE    *+6                                                              
         DC    H'0'                THIS IS WRONG - WHERE BLOCK INDEX            
*                                                                               
         OI    ISPDDA+3,X'03'      ENSURE BLKIND FLAG IS SET                    
         LA    R3,B1.SVLNK         UPDATE BLOCK INDEX WITH NEW DETAILS          
         BRAS  RE,INSBI                                                         
         LA    R3,B2.SVLNK                                                      
         BRAS  RE,INSBI                                                         
         EJECT                                                                  
***********************************************************************         
* BLOCK INDEX BUILT/UPDATED - WRITE IT BACK TO DISK                   *         
***********************************************************************         
         SPACE 1                                                                
ISADD80  LA    R7,ISPDDA           WRITE UPDATED PD BLOCK INDEX                 
         LA    R8,ISXTNTPD                                                      
         BAS   RE,ISBLDCCW                                                      
         MVI   CCW4,5              SET OPCD=WRITE DATA                          
         BAS   RE,SETSCTR                                                       
         BAS   RE,EXCP                                                          
*                                                                               
         XC    ISOVDA,ISOVDA                                                    
         B     ISADDX              EXIT ADD LOGIC                               
         EJECT                                                                  
***********************************************************************         
* ADD EXIT LOGIC                                                      *         
***********************************************************************         
         SPACE 1                                                                
ISADDX   XC    ISPDPTR,ISPDPTR     RESET SEQUENTIAL READ POINTER                
         B     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* BUILD ACTUAL BLOCK INDEX FROM B1-B3.SVBLKD                          *         
***********************************************************************         
         SPACE 1                                                                
ISBLDIT  L     R0,ISBUFF1          CLEAR BUFFER 1                               
         LH    R1,ISPDLN                                                        
         XR    RF,RF                                                            
         MVCL  R0,RE                                                            
*                                                                               
         LH    RF,ISKEYLN1                                                      
         L     R4,ISBUFF1                                                       
         LA    R4,6(R4)                                                         
*                                                                               
         MVC   0(4,R4),B1.SVLNK    SET FIRST D/A                                
         EX    RF,*+4                                                           
         MVC   4(0,R4),B1.SVHIKEY  SET FIRST KEY                                
         LA    R4,5(RF,R4)                                                      
         MVC   0(4,R4),B2.SVLNK    SET SECOND D/A                               
         EX    RF,*+4                                                           
         MVC   4(0,R4),B2.SVHIKEY  SET SECOND KEY                               
         LA    R4,5(RF,R4)                                                      
         MVC   0(4,R4),B3.SVLNK    SET THIRD D/A                                
         EX    RF,*+4                                                           
         MVC   4(0,R4),B3.SVHIKEY  SET THIRD KEY                                
*                                                                               
         ICM   RF,15,B1.SVLNK                                                   
         BNZ   *+6                                                              
         DC    H'0'                                                             
         ICM   RF,15,B2.SVLNK                                                   
         BNZ   *+6                                                              
         DC    H'0'                                                             
         ICM   RF,15,B3.SVLNK                                                   
         BNZ   *+6                                                              
         DC    H'0'                                                             
*                                                                               
         LH    RF,ISKEYLN                                                       
         MHI   RF,3                                                             
         LA    RF,((4*3)+6)(RF)    3 D/A + 6 BYTE HEADER                        
         L     RE,ISBUFF1                                                       
         STH   RF,0(RE)                                                         
         MVC   2(4,RE),BLKINDEX    MARK LINK AS PD BLOCK INDEX                  
         BR    R9                                                               
*                                                                               
         DROP  B1,B2,B3                                                         
         EJECT                                                                  
***********************************************************************         
* ADD OVERFLOW RECORD IN ISBUFF2                                      *         
***********************************************************************         
         SPACE 1                                                                
ISADDOV  ST    R9,SAVER9                                                        
         BRAS  RE,LOCKDTF                                                       
*                                                                               
         LA    R7,ISOVLAST                                                      
         LA    R8,ISXTNTIX                                                      
         BAS   RE,ISBLDCCW         NOTE - BUILDS CORRECT SEEK ADDR              
         XC    CCW4,CCW4           MODIFY CCW4/CCW5                             
         LA    R0,COUNT                                                         
         ST    R0,CCW4                                                          
         MVI   CCW4,X'1D'          SET WTCKD                                    
         MVI   CCW4+4,X'80'        SET DATA CHAIN                               
         MVI   CCW4+7,8                                                         
*                                                                               
         LH    R0,ISPDLN           GET DATA LENGTH                              
         L     R1,ISBUFF2          GET DATA ADDRESS                             
         BAS   RE,SETIDAWS         BUILD IDAL                                   
*                                                                               
         LA    R0,IDAWS                                                         
         ST    R0,CCW5                                                          
         MVI   CCW5,X'05'          SET WRITE DATA                               
         MVI   CCW5+4,X'04'        SET IDAL FLAG                                
         MVC   CCW5+6(2),ISPDLN                                                 
         SPACE 1                                                                
***********************************************************************         
* NOW BUILD COUNT FIELD. REC ID IS 1 HIGHER THAN SRCH REC.            *         
***********************************************************************         
         SPACE 1                                                                
         XC    COUNT,COUNT                                                      
         MVC   COUNT(4),SRCH                                                    
         MVC   COUNT+6(2),ISPDLN                                                
         SR    RE,RE                                                            
         IC    RE,ISOVLAST+2                                                    
         LA    RE,1(RE)                                                         
         STC   RE,ISOVLAST+2                                                    
         STC   RE,COUNT+4                                                       
         L     R7,ISBUFF1                                                       
         MVC   2(4,R7),ISOVLAST    SET LINK FIELD IN BUFF1                      
         CH    RE,ISHIPD           SEE IF LAST REC ON PD TRK                    
         BL    *+22                NO                                           
         SR    RE,RE               YES - SET LAST TO REC 0 OF NEXT TRK          
         ICM   RE,3,ISOVLAST                                                    
         LA    RE,1(RE)                                                         
         SLL   RE,16                                                            
         ST    RE,ISOVLAST                                                      
*                                                                               
         BAS   RE,SETSCTR                                                       
         BAS   RE,EXCP                                                          
*                                                                               
         BRAS  RE,FREEDTF                                                       
         L     R9,SAVER9                                                        
         BR    R9                                                               
         EJECT                                                                  
***********************************************************************         
* MOVE DATA AT TOP OF BUFFER TO LEFT FOR INSERT LENGTH.              *          
* LENGTH OF MOVE IS GIVEN BY (INSERT ADDR - FIRST CONTROL BYTE ADDR) *          
* DUB HAS ORIGINAL SPARE BYTES.                                      *          
* THEN INSERT DATA IN AREA JUST CREATED.                             *          
***********************************************************************         
         SPACE 1                                                                
ISADDMV  ST    R9,SAVER                                                         
*                                                                               
         AH    R7,DUB              ADD SPARE TO BUFFER ADDRESS                  
         LA    R7,6(R7)            FIRST CONTROL BYTE IS 'FROM' ADDR            
         LR    RF,R7                                                            
         S     RF,DUB2             LESS INSERT LEN = 'TO' ADDR                  
         ST    RF,DUB3             SAVE IT                                      
         L     R6,ISPDPTR          GET POINT OF INSERT                          
         SR    R6,R7               GIVES LENGTH TO MOVE                         
         BZ    *+8                 0 IF NEW REC IS FIRST IN BLK                 
         BAS   R9,MOVEREC2         MVC  0(R6,RF),0(R7)                          
*                                                                               
         L     RF,ISPDPTR          GET INSERTION ADDRESS                        
         L     R6,DUB2             GET INSERT LEN                               
         SR    RF,R6               GIVES 'TO' ADDR                              
         L     RE,DUB1             GET NUMBER MATCHED BYTES INSERT REC          
         STC   RE,0(RF)            SET IN BUFFER                                
         LA    RF,1(RF)            SET 'TO' ADDRESS                             
         BCTR  R6,0                                                             
         LA    R7,0(RE,R3)         GET 'FROM' ADDRESS                           
         BAS   R9,MOVEREC2         MVC  0(R6,RF),0(R7)                          
*                                                                               
         L     R9,SAVER                                                         
         BR    R9                                                               
         EJECT                                                                  
***********************************************************************         
* CLEAR 0(R4) FOR LENGTH IN R6                                        *         
***********************************************************************         
         SPACE 1                                                                
ISADDXC  LR    R0,R4               SET 'TO' ADDRESS                             
         LR    R1,R6               SET 'TO' LENGTH                              
         XR    RF,RF               SET 'FROM' LENGTH                            
         MVCL  R0,RE                                                            
         BR    R9                                                               
         EJECT                                                                  
***********************************************************************         
* SWAP ISBUFF1 WITH ISBUFF2                                           *         
***********************************************************************         
         SPACE 1                                                                
SWAPB12  ST    R9,SAVER                                                         
         LH    R6,ISPDLN                                                        
         L     R7,ISBUFF1                                                       
         L     R3,ISBUFF2                                                       
*                                                                               
         LA    RE,256                                                           
SWAP010  CR    R6,RE                                                            
         BNH   SWAP020                                                          
         BCTR  RE,0                                                             
         EX    RE,SWAPXC37                                                      
         EX    RE,SWAPXC73                                                      
         EX    RE,SWAPXC37                                                      
         LA    RE,256                                                           
         SR    R6,RE                                                            
         AR    R3,RE                                                            
         AR    R7,RE                                                            
         B     SWAP010                                                          
*                                                                               
SWAP020  BCTR  R6,0                                                             
         EX    R6,SWAPXC37                                                      
         EX    R6,SWAPXC73                                                      
         EX    R6,SWAPXC37                                                      
*                                                                               
         L     R3,P2               RESET REC POINTER                            
         L     R9,SAVER                                                         
         BR    R9                                                               
         EJECT                                                                  
***********************************************************************         
* ISERASE - ERASE RECORD IN ISPDKEY                                   *         
***********************************************************************         
         SPACE 1                                                                
ISERASE  OC    ISPDDA,ISPDDA       TEST BUFFER CONTENTS VALID                   
         BNZ   *+6                                                              
         DC    H'0'                                                             
*                                                                               
         L     R3,P2               POINT TO RECORD AS KEYARG                    
         L     R4,ISPDKEY                                                       
         LH    R5,ISKEYLN1                                                      
         EX    R5,SRCHCLC          CLC  0(0,R3),0(R4)                           
         BE    *+6                                                              
         DC    H'0'                KEYS NOT EQUAL                               
*                                                                               
         BRAS  R9,CHKBUFF          DO BUFFER SEARCH TO BUILD PRV KEY            
         DC    AL4(0)                                                           
         DC    AL4(0)                                                           
*                                                                               
         L     R4,ISPDPTR                                                       
         TM    ISCMPRSW,VARIABLE   TEST FIXED/VARIABLE LENGTH RECORDS           
         BZ    ISERS0                                                           
         LH    R6,ISKEYLN                                                       
         SR    RE,RE                                                            
         IC    RE,0(R4)            GET MISSING BYTES                            
         SR    R6,RE               GIVES KEY BYTES PRESENT                      
         LA    R6,1(R6,R4)         POINT TO REC LEN                             
         MVC   ISRECLN,0(R6)       SAVE REC LEN                                 
*                                                                               
ISERS0   LH    R6,ISRECLN                                                       
         SR    RE,RE                                                            
         IC    RE,0(R4)            GET MISSING BYTES                            
         BCTR  RE,0                ADJUST FOR CONTROL BYTE                      
         SR    R6,RE               GIVES BYTES PRESENT                          
         LA    R7,0(R6,R4)         POINT TO NEXT CONTROL BYTE                   
         STM   R6,R7,DUB           SAVE BYTES/NEXT ADDRESS                      
*                                                                               
         LH    R5,ISKEYLN1                                                      
         L     RF,ISPDPRKY                                                      
         EX    R5,ISADDOC          TEST NO PRV KEY  OC  0(0,RF),0(RF)           
         BNZ   ISERS4              REC IS NOT FIRST IN BLK                      
         EJECT                                                                  
***********************************************************************         
* ERASING FIRST REC                                                   *         
***********************************************************************         
         SPACE 1                                                                
         CLI   0(R7),X'FF'         TEST NEXT IS EOB                             
         BE    ISERS2              YES - ONLY 1 REC IN BLK                      
*                                                                               
         LR    R3,R7               SAVE NEXT REC ADDRESS                        
         BAS   R9,ISADDXC          XC  0(R6,R4),0(R4)                           
         SPACE 1                                                                
***********************************************************************         
* NOW EXPAND NEW FIRST KEY IN BUFFER AND SET NEW SLACK                *         
***********************************************************************         
         SPACE 1                                                                
         SR    R6,R6                                                            
         IC    R6,0(R3)            GET MISSING KEY BYTES                        
         LTR   R6,R6                                                            
         BZ    ISERS1                                                           
         SR    R3,R6                                                            
         LA    RF,1(R3)            SET 'TO' ADDRESS                             
         L     R7,ISPDKEY                                                       
         BCTR  R6,0                                                             
         EX    R6,MOVEMVC          MVC  0(0,RF),0(R7)                           
*                                                                               
ISERS1   L     R4,ISBUFF1                                                       
         LA    RF,6(R4)                                                         
         SR    R3,RF                                                            
         STH   R3,0(R4)                                                         
         B     ISADD12                                                          
         SPACE 1                                                                
*======================================================*                        
* ERASING ONLY RECORD IN BLOCK                         *                        
*======================================================*                        
         SPACE 1                                                                
ISERS2   L     R0,ISBUFF2          SAVE DEAD BLOCK IN ISBUFF2                   
         LH    R1,ISPDLN           (NEEDED TO SAVE HIGH KEY)                    
         L     RE,ISBUFF1                                                       
         LR    RF,R1                                                            
         MVCL  R0,RE               MOVE BUFF1 TO BUFF2                          
*                                                                               
         L     R4,ISBUFF1                                                       
         LA    R4,6(R4)                                                         
         LH    R6,ISPDLN           LET IT CLEAR 6 EXTRA                         
         BAS   R9,ISADDXC          XC  0(R6,R4),0(R4)                           
         L     R4,ISBUFF1                                                       
         XC    0(2,R4),0(R4)       CLEAR SPARE                                  
         MVI   6(R4),X'FF'                                                      
*                                                                               
         BAS   R9,ISWRTPD          WRITE PRIME DATA BLOCK                       
* NOW CLEAN UP THE FILE BY FINDING THE BLOCK THAT POINTS TO THIS                
* ONE AND RECHAINING IT WITH THE LINK CURRENTLY IN THIS BLOCK                   
         SPACE 1                                                                
         OC    ISOVDA,ISOVDA       IF THIS IS NOT AN OVERFLOW BLOCK             
         BZ    ISERS2C             THE DAMAGE WILL BE MASSIVE                   
*                                                                               
         MVC   DEADBLKA,ISOVDA     SAVE DISK ADDRESS OF THIS BLOCK              
         MVC   DEADBLKL,2(R4)      SAVE LINK ADDRESS FROM THIS BLOCK            
*                                                                               
         XC    ISOVDA,ISOVDA       START WITH THE PRIME DATA BLOCK              
         LA    R7,ISPDDA                                                        
         LA    R8,ISXTNTPD                                                      
*                                                                               
ISERS2A  BAS   RE,ISBLDCCW                                                      
         BAS   RE,SETSCTR                                                       
         BAS   RE,EXCP                                                          
*                                                                               
         L     R7,ISBUFF1                                                       
         CLC   2(4,R7),BLKINDEX    TEST FOR PD BLOCK INDEX LINK                 
         BNE   ISERS2A1                                                         
         OI    ISPDDA+3,X'03'      ENSURE BLKIND INDEX IS SET                   
         MVC   DUB(4),6(R7)        SAVE FIRST PD OVERFLOW BLOCK DA              
*                                                                               
         LA    R4,10(R7)                                                        
         AH    R4,ISKEYLN                                                       
         OC    0(4,R4),0(R4)                                                    
         BZ    ISERS2C             EXIT IF ONLY ONE ENTRY IN BI                 
*                                                                               
         BRAS  RE,ERSBI            ERASE PD BLOCK INDEX ENTRY                   
*                                                                               
         BAS   R9,ISWRTPD          WRITE THE UPDATED PD BLOCK INDEX             
*                                                                               
         L     R7,ISBUFF1                                                       
         CLC   DEADBLKA,DUB        WAS FIRST PD OVERFLOW BLOCK DEAD ONE         
         BE    ISERS2C             IF SO EXIT                                   
         OC    6(4,R7),6(R7)       MAKE SURE THERE IS A LINK                    
         BNZ   *+6                                                              
         DC    H'0'                                                             
         MVC   ISOVDA,6(R7)                                                     
         B     ISERS2A2            PROCESS FIRST PD OVERFLOW BLOCK              
*                                                                               
ISERS2A1 DS    0H                                                               
*                                                                               
         CLC   DEADBLKA,2(R7)      DOES THIS BLOCK POINT TO DEAD ONE            
         BE    ISERS2B                                                          
         OC    2(4,R7),2(R7)       MAKE SURE THERE IS A LINK                    
         BNZ   *+6                                                              
         DC    H'0'                                                             
         MVC   ISOVDA,2(R7)        PROCESS NEXT PD OVERFLOW BLOCK               
*                                                                               
ISERS2A2 DS    0H                                                               
         LA    R7,ISOVDA                                                        
         LA    R8,ISXTNTIX                                                      
         B     ISERS2A                                                          
*                                                                               
ISERS2B  MVC   2(4,R7),DEADBLKL    MOVE LINK FROM DEAD BLOCK                    
*                                                                               
* ??     L     R7,ISBUFF2          MOVE OLD HIKEY OF DEAD BLOCK                 
*        AH    R7,ISPDLN           TO HIGH KEY OF THIS BLOCK                    
*        SH    R7,ISKEYLN                                                       
*        L     RF,ISBUFF1                                                       
*        AH    RF,ISPDLN                                                        
*        SH    RF,ISKEYLN                                                       
*        LH    R5,ISKEYLN1                                                      
*        EX    R5,MOVEMVC                                                       
*                                                                               
         BAS   R9,ISWRTPD          WRITE THIS UPDATED BLOCK                     
*                                                                               
ISERS2C  XC    ISPDPTR,ISPDPTR     RESET SEQUENTIAL READ POINTER                
         B     EXIT                                                             
         EJECT                                                                  
*======================================================*                        
* NOT ERASING FIRST REC IN BLK                         *                        
* R6 HAS BYTES THIS REC/R7 HAS NEXT REC ADDRESS        *                        
* R4 POINTS TO REC BEING ERASED                        *                        
*======================================================*                        
         SPACE 1                                                                
ISERS4   CLI   0(R7),X'FF'         TEST NEXT IS EOB                             
         BE    ISERS5                                                           
         B     ISERS6                                                           
         SPACE 1                                                                
*======================================================*                        
* TEST IF NUMBER OF MISSING BYTES IN REC BEING ERASED  *                        
* IS LESS THAN MISSING FROM NEXT                       *                        
*======================================================*                        
         SPACE 1                                                                
         CLC   0(1,R4),0(R7)                                                    
         BNL   ISERS6                                                           
* ISPDPRKY HAS PREVIOUS KEY. GET NEXT KEY IN ISPDKEY.                           
         ZIC   RE,0(R7)            GET MISSING BYTES FROM NEXT RECORD           
         LA    RF,ISPDKEY(RE)      SET 'TO' ADDR = ISPDKEY+MISSING              
         LH    R5,ISKEYLN1                                                      
         SR    R5,RE               GIVES LEN-1 TO MOVE                          
         EX    R5,CHKMVKEY         MVC  0(0,RF),1(R7)                           
*                                                                               
         LA    RE,ISPDPRKY         NOW FIND HOW MANY BYTES MATCH                
         LA    RF,ISPDKEY                                                       
         SR    R0,R0               CLEAR COUNTER                                
*                                                                               
ISERS4A  CLC   0(1,RE),0(RF)                                                    
         BNE   ISERS4B                                                          
         LA    RE,1(RE)                                                         
         LA    RF,1(RF)                                                         
         BCT   R0,ISERS4A                                                       
*                                                                               
ISERS4B  LPR   R0,R0               GIVES CORRECTED MISSING BYTES                
         ZIC   RE,0(R7)            GET CURRENT MISSING BYTES                    
         SR    RE,R0               GIVES NUMBER BYTES TO ADJUST                 
         SR    R7,RE               BACK UP 'NEXT' RECORD POINTER                
         SR    R6,RE               DECREMENT LENGTH TO MOVE                     
         STM   R6,R7,DUB           SAVE LENGTH AND POINTER                      
         STC   R0,0(R7)            SET MISSING BYTES                            
* NOW MOVE CORRECTED KEY INTO 'NEXT' RECORD                                     
         LH    RE,ISKEYLN1                                                      
         SR    RE,R0               GIVES BYTES PRESENT                          
         EX    RE,*+8                                                           
         B     *+10                                                             
         MVC   1(0,R7),0(RF) *EXECUTED*                                         
         B     ISERS6                                                           
         EJECT                                                                  
*=====================================================*                         
* ERASING LAST RECORD IN BLOCK                        *                         
*=====================================================*                         
         SPACE 1                                                                
ISERS5   L     RF,ISBUFF1          MUST HAVE LINK                               
         OC    2(4,RF),2(RF)                                                    
         BNZ   *+6                                                              
         DC    H'0'                                                             
*                                                                               
* SET NEW HI KEY. R5 HAS KEYLEN-1                                               
*                                                                               
         L     R7,ISPDPRKY         GET 'FROM' ADDRESS TO SET HI KEY             
         L     RF,ISBUFF1X                                                      
         SR    RF,R5               GET 'TO' ADDRESS                             
         EX    R5,MOVEMVC          MVC  0(0,RF),0(R7)                           
         SPACE 1                                                                
*=====================================================*                         
* NOW MOVE DATA TO LEFT AND CLEAR                     *                         
*=====================================================*                         
         SPACE 1                                                                
ISERS6   L     R7,DUB+4            NEXT CONTROL BYTE = 'FROM' ADDRESS           
         L     RF,ISPDPTR          GET 'TO' ADDRESS                             
         L     R6,ISBUFF1X                                                      
         SH    R6,ISKEYLN1         CAREFUL NOT TO CLOBBER HI KEY                
         SR    R6,R7               GIVES LEN TO MOVE                            
         BAS   R9,MOVEREC2         MVC  0(R6,RF),0(R7)                          
*                                                                               
ISERS8   L     R4,ISBUFF1X                                                      
         SH    R4,ISKEYLN1                                                      
         L     R6,DUB              LEN TO CLEAR                                 
         SR    R4,R6               GIVE START ADDRESS FOR CLEAR                 
         BAS   R9,ISADDXC          XC 0(R6,R4),0(R4)                            
         B     ISADD12                                                          
         EJECT                                                                  
***********************************************************************         
* GET CPU ID FROM RECORD ZERO OF TRACK ONE IN INDEX EXTENT            *         
* I/O IS DONE TO NMOD AREA IN 24 BIT ADDRESSABLE STORAGE, NO IDAL.    *         
* IF STORAGE PROTECT ON REC 0 READ INTO TCB FIELD (NO EXCP IN KEY 9)  *         
***********************************************************************         
         SPACE 1                                                                
ISCPUID  LA    R7,=F'-1'           POINT TO DUMMY D/A                           
         LA    R8,ISXTNTIX                                                      
         BRAS  RE,ISBLDCCW                                                      
*                                                                               
         XC    CCW4,CCW4           READ RECORD ZERO                             
         LA    RE,COUNT                                                         
*                                                                               
         USING SSBD,RF                                                          
         ICM   RF,15,VSSB                                                       
         BZ    ISCP02                                                           
         TM    SSBPROT,SSBPONQ                                                  
         BZ    ISCP02                                                           
         ICM   RF,15,SSBTKADR                                                   
         BZ    ISCP02                                                           
*                                                                               
         USING TCBD,RF                                                          
         LA    RE,TCBCIOA                                                       
         DROP  RF                                                               
*                                                                               
ISCP02   ST    RE,AREC0                                                         
         ST    RE,CCW4                                                          
         MVI   CCW4,6                                                           
         LA    RE,8                                                             
         STH   RE,CCW4+6                                                        
*                                                                               
         BRAS  RE,INIEXCP                                                       
         BRAS  RE,EXCPCHK                                                       
         OC    ERRF,ERRF           CHECK FOR EXCP ERROR                         
         BZ    ISCP04                                                           
         OI    P3+1,X'80'          NO SET ERROR                                 
         B     EXIT                                                             
*                                                                               
ISCP04   L     RE,AREC0                                                         
         L     R5,X'10'            POINT TO CPU ID                              
         L     R5,X'C4'(R5)                                                     
         LA    R5,X'10'(R5)        R5=A(FOUR CHR CPU ID)                        
         MVC   DUB(2),2(R5)                                                     
*                                                                               
         MVC   P3+2(2),6(RE)       RETURN REC ZERO CPU ID                       
         CLC   6(1,RE),DUB         SAME AS RECORD ZERO VALUE                    
         BE    ISCP06              YES                                          
         OI    P3+1,X'80'          NO SET ERROR                                 
         B     EXIT                                                             
*                                                                               
ISCP06   CLI   7(RE),C' '          TEST FOR DSPACE CHR                          
         BNH   EXIT                                                             
         TM    ISFFLAG,ISFGLOB     IS IT GLOBAL                                 
         BZ    EXIT                                                             
*                                                                               
         USING SSOOFF,RF                                                        
         ICM   RF,15,VSSB                                                       
         BZ    EXIT                                                             
         OC    SSOCNTL,SSOCNTL                                                  
         BNZ   EXIT                NO TEST IF ONLINE                            
*                                                                               
         CLI   SSODSPAC,C' '                                                    
         BH    *+10                                                             
         MVC   SSODSPAC(1),7(RE)                                                
*                                                                               
         CLC   SSODSPAC(1),7(RE)                                                
         BE    EXIT                                                             
         OI    P3+1,X'10'          NO SET ERROR                                 
         B     EXIT                DSPACE REQUIRED DOES NOT MATCH               
         DROP  RF                                                               
         EJECT                                                                  
***********************************************************************         
* THIS ROUTINE IS USED OFFLINE TO MAKE SURE WE HAVE RIGHT EOF ADDRESS *         
* I/O IS DONE IN NMOD AREA (24-BIT) SO NO IDAL REQUIRED               *         
***********************************************************************         
         SPACE 1                                                                
ISFNDEOF MVC   DUB(4),ISOVLAST                                                  
         XR    RE,RE                                                            
         IC    RE,DUB+2                                                         
         CH    RE,ISHIPD           TEST LAST REC ON TRACK                       
         BL    ISEOF02             NO                                           
*                                                                               
         LH    RE,DUB                                                           
         LA    RE,1(RE)                                                         
         SLL   RE,16                                                            
         ST    RE,DUB                                                           
         SR    RE,RE                                                            
*                                                                               
ISEOF02  LA    RE,1(RE)                                                         
         STC   RE,DUB+2                                                         
         LA    R7,DUB                                                           
         LA    R8,ISXTNTIX                                                      
         BRAS  RE,ISBLDCCW                                                      
*                                                                               
         IC    R0,CCW4                                                          
         LA    RE,COUNT                                                         
         ST    RE,CCW4             MODIFY DATA ADDRESS                          
         STC   R0,CCW4                                                          
         MVI   CCW4+4,X'10'        RESET FLAGS/ SET SUPPRESS DATA XFR           
*                                                                               
         BAS   RE,INIEXCP                                                       
         BAS   RE,EXCPCHK                                                       
         TM    ERRF+1,X'08'        TEST NOT FOUND                               
         BO    EXIT                                                             
*                                                                               
         MVC   ISOVLAST,DUB        ELSE SET LAST KNOWN REC                      
         B     ISFNDEOF            AND TRY AGAIN                                
         EJECT                                                                  
***********************************************************************         
* READ INDEX RECORD                                                   *         
* NTRY: R3     = A(KEYARG)                                            *         
***********************************************************************         
         SPACE 1                                                                
READIX   XC    ISPDDA(12),ISPDDA   INCLUDES ISOVDA,ISPDPTR                      
*                                                                               
         LH    R5,ISKEYLN1                                                      
         L     R4,ISPDPRKY                                                      
         EX    R5,READXC                                                        
         L     R4,ISPDKEY                                                       
         EX    R5,READXC                                                        
         L     R4,ISTIHIKY                                                      
         EX    R5,READXC                                                        
         SPACE 1                                                                
***********************************************************************         
* SEARCH CI TABLE - ONE ENTRY PER CI INDEX PAGE                       *         
* TABLE FORMAT IS PAGE ADDRESS/HI KEY ON PAGE                         *         
***********************************************************************         
         SPACE 1                                                                
READIX2  L     R4,ISINDX           GET INDEX TABLE ADDRESS                      
         L     RE,0(R4)            GET ENTRY LENGTH                             
         L     RF,4(R4)            GET END ADDRESS                              
         LA    R4,8(R4)            POINT TO FIRST ENTRY                         
         LH    R5,ISKEYLN1                                                      
*                                                                               
READIX4  EX    R5,READICLC                                                      
         BNH   SRCHCI                                                           
         BXLE  R4,RE,READIX4                                                    
         DC    H'0'                INDEX IS DESTROYED                           
*                                                                               
READICLC CLC   0(0,R3),4(R4) *EXECUTED*                                         
         SPACE 1                                                                
***********************************************************************         
* NOW SEARCH CI INDEX - R4 POINTS TO FIRST SEARCH KEY                 *         
***********************************************************************         
         SPACE 1                                                                
SRCHCI   L     R4,0(R4)            POINT TO THE INDEX RECORD                    
*                                                                               
SRCHCI2  EX    R5,SRCHCLC          CLC  0(0,R3),0(R4)                           
         BNH   READTI                                                           
         AH    R4,ISIXLN                                                        
         B     SRCHCI2                                                          
         EJECT                                                                  
***********************************************************************         
* READ TRACK INDEX RECORD                                             *         
***********************************************************************         
         SPACE 1                                                                
READTI   LA    R8,ISXTNTPD                                                      
         LA    R7,1(R5,R4)                                                      
         XC    DUB,DUB                                                          
         MVC   DUB(2),0(R7)        SAVE RELTRK                                  
         ICM   R4,15,ISTIBUFF      USE TIBUFF IF AVAILABLE                      
         BZ    READTI2                                                          
         CLC   DUB(2),ISTITRK      IS IT THE TRK WE HAVE SAVED                  
         BE    READTI6             YES                                          
*                                                                               
READTI2  LA    R7,DUB                                                           
         BRAS  RE,ISBLDCCW                                                      
*                                                                               
         MVC   ISTITRK,DUB           SAVE TRACK NUMBER                          
         ICM   R1,15,ISTIBUFF        USE TIBUFF IF AVAILABLE                    
         BZ    READTI4                                                          
* OFFLINE MUST SET IDAW LIST TO POINT TO TI BUFFER                              
         SR    R0,R0                                                            
         ICM   R0,3,ISTILN         GET DATA LEN                                 
         BAS   RE,SETIDAWS                                                      
         LA    R0,IDAWS                                                         
         STCM  R0,7,CCW4+1                                                      
*                                                                               
READTI4  MVI   CCW2,X'51'          SET TO SRCH ID HI  (REC=0)                   
         MVC   CCW4+6(2),ISTILN    SET CORRECT DATA LENGTH                      
*NOP*    BAS   RE,SETSCTR          DONT DO THIS - RECORD IS REPLICATED          
         BAS   RE,EXCP                                                          
         OC    ERRF,ERRF           TEST FOR ERROR READING TRACK INDEX           
         BZ    READTI5                                                          
         BAS   RE,EXCP             HAVE ANOTHER GO                              
         OC    ERRF,ERRF                                                        
         BZ    READTI5                                                          
         DC    H'0'                                                             
*                                                                               
READTI5  L     R4,IDAWS            PICK UP I/O AREA ADDRESS                     
*                                                                               
READTI6  SR    RE,RE               SET COUNTER                                  
         SR    R0,R0                                                            
         ICM   R0,3,ISTILN                                                      
         AR    R0,R4               SET UPPER BOUND FOR SEARCH                   
         B     SRCHTI2                                                          
         SPACE 2                                                                
SRCHTI   EX    R5,SRCHCLC          CLC 0(0,R3),0(R4)                            
         BNH   READPD                                                           
         AH    R4,ISKEYLN                                                       
         CR    R4,R0                                                            
         BL    *+6                                                              
         DC    H'0'                                                             
SRCHTI2  BCT   RE,SRCHTI                                                        
         EJECT                                                                  
***********************************************************************         
* READ PRIME DATA RECORD                                              *         
***********************************************************************         
         SPACE 1                                                                
READPD   L     R1,ISTIHIKY         SAVE TI ENTRY                                
         EX    R5,CHKSVKEY         MVC 0(0,R1),0(R4)                            
*                                                                               
         LH    R0,ISHIPD                                                        
         LPR   RE,RE                                                            
         BCTR  RE,0                                                             
         SRDA  RE,32                                                            
         DR    RE,R0                                                            
         LA    RE,1(RE)            RE HAS REC-1                                 
         LA    RF,1(RF)            RF HAS TRK-1                                 
         ICM   R0,3,DUB            DUB HAS START OF CYLINDER                    
         AR    RF,R0                                                            
*                                                                               
         STH   RF,ISPDDA                                                        
         STC   RE,ISPDDA+2                                                      
         LA    R7,ISPDDA                                                        
         LA    R8,ISXTNTPD                                                      
         BAS   RE,ISBLDCCW                                                      
         BAS   RE,SETSCTR                                                       
         BAS   RE,EXCP                                                          
*                                                                               
         L     RF,ISBUFF1                                                       
         CLC   BLKINDEX,2(RF)      CHECK PD BLOCK INDEX STRUCTURE FOUND         
         BNE   *+8                 IF SO SET ISDTF FLAG ON FLY FOR              
         OI    ISFFLAG,ISFBLKIX    BACKWARD COMPATABILITY OF ISDDS              
*                                                                               
         TM    ISFFLAG,ISFBLKIX    TEST BLOCK INDEX ON SPLIT BLOCKS             
         BZ    CHKHI               NO - CHECK HIGH KEY IN BUFFER                
         CLC   BLKINDEX,2(RF)      PD IS BLKIND?                                
         BE    SRCHBI              YES                                          
         B     CHKHI               GO AND CHECK HIGH IN BUFFER                  
*                                                                               
READXC   XC    0(0,R4),0(R4)                                                    
SRCHCLC  CLC   0(0,R3),0(R4)                                                    
         EJECT                                                                  
***********************************************************************         
* READ OVERFLOW RECORD                                                *         
***********************************************************************         
         SPACE 1                                                                
READOV   L     R7,ISBUFF1                                                       
         LA    R7,2(R7)                                                         
         MVC   ISOVDA,0(R7)        SAVE DISK ADDRESS                            
         LA    R8,ISXTNTIX                                                      
         BAS   RE,ISBLDCCW                                                      
         BAS   RE,SETSCTR                                                       
         BAS   RE,EXCP                                                          
         B     CHKHI                                                            
         EJECT                                                                  
***********************************************************************         
* SEARCH PD BLOCK INDEX FOR A(FIRST PD) AND ITS HIGH KEY              *         
***********************************************************************         
         SPACE 1                                                                
SRCHBI   OI    ISPDDA+3,X'01'      SET BLKIND IN ISPDDA                         
         L     R4,ISBUFF1                                                       
         XR    R0,R0                                                            
         ICM   R0,3,0(R4)          SET UPPER BOUND FOR SEARCH                   
         AR    R0,R4                                                            
         AHI   R4,6                                                             
         LH    R5,ISKEYLN1                                                      
*                                                                               
SRBI02   ICM   RF,15,0(R4)         END OF BLOCK INDEX?                          
         BNZ   *+6                                                              
         DC    H'0'                                                             
*                                                                               
         LR    R7,R4               SAVE R7=A(PD OVERFLOW BLOCK DA)              
         LA    R4,4(R4)                                                         
         EX    R5,SRCHCLC          CLC 0(0,R3),0(R4)                            
         BH    SRBI04                                                           
*                                                                               
         MVC   ISOVDA,0(R7)        SAVE DISK ADDRESS                            
         LA    R8,ISXTNTIX                                                      
         BAS   RE,ISBLDCCW                                                      
         BAS   RE,SETSCTR                                                       
         BAS   RE,EXCP                                                          
         B     CHKHI                                                            
*                                                                               
SRBI04   AH    R4,ISKEYLN                                                       
         CR    R4,R0               TEST UPPER BOUND FOR SEARCH                  
         BL    SRBI02                                                           
*                                                                               
         WTO   '*FACPAK* DMISDDS EOB BI AFTER ERASE?',MCSFLAG=HRDCPY            
         DC    H'0'                                                             
         EJECT                                                                  
***********************************************************************         
* TEST IF RECORD IS IN PD BUFFER                                      *         
***********************************************************************         
         SPACE 1                                                                
CHKHILO  OC    ISPDDA,ISPDDA       TEST BUFFER CONTENTS VALID                   
         BER   R9                  NO - TAKE RETURN 1                           
*                                                                               
         L     R4,ISBUFF1          GET A(LO KEY THIS PD BUFFER)                 
         CLI   6(R4),X'FF'         TEST NULL BLOCK                              
         BE    0(R9)               YES - EXIT                                   
*                                                                               
         CLC   BLKINDEX,2(R4)      PD BLOCK INDEX LINK?                         
         BNE   *+12                NO                                           
         OI    ISPDDA+3,X'03'      MAKE SURE IT IS FLAGGED                      
         B     0(R9)               AND EXIT                                     
*                                                                               
         OC    2(4,R4),2(R4)       TEST LINKED TO OV                            
         BZ    *+8                                                              
         OI    ISPDDA+3,X'02'      SET SPLIT FLAG YOU SFI                       
*                                                                               
         AH    R4,0(R4)                                                         
         LA    R4,7(R4)            POINT TO START OF FIRST KEY                  
         LH    R5,ISKEYLN1                                                      
         EX    R5,CHKCLC           CLC  0(0,R3),0(R4)                           
         BL    0(R9)                                                            
*                                                                               
CHKHI    LH    R5,ISKEYLN1                                                      
         L     R4,ISBUFF1X         GET BUFFER END ADDRESS                       
         SR    R4,R5               BACK UP TO START OF HI KEY                   
         EX    R5,CHKCLC           CLC  0(0,R3),0(R4)                           
         BH    4(R9)                                                            
         B     CHKBUFF                                                          
         SPACE 1                                                                
***********************************************************************         
* SEE IF KEYARG LESS THAN OR EQUAL TO TRACK INDEX ENTRY               *         
* FOR THIS PRIME DATA BLOCK.                                          *         
***********************************************************************         
         SPACE 1                                                                
CHKHITI  L     R4,ISTIHIKY                                                      
         LH    R5,ISKEYLN1                                                      
         EX    R5,CHKCLC           CLC  0(0,R3),0(R4)                           
         BR    R9                  RETURN WILL TEST CC                          
         EJECT                                                                  
***********************************************************************         
* SEARCH CORE BUFFER                                                  *         
***********************************************************************         
         SPACE 1                                                                
CHKBUFF  XC    ISPDPTR,ISPDPTR                                                  
         L     R4,ISPDPRKY                                                      
         LH    R5,ISKEYLN1                                                      
         EX    R5,READXC                                                        
*                                                                               
         L     R4,ISPDKEY                                                       
         L     R7,ISBUFF1                                                       
         AH    R7,0(R7)                                                         
         LA    R7,6(R7)            POINT TO FIRST CONTROL BYTE                  
*                                                                               
         CLI   0(R7),X'FF'         CHECK EOB                                    
         BE    4(R9)               NULL BLK - FORCE OVFLO READ                  
*                                                                               
         L     R1,ISPDPRKY                                                      
         B     *+8                                                              
CHKBUFF2 EX    R5,CHKSVKEY         SAVE THIS KEY MVC ISPDPRKY,ISPDKEY           
*                                                                               
         SR    RE,RE                                                            
         IC    RE,0(R7)            GET MISSING BYTES                            
         LA    RF,0(RE,R4)         GET 'TO' ADDRESS                             
         SR    RE,R5               GET KEY LEN TO MOVE -1.                      
         LPR   RE,RE                                                            
         EX    RE,CHKMVKEY         MOVE TO WORK                                 
*                                                                               
         TM    ISCMPRSW,VARIABLE   TEST FIXED/VARIABLE LENGTH RECORDS           
         BZ    *+14                                                             
         LA    RE,2(R7,RE)         POINT TO LENGTH                              
         MVC   ISRECLN,0(RE)       ALIGN AND SAVE                               
         EX    R5,CHKCLC           TEST RIGHT KEY                               
         BE    CHKBUFF4+2                                                       
         BL    CHKBUFF4            KEYARG LO                                    
         SR    RE,RE                                                            
         IC    RE,0(R7)            KEYARG HI = NEXT RECORD                      
         SH    RE,ISRECLN                                                       
         LPR   RE,RE               GET NUMBER OF BYTES PRESENT -1.              
         LA    R7,1(RE,R7)                                                      
*                                                                               
         B     CHKBUFF2                                                         
*                                                                               
CHKBUFF4 LTR   R7,R7               SET CC NOT EQUAL                             
*                                                                               
         ST    R7,ISPDPTR          SAVE BUFFER POINTER                          
         B     8(R9)               TAKE NORMAL EXIT                             
*                                                                               
CHKCLC   CLC   0(0,R3),0(R4)       CLC  KEYARG,WORK                             
CHKMVKEY MVC   0(0,RF),1(R7)                                                    
CHKSVKEY MVC   0(0,R1),0(R4)       MVC  ISPDPRKY,ISPDKEY                        
         EJECT                                                                  
***********************************************************************         
* MOVE RECORD FROM BUFFER TO CALLER'S I/O AREA                        *         
***********************************************************************         
         SPACE 1                                                                
MOVEREC  L     R7,ISPDKEY          GET KEY ADDRESS                              
         LH    R5,ISKEYLN1                                                      
         L     RF,P2               GET USERS ADDRESS                            
         EX    R5,MOVEMVC          MVC 0(0,RF),0(R7)                            
*                                                                               
         L     R7,ISPDPTR          GET BUFFER POINTER                           
         SR    RE,RE                                                            
         IC    RE,0(R7)            GET MISSING BYTES                            
         LH    R5,ISKEYLN                                                       
         AR    RF,R5               GET 'TO' ADDRESS                             
         SR    R5,RE               GET NUMBER OF KEY BYTES PRESENT              
         LA    R7,1(R5,R7)         GET NEXT 'FROM' ADDRESS                      
         TM    ISCMPRSW,VARIABLE   TEST FIXED/VARIABLE LENGTH RECORDS           
         BZ    *+10                                                             
         MVC   ISRECLN,0(R7)       SAVE LENGTH OF THIS REC                      
*                                                                               
         LH    R6,ISRECLN                                                       
         SH    R6,ISKEYLN          MUST MOVE DATA LEN =RECLN-KEYLN              
*                                                                               
MOVEREC2 LA    R0,256                                                           
         CR    R6,R0                                                            
         BNH   *+20                                                             
         MVC   0(256,RF),0(R7)                                                  
         SR    R6,R0                                                            
         AR    R7,R0                                                            
         AR    RF,R0                                                            
         B     *-18                                                             
         BCTR  R6,0                                                             
         EX    R6,MOVEMVC                                                       
         TM    ISCMPRSW,VARIABLE   TEST FIXED/VARIABLE LENGTH RECORDS           
         BZ    *+12                                                             
         LA    R7,1(R6,R7)         BUMP POINTERS                                
         LA    RF,1(R6,RF)                                                      
*                                                                               
         BR    R9                                                               
*                                                                               
MOVEMVC  MVC   0(0,RF),0(R7)                                                    
         EJECT                                                                  
***********************************************************************         
* COMPUTE SECTOR NUMBER FOR SEARCH                                    *         
***********************************************************************         
         SPACE 1                                                                
SETSCTR  STM   RE,RC,12(RD)        SAVE ALL CALLING REGS                        
         MVI   RPSSW,0                                                          
         OC    DEVSCT,DEVSCT       EXIT IF RPS NOT SUPPORTED                    
         BZR   RE                                                               
*                                                                               
         MVI   RPSSW,C'Y'                                                       
         SR    R0,R0                                                            
         ICM   R0,12,CCW4+6      GET BLOCK SIZE PLUS IRG                        
         TM    CCW4+4,X'80'                                                     
         BZ    *+8                                                              
         ICM   R0,12,CCW5+6                                                     
         ICM   R0,1,SEEK+6       GET REC NUM FROM SEEK ADDRESS                  
*                                                                               
         ZIC   RF,ISFUC          PICK UP INTERNAL DEVICE CODE                   
         BCTR  RF,0                                                             
         MH    RF,=H'3'                                                         
         L     RE,=A(DEVCODE)    POINT TO THIS ENTRY                            
         AR    RE,RF                                                            
* NOTE THE NEXT INST DESTROYS DTF POINTER - SO CAN'T REFER TO IT                
         LA    R2,SECTOR         POINT R2 TO OUTPUT FIELD                       
         ICM   R2,8,1(RE)        THEN PICK UP UCB DVC TYPE IN REG               
*                                                                               
         L     RF,X'10'          CVT CORE LOCATION                              
         L     RF,X'E8'(RF)      GET ROUTINE ADDRESS                            
         BASR  RE,RF             BRANCH TO SECTOR COMP ROUTINE                  
*                                                                               
SETSCTRX LM    RE,RC,12(RD)      RESTORE REGS                                   
         BR    RE                                                               
         SPACE 2                                                                
SETSCTRZ MVI   RPSSW,0             EXIT IF RPS NOT AVAILABLE                    
         OC    DEVSCT,DEVSCT                                                    
         BZR   RE                                                               
SETSCTR0 MVI   SECTOR,0            SET SECTOR TO ZERO                           
         MVI   RPSSW,C'Y'                                                       
         BR    RE                                                               
         EJECT                                                                  
***********************************************************************         
* BUILD CCW                                                           *         
***********************************************************************         
         SPACE 1                                                                
ISBLDCCW ST    RE,SAVER                                                         
         MVI   RPSSW,0                                                          
         XC    CCWS,CCWS                                                        
         XC    IOB,IOB                                                          
         MVI   IOB,X'C3'           SET DC/CC/NOTRELATED/NOAPPENDG               
         LA    RE,ECB                                                           
         ST    RE,IOB+4                                                         
         LA    RE,CCWS                                                          
         ST    RE,IOB+16                                                        
         L     RE,ISFADCB          GET DCB ADDRESS                              
         STCM  RE,7,IOB+21                                                      
         LA    R0,SEEK                                                          
         ST    R0,CCW1                                                          
         MVI   CCW1,7              SET SEEK                                     
         MVI   CCW1+4,X'40'                                                     
         MVI   CCW1+7,6                                                         
*                                                                               
         LA    R0,SRCH                                                          
         ST    R0,CCW2                                                          
         MVI   CCW2,X'31'          SET SRCH ID =                                
         MVI   CCW2+4,X'40'                                                     
         MVI   CCW2+7,5                                                         
*                                                                               
         LA    R0,CCW2                                                          
         ST    R0,CCW3                                                          
         MVI   CCW3,8                                                           
         MVI   CCW3+4,X'40'                                                     
*                                                                               
         MVI   CCW4,X'06'          SET READ DATA                                
         OI    CCW4+4,X'04'        SET IDAW FLAG (BIT 37)                       
         MVC   CCW4+6(2),ISPDLN    FOR PD BUFFER LENGTH                         
*                                                                               
         LH    R0,ISPDLN           GET LENGTH                                   
         L     R1,ISBUFF1          AND DATA ADDRESS                             
         BAS   RE,SETIDAWS                                                      
         LA    R0,IDAWS                                                         
         STCM  R0,7,CCW4+1                                                      
         EJECT                                                                  
***********************************************************************         
* TRANSLATE DISK ADDRESS AT 0(R7) USING EXTENT AT 0(R8)               *         
***********************************************************************         
         SPACE 1                                                                
ISCCHH   TM    ISFTYPE,ISFTPDOV    TEST OVERFLOW AT END OF PRIME DATA           
         BZ    *+8                                                              
         LA    R8,ISXTNT           ALWAYS POINT TO FIRST EXTENT                 
*                                                                               
         XC    SEEK,SEEK                                                        
         CLC   0(4,R7),=F'-1'      DUMMY ADDRESS SET BY ISCPUID                 
         BNE   ISCCH1                                                           
         LH    RF,2(R8)            POINT TO LOW CYL                             
         LH    RE,4(R8)            POINT TO LOW TRACK                           
         B     ISCCH6                                                           
*                                                                               
ISCCH1   SR    RE,RE                                                            
         ICM   RE,3,0(R7)                                                       
         BNZ   *+6                                                              
         DC    H'0'                                                             
*                                                                               
ISCCHH2  CLC   0(2,R7),12(R8)                                                   
         BNH   ISCCHH4                                                          
         SR    RE,RE                                                            
         ICM   RE,3,0(R7)                                                       
         SR    R0,R0                                                            
         ICM   R0,3,12(R8)                                                      
         SR    RE,R0                                                            
         LA    R8,14(R8)                                                        
         CLI   0(R8),X'FF'                                                      
         BNE   ISCCHH2                                                          
ISEOF    MVI   P3+1,X'04'          SET EOF                                      
         B     EXCP80              RETURN TO USER                               
*                                                                               
* RE NOW CONTAINS REL TRK FOR THIS XTNT                                         
*                                                                               
ISCCHH4  AH    RE,4(R8)            ADD LOW TRACK                                
         BCTR  RE,0                                                             
         SRDA  RE,32                                                            
         LH    R0,ISTRKS                                                        
         DR    RE,R0               RF HAS CYL, RE HAS TRK                       
         AH    RF,2(R8)            ADD LOW CYL                                  
         MVC   SEEK+6(1),2(R7)     SET REC                                      
ISCCH6   STH   RF,SEEK+2           SET CYL                                      
         STH   RE,SEEK+4           SET TRK                                      
         XC    ISFSEEK,ISFSEEK     SET SEEK ADDR IN DTF (MBBCCHHR)              
         MVC   ISFSEEK(1),1(R8)                                                 
         MVC   ISFSEEK+3(5),SEEK+2                                              
         MVC   ISFUC,0(R8)         SET SEQNUM/DEVTYP IN ISF                     
         MVC   IOB+32(8),ISFSEEK   SET SEEK ADDR IN IOB (MBBCCHHR)              
         L     RE,SAVER                                                         
         BR    RE                  RETURN                                       
         EJECT                                                                  
***********************************************************************         
* CONSTRUCT AN IDAW LIST                                              *         
* NTRY: R1     = START DATA ADDRESS                                   *         
*     : R0     = START DATA LENGTH                                    *         
*                                                                     *         
* NUMBER OF IDAWS NEEDED IS MAX 2K BOUNDARIES CROSSED +1              *         
*   =((DATA LEN - 1)/2048 + 1)+ 1                                     *         
*                                                                     *         
* NOTE: MOST CALLING ROUTINES WILL NOT NEED TO SET THE IDAL FLAG IN   *         
* BIT 37 IF THEY ARE ONLY MODIFYING CCW4 BECAUSE ISBLDCCW SETS IT ON. *         
* CALLER ONLY NEEDS TO SET BIT IF HE IS BUILDING CCW HIMSELF.         *         
***********************************************************************         
         SPACE 1                                                                
SETIDAWS AHI   R0,-1               SUBTRACT 1                                   
         SRL   R0,11               DIVIDE BY 2048                               
         AHI   R0,2                PLUS 2 GIVES MAX BOUNDARIES + 1              
*                                                                               
         LA    RF,IDAWS            POINT TO IDAW LIST                           
SETIDAW2 ST    R1,0(RF)            SET START ADDRESS                            
         AHI   R1,2048             AND THEN GO IN 2048 MULTS                    
         SRL   R1,11                                                            
         SLL   R1,11                                                            
         LA    RF,4(RF)                                                         
         BCT   R0,SETIDAW2                                                      
         BR    RE                                                               
         EJECT                                                                  
***********************************************************************         
* FILE INITIALIZATION ROUTINES                                        *         
*                                                                     *         
* OFFLINE: ACQUIRE PRIME DATA BUFFERS AND SAVE AREAS FOR KEYS         *         
*                                                                     *         
* ONLINE : DATA BUFFERS ARE ACQUIRED BY TASK, NOT BY FILE SO CANT BE  *         
*          DONE HERE                                                  *         
*                                                                     *         
* BOTH   : GETMAIN AN AREA AND BUILD INDEX. WHEN ALL CI RECORDS READ, *         
*          SAVE TTBR OF LAST IN ISCILAST.                             *         
*          THEN FIND LAST OVERFLOW RECORD AND SET ISOVLAST            *         
***********************************************************************         
         SPACE 1                                                                
INIT     LA    RF,ISOPEN           CHECK FOR SPECIAL COMMANDS                   
         C     RF,ISROUTA                                                       
         BE    ISDDS2                                                           
*                                                                               
         LA    RF,ISCLOSE                                                       
         C     RF,ISROUTA                                                       
         BE    ISDDS2                                                           
*                                                                               
         LA    RF,ISCPUID                                                       
         C     RF,ISROUTA                                                       
         BE    ISDDS2                                                           
*                                                                               
         LA    RF,ISOPOLD                                                       
         C     RF,ISROUTA                                                       
         BE    ISDDS2                                                           
*                                                                               
         LA    R1,ISXTNTIX                                                      
         OC    10(2,R1),10(R1)                                                  
         BNZ   *+6                                                              
         DC    H'0'                FILE HAS NOT BEEN OPENED                     
*                                                                               
         OC    12(2,R1),12(R1)                                                  
         BZ    *+6                                                              
         DC    H'0'                FILE HAS BEEN INITIALISED                    
*                                                                               
         MVC   DUB(4),=C'SSET'     SUSPEND TIMER DURING INITIALISATION          
         BAS   RE,GOTICTOC                                                      
         EJECT                                                                  
*=====================================================*                         
* ALLOCATE DATA BUFFERS                               *                         
* NOTE THAT KEY AREAS ARE ALLOCATED BELOW THE LINE    *                         
* BECAUSE THEY ARE REFERENCED BY DATAMGR              *                         
*=====================================================*                         
         SPACE 1                                                                
INIBUF   MVI   ONLINE,C'Y'                                                      
         ICM   R1,15,VSSB          SKIP ALLOCATION IF ONLINE                    
         BZ    INIBUF2                                                          
         OC    0(2,R1),0(R1)                                                    
         BNZ   INIBUFX                                                          
*                                                                               
INIBUF2  MVI   ONLINE,C'N'         SET NOT ON-LINE FLAG                         
         OI    ISCMPRSW,X'20'      SET BEEN THROUGH INIT FLAG                   
*                                                                               
         LH    R0,ISPDLN                                                        
         TM    ISCMPRSW,X'40'      TEST ONE OR TWO BUFFERS                      
         BO    *+6                 FLAG IS ON IF ONLY 1                         
         AR    R0,R0               ELSE DOUBLE LENGTH                           
         GETMAIN RU,LV=(0),LOC=(ANY,ANY)                                        
         LTR   RF,RF                                                            
         BZ    *+6                                                              
         DC    H'0'                                                             
         ST    R1,ISBUFF1                                                       
         AH    R1,ISPDLN                                                        
         TM    ISCMPRSW,X'40'      TEST ONE OR TWO BUFFERS                      
         BO    *+8                                                              
         ST    R1,ISBUFF2          SET ADDR OF SECOND BUFFER                    
         BCTR  R1,0                                                             
         ST    R1,ISBUFF1X                                                      
         EJECT                                                                  
INIBUF10 DS    0H                                                               
         LH    R0,ISKEYLN                                                       
         MH    R0,=H'3'                                                         
         GETMAIN RU,LV=(0)                                                      
         LTR   RF,RF                                                            
         BZ    *+6                                                              
         DC    H'0'                                                             
         ST    R1,ISPDKEY                                                       
         AH    R1,ISKEYLN                                                       
         ST    R1,ISPDPRKY                                                      
         AH    R1,ISKEYLN                                                       
         ST    R1,ISTIHIKY                                                      
INIBUFX  DS    0H                                                               
         EJECT                                                                  
*=========================================================*                     
* SET DEVICE DEPENDENT DATA IN DTF                        *                     
*=========================================================*                     
         SPACE 1                                                                
SETDTF   MVC   ISTRKS,DEVTRKS      SET TRKS/CYL                                 
         SR    R0,R0                                                            
         ICM   R0,3,ISPDLN                                                      
         BAS   R9,SETDTFR          GET PD RECS/TRK                              
         STH   R0,ISHIPD                                                        
*                                                                               
         MH    R0,ISKEYLN          COMPUTE LEN OF TI REC                        
         LH    R1,ISTRKS                                                        
         BCTR  R1,0                                                             
         MR    R0,R0                                                            
         STH   R1,ISTILN           ISTILN=ISHIPD*ISKEYLN*(ISTRKS-1)             
         SRL   R1,1                                                             
         CH    R1,ISPDLN                                                        
         BL    *+6                                                              
         DC    H'0'                BLKSIZE MUST BE GT HALF TISIZE               
*                                                                               
         LH    R0,ISIXLN           COMPUTE LEN OF CI REC                        
         SR    RE,RE                                                            
         SR    RF,RF                                                            
         ICM   RF,3,ISTILN                                                      
         DR    RE,R0                                                            
         MR    RE,R0                                                            
         STH   RF,ISCILN           ISCILN=(ISTILN/ISIXLN)*ISIXLN                
*                                                                               
         SR    R0,R0                                                            
         ICM   R0,3,ISTILN                                                      
         BAS   R9,SETDTFR          GET TI RECS/TRK                              
*                                                                               
         STH   R0,ISHITI                                                        
         SR    R0,R0                                                            
         ICM   R0,3,ISCILN                                                      
         BAS   R9,SETDTFR          GET CI RECS/TRK                              
         STH   R0,ISHICI                                                        
         EJECT                                                                  
*=====================================================*                         
* ALLOCATE EXTENDED IOAREAS IF NECESSARY              *                         
* (NOW THAT BUFFER SIZES ARE FIXED)                   *                         
*=====================================================*                         
         SPACE 1                                                                
         CLI   ONLINE,C'Y'                                                      
         BE    SETDTF10                                                         
         SR    R0,R0                                                            
         ICM   R0,1,ISFBUFFS       TEST EXTENDED IOAREAS REQUESTED              
         BZ    SETDTF10            NO                                           
         LA    R1,ISTILN           LENGTH IS BIGGER OF ISTILN/ISPDLN            
         CLC   ISTILN,ISPDLN                                                    
         BH    *+8                                                              
         LA    R1,ISPDLN                                                        
         MH    R0,0(R1)                                                         
         AH    R0,=AL2((ISXMAX+1)*ISXTBLN)  PLUS ROOM FOR TABLE                 
*                                                                               
         GETMAIN RU,LV=(0),LOC=(ANY,ANY)                                        
         LTR   RF,RF                                                            
         BZ    *+6                                                              
         DC    H'0'                                                             
*                                                                               
         ST    R1,ISFXTAB           SAVE TABLE ADDRESS                          
         USING ISXTABD,R1                                                       
         XC    0(ISXTBLN,R1),0(R1)  CLEAR FIRST ENTRY                           
         LA    R1,ISXTBLN(R1)       AND POINT TO NEXT                           
*                                                                               
         LA    RE,(ISXMAX*ISXTBLN)(R1)  POINT TO FIRST IOAREA                   
         ZIC   RF,ISFBUFFS              GET NUMBER OF IOAREAS                   
         LA    R0,ISXMAX                                                        
         CR    RF,R0                                                            
         BNH   *+6                                                              
         LR    RF,R0                                                            
*                                                                               
         SR    R0,R0                                                            
         ICM   R0,3,ISPDLN                                                      
         CLC   ISPDLN,ISTILN                                                    
         BH    *+8                                                              
         ICM   R0,3,ISTILN                                                      
*                                                                               
SETDTF2  XC    ISXTABD(ISXTBLN),ISXTABD CLEAR THE ENTRY                         
         ST    RE,ISXTBADR               SET IOAREA ADDRESS                     
         AR    RE,R0                     BUMP TO NEXT                           
         LA    R1,ISXTBLN(R1)            POINT TO NEXT TABLE ENTRY              
         BCT   RF,SETDTF2                                                       
         EJECT                                                                  
*========================================================*                      
* ALLOCATE TRACK INDEX BUFFER IF OFFLINE                 *                      
*========================================================*                      
         SPACE 1                                                                
SETDTF10 XC    ISTITRK,ISTITRK                                                  
         XC    ISTIBUFF,ISTIBUFF   MAKE SURE STARTS ZERO                        
         CLI   ONLINE,C'Y'                                                      
         BE    SETDTF12                                                         
         CLI   ISFBUFFS,0          TEST EXTENDED IOAREAS                        
         BNE   SETDTF12            YES - NO TIBUFF NEEDED                       
         LH    R0,ISTILN                                                        
         GETMAIN RU,LV=(0),LOC=(ANY,ANY)                                        
         LTR   RF,RF                                                            
         BZ    *+6                                                              
         DC    H'0'                                                             
         ST    R1,ISTIBUFF                                                      
*                                                                               
SETDTF12 DS    0H                                                               
         B     SETDTFX                                                          
         EJECT                                                                  
*======================================================*                        
* SUBROUTINE COMPUTES RECS/TRK FOR RECLEN IN R0        *                        
*======================================================*                        
         SPACE 1                                                                
SETDTFR  LTR   R0,R0                                                            
         BNZ   *+6                                                              
         DC    H'0'                DIE IF RECLEN IS ZERO                        
         C     R0,=F'32767'                                                     
         BNH   *+6                                                              
         DC    H'0'                DIE IF RECLEN GT 32K                         
         CLI   DEVSUB,5            TEST FOR 3390                                
         BE    SET3390                                                          
         SR    RE,RE                                                            
         SR    RF,RF                                                            
         ICM   RF,3,DEVCAPL                                                     
         OC    DEVMOD,DEVMOD                                                    
         BZ    *+16                                                             
         AH    R0,DEVMOD           ADJUST FOR MODULO                            
         SRL   R0,5                                                             
         SLL   R0,5                                                             
         AH    R0,DEVIRG           ADJUST FOR IRG                               
         DR    RE,R0                                                            
         LTR   R0,RF               RETURN RECS/TRK IN R0                        
         BNZR  R9                                                               
         DC    H'0'                DIE IF RECLEN GT TRACK LEN                   
         SPACE 1                                                                
*========================================================*                      
* 3390 COMPUTATION ROUTINES                              *                      
* DN=(DL+6+231)/232                                      *                      
* D=9+(DL+6*DN)+6+33)/34                                 *                      
* SPACE = 10+D                                           *                      
*========================================================*                      
         SPACE 1                                                                
SET3390  LR    RE,R0               GET RECLEN                                   
         LA    RE,237(RE)          RE=DL+6+231                                  
         SRDL  RE,32                                                            
         D     RE,=F'232'          RF=(DL+237)/232                              
         MH    RF,=H'6'            RF=6*DN                                      
         AR    RF,R0               RF=DL+6*DN                                   
         LA    RF,39(RF)                                                        
         SR    RE,RE                                                            
         D     RE,=F'34'                                                        
         LA    RF,19(RF)           GIVES SPACE REQUIRED IN RF                   
         SR    R0,R0                                                            
         LA    R1,1729             1729 = NUMBER OF CELLS/TRACK                 
         DR    R0,RF               DIVIDE BY SPACE/RECORD                       
         LR    R0,R1               GIVES MAX RECS/TRACK (TRUNCATED)             
         BR    R9                                                               
*                                                                               
SETDTFX  DC    0H'0'                                                            
         EJECT                                                                  
*========================================================*                      
* SPLIT THE EXTENT MATRIX INTO INDEX AND DATA PARTS      *                      
* UNLESS DTF SPECIFIES TYPE = NEW (CONTINUOUS EXTENTS)   *                      
*========================================================*                      
         SPACE 1                                                                
         TM    ISFTYPE,ISFTPDOV    TEST OVERFLOW AT END OF PRIME DATA           
         BZ    INXT0                                                            
         LA    R1,ISXTNT                                                        
         BAS   R9,ISSETHI                                                       
         B     INITC                                                            
*                                                                               
INXT0    LA    R0,MAXXTNTS-1       SET MAX EXTENTS FOR PD                       
         LA    R1,ISXTNTIX+14      POINT TO PD XTNTS                            
         L     RE,ISBUFF1          MOVE AREA                                    
*                                                                               
INXT2    MVC   0(15,RE),0(R1)      MOVE 14 BYTE XTNT + 1                        
         LA    R1,14(R1)                                                        
         LA    RE,14(RE)                                                        
         CLI   0(R1),X'FF'         TEST FOR END                                 
         BE    INXT4                                                            
         BCT   R0,INXT2                                                         
         DC    H'0'                EXTENT MATRIX HAS BEEN CLOBBERED             
*                                                                               
INXT4    MVI   ISXTNTIX+14,X'FF'   SET END FLAG FOR INDEX XTNT                  
         SPACE 1                                                                
*=======================================================*                       
* NOW MOVE PD EXTENT DATA BACK                          *                       
*=======================================================*                       
         LA    R1,ISXTNTPD                                                      
         L     RE,ISBUFF1                                                       
*                                                                               
INXT6    MVC   0(15,R1),0(RE)      MOVE 14 BYTES XTNT + 1                       
         LA    RE,14(RE)                                                        
         LA    R1,14(R1)                                                        
         CLI   0(RE),X'FF'                                                      
         BNE   INXT6                                                            
         EJECT                                                                  
*=======================================================*                       
* SET HI RELTRK IN EACH MATRIX ENTRY                    *                       
*=======================================================*                       
         SPACE 1                                                                
         LA    R1,ISXTNTIX                                                      
         BAS   R9,ISSETHI                                                       
         LA    R1,ISXTNTPD                                                      
         BAS   R9,ISSETHI                                                       
         B     INITC                                                            
         SPACE 2                                                                
ISSETHI  SR    RE,RE                                                            
*                                                                               
ISSETHI2 LH    R7,2(R1)            GET LOW CYL                                  
         MH    R7,ISTRKS           X TRKS/CYL                                   
         AH    R7,4(R1)            ADD LOW TRK                                  
         LH    R8,6(R1)            GET HI CYL                                   
         MH    R8,ISTRKS           X TRKS/CYL                                   
         AH    R8,8(R1)            ADD HI TRK                                   
         SR    R8,R7                                                            
         LA    RE,1(R8,RE)                                                      
         STH   RE,12(R1)                                                        
         LA    R1,14(R1)                                                        
         CLI   0(R1),X'FF'                                                      
         BNE   ISSETHI2                                                         
*                                                                               
         BR    R9                                                               
         EJECT                                                                  
*=======================================================*                       
* BUILD CYLINDER INDEX                                  *                       
* GETMAIN A LARGE AREA, STARTING ON A PAGE BOUNDARY     *                       
* CONSTRUCT INDEX, THEN FREEMAIN EXCESS STORAGE         *                       
*=======================================================*                       
         SPACE 1                                                                
INITC    DS    0H                                                               
         L     R0,MAXCISZ                                                       
         GETMAIN RC,LV=(0),LOC=(ANY,ANY),BNDRY=PAGE                             
         LTR   RF,RF                                                            
         BZ    INITC1                                                           
         WTO   'ISDDS - HIGH STORAGE GETMAIN FAILED'                            
         L     R0,MAXCISZ                                                       
         S     R0,=A(1024*32)      REDUCE REQUEST BY 32K                        
         ST    R0,MAXCISZ                                                       
         BP    INITC               AND TRY AGAIN                                
         DC    H'0'                                                             
*                                                                               
INITC1   ST    R1,ISINDX                                                        
         B     INITC2                                                           
MAXCISZ  DC    A(256*1024)         MAX CI SIZE IS 256K                          
*                                                                               
INITC2   LA    RE,1                READ CYLINDER INDEX RECORDS                  
         SLL   RE,16                                                            
         ST    RE,DUB                                                           
         MVI   DUB+2,1                                                          
         SR    R6,R6               CLEAR SPACE COUNTER                          
*                                                                               
INITC4   LA    R7,DUB                                                           
         LA    R8,ISXTNTIX                                                      
         BAS   RE,ISBLDCCW                                                      
*                                                                               
         MVC   CCW4+6(2),ISCILN    NEED TO BUILD NEW IDAWS                      
         LH    R0,CCW4+6           GET LENGTH                                   
         L     R1,ISBUFF1          AND DATA ADDRESS                             
         BAS   RE,SETIDAWS                                                      
         LA    R0,IDAWS                                                         
         STCM  R0,7,CCW4+1                                                      
*                                                                               
         BAS   RE,INIEXCP                                                       
         BAS   RE,EXCPCHK                                                       
         TM    ERRF+1,X'04'        TEST EOF RECORD                              
         BO    INITCX                                                           
         TM    ERRF+1,X'08'        TEST N/F                                     
         BZ    INITC12                                                          
         LTR   R6,R6               TEST FIRST RECORD                            
         BNZ   INITC12                                                          
         MVC   ISCILAST,DUB                                                     
         B     INITCX              THERE IS NO CYLINDER INDEX                   
*                                                                               
INITC12  LH    R1,ISIXLN           GET INDEX REC LEN                            
         BCTR  R1,0                                                             
         L     RE,ISBUFF1          GET ADDRESS OF REC                           
         LH    RF,ISCILN                                                        
         AR    RE,RF               POINT PAST END                               
         B     INITC16                                                          
*                                                                               
INITC14  SH    RF,ISIXLN           DECREMENT LENGTH                             
*                                                                               
INITC16  SH    RE,ISIXLN           DECREMENT ADDRESS                            
         EX    R1,INITOC           OC 0(0,RE),0(RE)                             
         BZ    INITC14                                                          
*                                                                               
         LR    R1,RE               RE=A(LAST ENTRY), RF=DATA LENGTH             
         AH    R1,ISKEYLN          POINT TO RELTRK IN LAST ENTRY                
         MVC   ISPDLAST(2),0(R1)   SAVE ADDRESS OF LAST TI TRK                  
*                                                                               
         L     R0,ISINDX           GET INDEX START                              
         AR    R0,R6               + LEN GIVES 'TO' ADDRESS                     
         LR    R1,RF               SET 'TO' LEN                                 
         L     RE,ISBUFF1          SET 'FROM' ADDRESS (RF='FROM LEN')           
*                                                                               
         AR    R6,RF               INCREMENT LENGTH                             
         C     R6,MAXCISZ          TEST EXCEEDED MAX CI SIZE                    
         BH    INITERR1                                                         
         MVCL  (R0),(RE)                                                        
*                                                                               
INITC20  MVC   ISCILAST,DUB        SAVE ADDRESS OF LAST CI REC                  
         SR    RE,RE                                                            
         IC    RE,DUB+2                                                         
         LA    RE,1(RE)                                                         
         STC   RE,DUB+2                                                         
         CH    RE,ISHICI                                                        
         BNH   INITC4                                                           
*                                                                               
         LH    RE,DUB              BUMP TO FRST REC ON NEXT TRACK               
         LA    RE,1(RE)                                                         
         SLL   RE,16                                                            
         ST    RE,DUB                                                           
         MVI   DUB+2,1                                                          
         B     INITC4                                                           
*                                                                               
INITOC   OC    0(0,RE),0(RE)                                                    
*                                                                               
INITCX   STH   R6,ISINDXLN                                                      
         C     R6,=F'65536'        TEST LEN FITS IN HALFWORD                    
         BL    INITCX2                                                          
         SRL   R6,3                                                             
         STH   R6,ISINDXLN                                                      
         OI    ISINDXTY,X'02'      SET FLAG FOR SPACE IN DBLWDS                 
         EJECT                                                                  
*============================================================*                  
* NOW CONSTRUCT A TABLE OF THE CYL INDEX ON 4K BOUNDARIES    *                  
* MAP CONTAINS A(LOW KEY ON PAGE) AND HIGH KEY ON PAGE       *                  
*  SO TABLE ENTRIES ARE KEYLEN+4 LONG                        *                  
* WHEN TABLE IS COMPLETE, FREEMAIN UNUSED STORAGE            *                  
*============================================================*                  
         SPACE 1                                                                
INITCX2  L     R5,ISINDX           POINT TO START OF INDEX AREA                 
         SR    R6,R6                                                            
         ICM   R6,3,ISINDXLN       GET LENGTH OF INDEX                          
         TM    ISINDXTY,X'02'      TEST LEN IN DBLWDS                           
         BZ    *+8                                                              
         SLL   R6,3                X 8                                          
         LA    R7,0(R5,R6)         POINT TO END                                 
         LA    R7,4095(R7)         NOW ROUND TO PAGE BNDRY START ADDR           
         SRL   R7,12                                                            
         SLL   R7,12                                                            
         ST    R7,ISINDX           AND SET INDEX TABLE ADDRESS                  
         LH    RE,ISKEYLN          GET KEY LENGTH                               
         LA    RE,4(RE)             +4 FOR ADDRESS                              
         ST    RE,0(R7)            GIVES ENTRY LENGTH                           
         LA    R7,8(R7)            POINT TO FIRST ENTRY                         
*                                                                               
         LR    R0,R5               GET START OF INDEX                           
         SPACE 1                                                                
* NOW INCREMENT THROUGH INDEX TILL ADDRESS > PAGE BOUNDARY IN R0 *              
         SPACE 1                                                                
INITCX4  ST    R5,0(R7)            SET A(FIRST KEY ON PAGE) IN TABLE            
         AH    R0,=H'4096'         SET NEXT PAGE BOUNDARY                       
*                                                                               
INITCX6  CLI   0(R5),X'FF'         TEST END OF INDEX                            
         BE    INITCX10            YES - DONE                                   
         AH    R5,ISIXLN           ADD INDEX RECORD SIZE                        
         CR    R5,R0               TEST PAST PAGE BOUNDARY                      
         BNH   INITCX6             NO                                           
*                                                                               
         SH    R5,ISIXLN           BACK UP TO PREVIOUS                          
         LH    RE,ISKEYLN1         GET KEYLEN - 1                               
         EX    RE,*+8              MOVE HI KEY IN PAGE TO TABLE                 
         B     *+10                                                             
INITCXMV MVC   4(0,R7),0(R5) *EXECUTED*                                         
*                                                                               
         AH    R5,ISIXLN           POINT TO NEXT ENTRY AGAIN                    
         LA    R7,5(RE,R7)         BUMP TABLE POINTER BY KEYLEN + 4             
         B     INITCX4                                                          
*                                                                               
INITCX10 DS    0H                                                               
         LH    RE,ISKEYLN1         GET KEYLEN-1                                 
         EX    RE,INITCXMV         MOVE HI KEY TO TABLE                         
         LA    R7,4(RE,R7)         POINT TO NEW END OF TABLE-1                  
*                                                                               
         L     RE,ISINDX           GET START OF TABLE ADDRESS                   
         ST    R7,4(RE)            AND SET IN TABLE                             
         EJECT                                                                  
*===========================================================*                   
* RETURN UNUSED STORAGE VIA FREEMAIN                        *                   
*===========================================================*                   
         SPACE 1                                                                
         LA    R7,1(R7)            POINT TO END OF TABLE                        
         LA    R7,4095(R7)         ROUND TO PAGE BOUNDARY                       
         SRL   R7,12                                                            
         SLL   R7,12                                                            
         LR    R1,R7               GIVES START OF FREEMAIN                      
*                                                                               
         L     RE,ISINDX           POINT TO START OF TABLE                      
         L     R0,8(RE)            GET A(FIRST PAGE)                            
         A     R0,MAXCISZ          + GETMAIN LENGTH                             
         SR    R0,R1               - FREEMAIN START GIVES LENGTH                
         FREEMAIN RC,A=(1),LV=(0)                                               
         LTR   RF,RF                                                            
         BZ    *+6                                                              
         DC    H'0'                                                             
         EJECT                                                                  
*=======================================================*                       
* OVERFLOW STARTS ON NEXT TRACK                         *                       
*=======================================================*                       
         SPACE 1                                                                
INITOV   MVC   DUB+4(4),DUB        SAVE TRACK ADDRESS OF CI EOF REC             
         LH    RE,DUB              NEXT TRACK IS LOW BOUND OF BINSRCH           
         LA    RE,1(RE)                                                         
         STH   RE,LOARG                                                         
         ICM   RE,3,ISXTNTIX+12    NOW THIS FUCKER CAN FIND EOF WHEN            
         LA    RE,1(RE)            THE FILE IS FULL TOO                         
         STH   RE,HIARG            SET HI TRACK + 1 AS HIGH BOUND               
*                                                                               
         TM    ISFTYPE,ISFTPDOV    TEST OVERFLOW AT END OF PRIME DATA           
         BZ    INITOV10                                                         
*                                                                               
         SR    RF,RF                                                            
         ICM   RF,3,ISPDLAST       GET LAST TRACK WITH DATA                     
         LA    RF,1(RF)            BUMP TO NEXT FUCKING TRACK !                 
         STH   RF,LOARG                                                         
*                                                                               
         LA    R1,ISXTNT                                                        
         XR    RE,RE                                                            
*                                                                               
INITOV02 ICM   RE,3,12(R1)         FIND LAST XTNT ENTRY                         
         STH   RE,HIARG                                                         
         LA    R1,14(R1)                                                        
         CLI   0(R1),X'FF'                                                      
         BNE   INITOV02                                                         
*                                                                               
INITOV04 ICM   RE,3,HIARG          NOW THIS CAN FIND EOF WHEN                   
         LA    RE,1(RE)            THE FILE IS FULL TOO                         
         STH   RE,HIARG            SET HI TRACK + 1 AS HIGH                     
*                                                                               
INITOV10 XR    R0,R0                                                            
         ICM   R0,3,LOARG                                                       
         XR    RE,RE                                                            
         ICM   RE,3,HIARG                                                       
         AR    R0,RE                                                            
         SRL   R0,1                R0 = MIDPOINT TRACK                          
         STH   R0,CURARG                                                        
         CLC   LOARG,CURARG        WHEN LOARG=CURARG, WE'VE FOUND TRACK         
         BE    INITOV14                                                         
*                                                                               
         MVI   CURARG+2,1          LOOK AT FIRST RECORD ON TRACK                
         LA    R7,CURARG                                                        
         LA    R8,ISXTNTIX                                                      
         TM    ISFTYPE,ISFTPDOV    TEST OVERFLOW AT END OF PRIME DATA           
         BO    INITOV12                                                         
         CLC   CURARG(2),12(R8)    TEST BEYOND INDEX XTNT                       
         BH    INITOV14                                                         
*                                                                               
INITOV12 BAS   RE,ISBLDCCW                                                      
*                                                                               
         BAS   RE,INIEXCP                                                       
         BAS   RE,EXCPCHK                                                       
         LA    RE,LOARG            IF DATA, SET LOARG=CURARG                    
         TM    ERRF+1,X'08'        TEST NOT FOUND                               
         BZ    *+8                 RECORD WAS FOUND                             
         LA    RE,HIARG                                                         
         MVC   0(2,RE),CURARG                                                   
         B     INITOV10                                                         
*                                                                               
INITOV14 XC    DUB(4),DUB                                                       
         MVC   DUB(2),CURARG                                                    
*                                                                               
INITOV16 SR    RE,RE                                                            
         IC    RE,DUB+2            ADD 1 TO REC                                 
         LA    RE,1(RE)                                                         
         STC   RE,DUB+2                                                         
         CH    RE,ISHIPD           TEST GT HI REC                               
         BH    INITOV22            YES - SET REC 0 NEXT TRK                     
*                                                                               
INITOV18 LA    R7,DUB                                                           
         LA    R8,ISXTNTIX                                                      
         BAS   RE,ISBLDCCW                                                      
*                                                                               
         BAS   RE,INIEXCP                                                       
         BAS   RE,EXCPCHK                                                       
         TM    ERRF+1,X'08'        TEST NOT FOUND                               
         BNO   INITOV16                                                         
*                                                                               
INITOV20 IC    RE,DUB+2            SET PREVIOUS REC- THIS TRK                   
         BCTR  RE,0                                                             
         STC   RE,DUB+2                                                         
         B     INITOVX                                                          
*                                                                               
INITOV22 LH    RE,DUB              SET REC 0 OF NEXT TRK                        
         LA    RE,1(RE)                                                         
         SLL   RE,16                                                            
         ST    RE,DUB                                                           
*                                                                               
INITOVX  MVC   ISOVLAST,DUB                                                     
         XC    ISPDDA(12),ISPDDA   SET BUFFER CONTENTS NOT VALID                
         MVC   DUB(4),=C'RSET'     RESTART TIMER AT END OF INITIALISE           
         BAS   RE,GOTICTOC                                                      
INITOVXX B     ISDDS2                                                           
*                                                                               
INITERR1 OI    ISINDXTY,X'81'      SET SWITCHED FROM CYL TO MST INDEX           
         B     INITC               GO TRY AGAIN                                 
*                                                                               
INITERR2 XC    ISCILAST,ISCILAST   SET NOT INITIALISED                          
         MVC   DUB(4),=C'RSET'     RESTART TIMER AT END OF INITIALISE           
         BAS   RE,GOTICTOC                                                      
INITER2X DC    H'0'                INSUFFICIENT MI BUFFER SPACE                 
         SPACE 2                                                                
GOTICTOC ICM   RF,15,VTICTOC                                                    
         BZR   RE                                                               
         LR    R0,RE                                                            
         LA    R1,DUB                                                           
         BASSM RE,RF               CALL TICTOC IN APPROPRIATE MODE              
         LR    RE,R0                                                            
         O     RE,=X'80000000'                                                  
         BSM   R0,RE               BACK TO CALLER IN 31-BIT MODE                
         EJECT                                                                  
*=======================================================*                       
* OPEN A FILE                                           *                       
*=======================================================*                       
         SPACE 1                                                                
ISOPOLD  MVI   BYTE,255            FLAG OPEN DISP=OLD                           
         B     *+8                                                              
ISOPEN   MVI   BYTE,0                                                           
*                                  CALL ISOPEN AT INDIRECT ADDRESS              
         BRAS  RE,AISOPEN                                                       
         B     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* CLOSE A FILE                                                        *         
***********************************************************************         
         SPACE 1                                                                
ISCLOSE  BRAS  RE,AISCLOSE         CALL ISCLOSE AT INDIRECT ADDRESS             
         B     EXIT                                                             
         EJECT                                                                  
*=======================================================*                       
* EXECUTE CHANNEL PROGRAM                               *                       
*=======================================================*                       
         SPACE 1                                                                
EXCP     ST    RE,SAVER                                                         
*                                                                               
         LA    R0,CCW1                                                          
         ST    R0,IOB+16                                                        
         CLI   RPSSW,0             INSERT RPS CCW IF ACTIVE                     
         BE    EXCP10                                                           
         LA    R0,CCW0                                                          
         ST    R0,IOB+16                                                        
         MVC   CCW0,CCW1                                                        
         XC    CCW1,CCW1                                                        
         LA    R0,SECTOR                                                        
         ST    R0,CCW1                                                          
         MVI   CCW1,X'23'          SET OPCD = SET SECTOR                        
         MVI   CCW1+4,X'40'        SET CC                                       
         MVI   CCW1+7,1            SET LEN=1                                    
         MVI   RPSSW,0                                                          
*                                                                               
EXCP10   L     RF,IOB+16           REMOVE LONG SEEK IF PRESENT                  
         CLI   0(RF),X'07'                                                      
         BNE   EXCP12                                                           
         LA    RF,8(RF)                                                         
         ST    RF,IOB+16                                                        
*                                                                               
EXCP12   DS    0H                                                               
         CLI   CCW4,6              TEST READ DATA                               
         BNE   EXCP14                                                           
         TM    ISFXTAB,X'80'       TEST EXTENDED BUFFERS DISABLED               
         BO    EXCP14              YES - HAD TOO MANY MISSES                    
         OC    ISFXTAB,ISFXTAB     TEST EXTENDED BUFFERS IN USE                 
         BZ    EXCP14                                                           
         BRAS  RE,ISX                                                           
         BNE   EXCP14              IF CC NEQ, DID NOT FIND RECORD               
         L     RE,SAVER                                                         
         BR    RE                                                               
*                                                                               
EXCP14   XC    ECB,ECB             EXECUTE CHANNEL PROGRAM                      
         EXCP  IOB                                                              
         LA    R1,ECB                                                           
         ICM   RF,15,VADWAIT                                                    
         BZ    EXCPWAIT                                                         
         BASSM RE,RF               BRANCH AND SET TO 24-BIT MODE                
         L     RE,=A(EXCPWAIT)     THANKS ZIEGLER - YOU FUCKHEAD                
         O     RE,=X'80000000'     SET ADDRESSING MODE                          
         BSM   0,RE                THEN GET BACK TO 31-BIT MODE                 
EXCPWAIT WAIT  ECB=(1)                                                          
         B     EXCP2                                                            
*                                                                               
EXCPCHK  ST    RE,SAVER                                                         
         SR    R0,R0                                                            
*                                                                               
EXCP2    XC    ERRF,ERRF                                                        
         CLI   IOB+4,X'7F'         TEST NORMAL COMPLETION                       
         BE    EXCP60                                                           
         CLI   IOB+4,X'41'         TEST PERMANENT ERROR                         
         BE    EXCP20                                                           
         CLI   IOB+4,X'42'         TEST OUTSIDE EXTENTS                         
         BE    EXCP50                                                           
         DC    H'0'                DIE IF HORRIBLE COMPLETION CODE              
*                                                                               
EXCP20   TM    IOB+12,X'02'        TEST CSW UNIT STAT FOR UNIT CHECK            
         BO    EXCP30                                                           
         TM    IOB+12,X'01'        TEST CSW UNIT STAT FOR UNIT EXCPN            
         BZ    EXCP22                                                           
         MVI   ERRF+1,X'04'        SET EOF                                      
         B     EXCP60                                                           
*                                                                               
EXCP22   TM    IOB+12,X'FF'        TEST CSW UNIT STAT                           
         BZ    *+6                                                              
         DC    H'0'                                                             
         TM    IOB+13,X'FF'        TEST CSW CHNL STAT                           
         BZ    EXCP30                                                           
         MVI   ERRF,X'80'          SET UNRECOVERABLE ERROR                      
         B     EXCP60                                                           
*                                                                               
EXCP30   TM    IOB+2,X'04'         TEST SENSE BYTE 0 ON UNIT CHECK              
         BO    EXCP40                                                           
         CLI   IOB+2,0                                                          
         BNE   EXCP40                                                           
*                                                                               
EXCP32   TM    IOB+3,X'08'         TEST SENSE BYTE 1 ON UNIT CHECK              
         BO    EXCP34                                                           
         B     EXCP40              UNRECOVERABLE ERROR                          
EXCP34   MVI   ERRF+1,X'08'        SET NO RECORD FOUND                          
         B     EXCP60                                                           
*                                                                               
EXCP40   MVI   ERRF,X'80'          SET UNRECOVERABLE ERROR                      
         B     EXCP60                                                           
*                                                                               
EXCP50   MVI   ERRF,X'01'          SET REFERENCE OUTSIDE EXTENTS                
         B     EXCP60                                                           
*                                                                               
EXCP60   L     RE,SAVER            RETURN TO CALLER IF EXCP CHECK               
         LTR   R0,R0                                                            
         BNZ   *+12                                                             
         OC    ERRF,ERRF                                                        
         BR    RE                                                               
         OC    P3(2),ERRF          SET ERROR BITS AND EXIT IF ERROR             
         BZR   RE                                                               
*                                                                               
EXCP70   CLI   CCW4,X'5E'          TEST ERROR ON FULL TRK READ                  
         BNE   EXCP80              NO - PASS IT ON                              
         MVI   P6,0                SUPPRESS FOR RETRY                           
         XC    P3(2),P3            CLEAR ERROR FLAG                             
         LTR   RB,RB               SET CC NEQ                                   
         BR    RE                  AND RETURN ERROR TO CALLER                   
*                                                                               
EXCP80   XC    ISPDDA(8),ISPDDA    SET BUFF CONTENTS NOT VALID                  
         XC    ISPDPTR,ISPDPTR     CLEAR SEQ READ POINTER                       
         ICM   R1,15,ISFXTAB       TEST FOR EXTENDED BUFFERS                    
         BZ    EXIT                                                             
         XC    0(ISXTBLN,R1),0(R1)                                              
         B     EXIT                EXIT MODULE                                  
         EJECT                                                                  
*                                                                               
         EJECT                                                                  
INIEXCP  ST    RE,SAVER                                                         
         L     RF,IOB+16           REMOVE LONG SEEK IF PRESENT                  
         CLI   0(RF),X'07'                                                      
         BNE   *+12                                                             
         LA    RF,8(RF)                                                         
         ST    RF,IOB+16                                                        
         XC    ECB,ECB                                                          
         EXCP  IOB                                                              
         WAIT  ECB=ECB                                                          
         L     RE,SAVER                                                         
         BR    RE                                                               
         EJECT                                                                  
***********************************************************************         
* LITERALS / EQUATES                                                  *         
***********************************************************************         
         SPACE 1                                                                
VARIABLE EQU   X'80'               ISCMPRSW FLAG FOR V/L RECORDS                
MAXXTNTS EQU   16                  MAX NUM OF EXTENTS                           
*                                                                               
         LTORG                                                                  
         EJECT                                                                  
***********************************************************************         
* CONSTANTS                                                           *         
***********************************************************************         
         SPACE 1                                                                
VSSB     DC    V(SSB)                                                           
VTICTOC  DC    V(TICTOC)                                                        
VADWAIT  DC    V(ADWAIT)                                                        
*                                                                               
ISROUTS  DC    A(0)                00                                           
         DC    A(ISREAD)           01                                           
         DC    A(ISRDSEQ)          02                                           
         DC    A(ISADD)            03                                           
         DC    A(ISERASE)          04                                           
         DC    A(ISWRITE)          05                                           
         DC    A(ISCPUID)          06                                           
         DC    A(ISFNDEOF)         07                                           
         DC    A(ISOPEN)           08                                           
         DC    A(ISCLOSE)          09                                           
         DC    A(ISOPOLD)          0A                                           
         DC    A(ISRDFLS)          0B                                           
         DC    A(ISRSFLS)          0C                                           
         DC    20A(0)              0D-1F                                        
*                                                                               
ONLINE   DC    X'00'               SET TO C'Y' IF ONLINE                        
SYSID    DC    X'00'               SET TO FACPAK ID NUM IF ONLINE               
BLKINDEX DC    XL4'FFFFFFFF'       PD BLOCK INDEX INDICATOR IN LINK             
MAXIOL   DC    X'FFFF'                                                          
         EJECT                                                                  
*                                                                               
*        INDIRECT ADDRESSABILITY STARTS HERE                                    
*                                                                               
*                                                                               
* DEVICE PHYSICAL CHARACTERISTICS                                               
*                                                                               
* X DEVICE TYPE - 1=CKD,2=RBA                                                   
* X DEVICE SUB TYPE - 1=3340,2=3350,3=3375,4=3380,5=3390                        
* H DEVICE TRACKS PER CYLINDER                                                  
* H DEVICE INTER RECORD GAP                                                     
* H DEVICE TRACK CAPACITY LOGICAL                                               
* H DEVICE TRACK CAPACITY PHYSICAL                                              
* H DEVICE RECORD ZERO OVERHEAD                                                 
* H DEVICE SECTORS PER TRACK                                                    
* H DEVICE MODULUS FACTOR                                                       
*                                                                               
DEVCODE  DS    0XL3                XL1=DOS,XL1=MVS,XL1=INTERNAL                 
         DC    X'080A01'           3340                                         
         DC    X'070B02'           3350                                         
         DC    X'0B0C03'           3375                                         
         DC    X'0C0E04'           3380                                         
         DC    X'0F0F05'           3390                                         
         DC    X'00',0H'0'                                                      
*                                                                               
DEVDISK  DS    0XL16                                                            
DEV3340  DC    X'0101',AL2(12,167,08535,08960,0293,064,000)                     
DEV3350  DC    X'0102',AL2(30,185,19254,19964,0389,128,000)                     
DEV3375  DC    X'0103',AL2(12,384,36000,36992,0992,196,031)                     
DEV3380  DC    X'0104',AL2(15,480,47968,49056,1088,221,043)                     
DEV3390  DC    X'0105',AL2(15,000,00000,00000,0000,224,000)                     
DEV3370  DC    X'0201',AL2(32,000,16384,16384,0000,000,000)                     
         EJECT                                                                  
***********************************************************************         
* ROUTINE TO OBTAIN STORAGE                                           *         
* NTRY: R0     = L'STORAGE TO OBTAIN                                  *         
*       GMFLAG = PARAMETERS TO DRIVE TYPE OF GETMAIN                  *         
***********************************************************************         
         SPACE 1                                                                
GETMAIN  NTR1  BASE=*,LABEL=*                                                   
         LA    R1,GMFTAB           MATCH SUPPORTED GETMAIN TYPES                
         LA    RF,4                                                             
         XR    RE,RE                                                            
*                                                                               
GETM02   CLI   0(R1),255                                                        
         BNE   *+6                                                              
         DC    H'0'                                                             
         CLC   GMFLAG,0(R1)                                                     
         BE    GETM04                                                           
         BXH   R1,RF,GETM02                                                     
*                                                                               
GETM04   ICM   RF,7,1(R1)                                                       
         BNZR  RF                                                               
         DC    H'0'                                                             
*                                  UNCONDITIONAL/LOW/DBLWD                      
GMLO     GETMAIN RU,LV=(0),BNDRY=DBLWD                                          
         LTR   RF,RF                                                            
         BZ    GETMAINX                                                         
         DC    H'0'                                                             
*                                  UNCONDITIONAL/HIGH/DBLWD                     
GMHI     GETMAIN RU,LV=(0),LOC=(ANY,ANY),BNDRY=DBLWD                            
         LTR   RF,RF                                                            
         BZ    GETMAINX                                                         
         DC    H'0'                                                             
*                                                                               
GMHIPC   GETMAIN RC,LV=(0),LOC=(ANY,ANY),BNDRY=PAGE                             
         B     GETMAINX                                                         
*                                                                               
GETMAINX XIT1  REGS=(RF,R1)                                                     
*                                                                               
GMFTAB   DS    0XL4                                                             
         DC    AL1(GMFHI+GMFPG+GMFCD),AL3(GMHIPC)                               
         DC    AL1(GMFHI+GMFPG),AL3(0)                                          
         DC    AL1(GMFHI+GMFCD),AL3(0)                                          
         DC    AL1(GMFPG+GMFCD),AL3(0)                                          
         DC    AL1(GMFHI),AL3(GMHI)                                             
         DC    AL1(GMFCD),AL3(0)                                                
         DC    AL1(GMFPG),AL3(0)                                                
         DC    AL1(0),AL3(GMLO)                                                 
         DC    AL1(255)                                                         
         EJECT                                                                  
***********************************************************************         
* GETMAIN FAILURE INFORMATION MESSAGE                                 *         
***********************************************************************         
         SPACE 1                                                                
GMFWTO   NTR1  ,                                                                
         ST    R0,FULL                                                          
         BAS   RE,CVDA                                                          
         MVC   GMFR0,MYWORK                                                     
         ST    R1,FULL                                                          
         BAS   RE,CVDA                                                          
         MVC   GMFR1,MYWORK                                                     
         ST    RF,FULL                                                          
         BAS   RE,CVDA                                                          
         MVC   GMFRF,MYWORK                                                     
         L     RF,=A(MAXCISZ)                                                   
         MVC   FULL,0(RF)                                                       
         BAS   RE,CVDA                                                          
         MVC   GMFLEN,MYWORK                                                    
*                                                                               
         XR    R0,R0                                                            
         WTO   TEXT=((GMFHL,C),(GMFM1L,D),(GMFM2L,D),(0,E))                     
         J     RTNXIT                                                           
*                                                                               
GMFMALL  DS    0D                                                               
GMFHL    DC    AL2(25)                                                          
GMFH     DC    CL25'ISDDS GETMAIN FAILURE'                                      
GMFM1L   DC    AL2(70)                                                          
         DC    CL48'HIGH STORAGE GETMAIN FAILURE - LENGTH REQUESTED='           
GMFLEN   DC    CL08'        '                                                   
         DC    CL14' HEX'                                                       
GMFM2L   DC    AL2(61)                                                          
         DC    CL03'R0='                                                        
GMFR0    DC    CL08'        '                                                   
         DC    CL05', R1='                                                      
GMFR1    DC    CL08'        '                                                   
         DC    CL05', RF='                                                      
GMFRF    DC    CL08'        '                                                   
         DC    CL24' ATTEMPTING TO CONTINUE'                                    
         EJECT                                                                  
***********************************************************************         
* CONVERT HEX VALUE IN FULL TO EBCDIC IN MYWORK(8) SAFELY             *         
***********************************************************************         
         SPACE 1                                                                
CVDA     NTR1  ,                                                                
         ICM   R0,15,FULL                                                       
         SRDL  R0,4                                                             
         SRL   R1,32-4                                                          
         LA    R1,HEXTAB(R1)                                                    
         MVC   MYWORK+7(1),0(R1)                                                
         SRDL  R0,4                                                             
         SRL   R1,32-4                                                          
         LA    R1,HEXTAB(R1)                                                    
         MVC   MYWORK+6(1),0(R1)                                                
         SRDL  R0,4                                                             
         SRL   R1,32-4                                                          
         LA    R1,HEXTAB(R1)                                                    
         MVC   MYWORK+5(1),0(R1)                                                
         SRDL  R0,4                                                             
         SRL   R1,32-4                                                          
         LA    R1,HEXTAB(R1)                                                    
         MVC   MYWORK+4(1),0(R1)                                                
         SRDL  R0,4                                                             
         SRL   R1,32-4                                                          
         LA    R1,HEXTAB(R1)                                                    
         MVC   MYWORK+3(1),0(R1)                                                
         SRDL  R0,4                                                             
         SRL   R1,32-4                                                          
         LA    R1,HEXTAB(R1)                                                    
         MVC   MYWORK+2(1),0(R1)                                                
         SRDL  R0,4                                                             
         SRL   R1,32-4                                                          
         LA    R1,HEXTAB(R1)                                                    
         MVC   MYWORK+1(1),0(R1)                                                
         SRDL  R0,4                                                             
         SRL   R1,32-4                                                          
         LA    R1,HEXTAB(R1)                                                    
         MVC   MYWORK(1),0(R1)                                                  
         J     RTNXIT                                                           
*                                                                               
HEXTAB   DC    CL16'0123456789ABCDEF'                                           
*                                                                               
         LTORG                                                                  
         EJECT                                                                  
***********************************************************************         
* INSERT NEW PD BLOCK INDEX ENTRY                                     *         
* NTRY: R3 POINTS TO D/A:KEY COMBO TO ADD                             *         
***********************************************************************         
         SPACE 1                                                                
INSBI    NTR1  BASE=*,LABEL=*                                                   
         ICM   RF,15,0(R3)                                                      
         BNZ   *+6                                                              
         DC    H'0'                                                             
*                                                                               
         L     R4,ISBUFF1                                                       
         XR    R0,R0                                                            
         ICM   R0,3,0(R4)          SET UPPER BOUND FOR SEARCH                   
         AR    R0,R4               R0=A(END OF BLOCK)                           
*                                                                               
         LR    RE,R0               CHECK ROOM IN FOR NEW INDEX ENTRY            
         AH    RE,ISKEYLN          IN CURRENT BLOCK INDEX BUFFER                
         AHI   RE,4                                                             
         LR    RF,R4                                                            
         AH    RF,ISPDLN                                                        
         CR    RE,RF                                                            
         BH    INBI12              THIS BLOCK IS FULL - SHOULD SPLIT IT         
*                                                                               
         AHI   R4,6                R4=A(FIRST INDEX ENTRY)                      
         LH    R5,ISKEYLN1                                                      
*                                                                               
INBI02   ICM   RF,15,0(R4)         SEARCH THROUGH PD BLOCK INDEX                
         BNZ   *+6                                                              
         DC    H'0'                D/A IS ZERO - THAT ISNT RIGHT                
*                                                                               
         EX    R5,INBICLC          CLC 0(0,R3),0(R4)                            
         BE    INBI06              DUPLICATE INDEX ENTRY OVERWRITE              
         BL    INBI08              INSERT HIGH KEY ENTRY POINT FOUND            
*                                                                               
         LA    R4,5(R5,R4)         BUMP TO NEXT ENTRY                           
         CR    R4,R0               TEST UPPER BOUND FOR SEARCH                  
         BL    INBI02                                                           
         B     INBI04              ADD ENTRY AT END OF BLOCK                    
*                                                                               
INBICLC  CLC   4(0,R3),4(R4)                                                    
         EJECT                                                                  
***********************************************************************         
* INSERT NEW KEY AND D/A AT END OF BLOCK                              *         
***********************************************************************         
         SPACE 1                                                                
INBI04   ICM   RF,15,0(R4)         TEST AFTER LAST ENTRY                        
         BZ    *+6                                                              
         DC    H'0'                ANOTHER ENTRY - THAT ISNT RIGHT              
*                                                                               
         EX    R5,*+4                                                           
         MVC   4(0,R4),4(R3)       THEN MOVE IN KEY                             
         MVC   0(4,R4),0(R3)       SET D/A AS FIRST 4 BYTES                     
*                                                                               
         L     RF,ISBUFF1                                                       
         LH    RE,0(RF)            GET OLD LENGTH USED                          
         AHI   RE,4                4 FOR D/A                                    
         AH    RE,ISKEYLN          PLUS L'KEY                                   
         STH   RE,0(RF)            UPDATE LENGTH OF BLOCK USED                  
         B     INBIX                                                            
         EJECT                                                                  
***********************************************************************         
* DUPLICATE INDEX ENTRY FOUND - OVERWRITE WITH CURRENT VALUE          *         
***********************************************************************         
         SPACE 1                                                                
INBI06   EX    R5,*+4                                                           
         MVC   4(0,R4),4(R3)       MOVE IN KEY                                  
         MVC   0(4,R4),0(R3)       SET D/A AS FIRST 4 BYTES                     
*                                                                               
         L     RF,ISBUFF1                                                       
         LH    RE,0(RF)            GET OLD LENGTH USED                          
         AHI   RE,4                4 FOR D/A                                    
         AH    RE,ISKEYLN          PLUS L'KEY                                   
         STH   RE,0(RF)            UPDATE LENGTH OF BLOCK USED                  
         B     INBIX                                                            
         EJECT                                                                  
***********************************************************************         
* INSERT NEW KEY ENTRY AT (R4)                                        *         
***********************************************************************         
         SPACE 1                                                                
INBI08   LA    R1,4                                                             
         AH    R1,ISKEYLN          R1=L'SLOT                                    
         LR    R5,R1                                                            
         BCTR  R5,0                R5=EXECUTED MOVE LENGTH                      
*                                                                               
         LR    RF,R0               RF=A(FIRST EMPTY SPACE IN BLOCK)             
         LR    RE,R0                                                            
         SR    RE,R1               RE=A(LAST ENTRY IN BLOCK)                    
         CR    R4,RE                                                            
         BNH   *+6                                                              
         DC    H'0'                                                             
*                                                                               
INBI10   EX    R5,*+4              SHUFFLE ENTRIES 1 SLOT TO RIGHT              
         MVC   0(0,RF),0(RE)                                                    
         SR    RF,R1                                                            
         SR    RE,R1               BACK UP 1 SLOT                               
*                                                                               
         CR    RF,R4               UNTIL REACHED INSERTION POINT                
         BH    INBI10                                                           
*                                                                               
         LH    R5,ISKEYLN1                                                      
         EX    R5,*+4                                                           
         MVC   4(0,R4),4(R3)       MOVE IN KEY                                  
         MVC   0(4,R4),0(R3)       SET D/A AS FIRST 4 BYTES                     
*                                                                               
         L     RF,ISBUFF1                                                       
         LH    RE,0(RF)            GET OLD LENGTH USED                          
         AHI   RE,4                4 FOR D/A                                    
         AH    RE,ISKEYLN          PLUS L'KEY                                   
         STH   RE,0(RF)            UPDATE LENGTH OF BLOCK USED                  
         B     INBIX                                                            
         EJECT                                                                  
***********************************************************************         
* CASE WHERE BLOCK IS FULL - NEED TO SPLIT BLKIND BLOCK               *         
***********************************************************************         
         SPACE 1                                                                
INBI12   DS    0H                                                               
         WTO   '*FACPAK* DMISDDS BLOCK INDEX FULL',MCSFLAG=HRDCPY               
         DC    H'0'                                                             
*                                                                               
INBIX    J     RTNXIT                                                           
*                                                                               
         LTORG                                                                  
         EJECT                                                                  
***********************************************************************         
* ERASE OLD PD BLOCK INDEX ENTRY                                      *         
***********************************************************************         
         SPACE 1                                                                
ERSBI    NTR1  BASE=*                                                           
         L     R4,ISBUFF1                                                       
         XR    R0,R0                                                            
         ICM   R0,3,0(R4)                                                       
         AR    R0,R4               R0=A(END OF BLOCK)                           
*                                                                               
         LA    R4,6(R4)            R4=A(FIRST INDEX ENTRY)                      
         LH    RF,ISKEYLN                                                       
         AHI   RF,4                RF=LENGTH OF INDEX ENTRY                     
*                                                                               
ERBI02   CR    R4,R0               WITHIN BOUNDS?                               
         BNL   ERBIX               NO                                           
         OC    0(4,R4),0(R4)       EMPTY SLOT?                                  
         BZ    ERBIX               YES - REALLY AN ERROR CONDITION              
         CLC   DEADBLKA,0(R4)                                                   
         BE    ERBI04              DEAD BLOCK ENTRY FOUND                       
         AR    R4,RF                                                            
         B     ERBI02                                                           
*                                                                               
ERBI04   LA    RE,0(RF,R4)         RE=A(NEXT SLOT)                              
         LR    RF,R0                                                            
         SR    RF,RE               RF=LENGTH TO END                             
         LR    R0,R4                                                            
         LR    R1,RF                                                            
         MVCL  R0,RE               MOVE UP AND EMPTY LAST SLOT                  
*                                                                               
         L     RF,ISBUFF1          UPDATE INDEX BUFFER DATA LENGTH              
         LH    RE,0(RF)                                                         
         SH    RE,ISKEYLN                                                       
         AHI   RE,-4                                                            
         STH   RE,0(RF)                                                         
*                                                                               
ERBIX    J     RTNXIT              EXIT TO WRITE UPDATED BLOCK INDEX            
*                                                                               
         LTORG                                                                  
         EJECT                                                                  
*========================================================*                      
* ISOPEN INDIRECT ADDRESS ROUTINE                        *                      
*========================================================*                      
         SPACE 1                                                                
AISOPEN  NTR1  BASE=*                                                           
         OC    ISCILAST,ISCILAST                                                
         BNZ   ISOPENX                                                          
         TM    ISFOPEN,X'20'                                                    
         BO    ISOPENX                                                          
*                                                                               
ISOPEN2  SR    R4,R4                                                            
         ICM   R4,7,ISFADCB+1      PICK UP 3 BYTE ADDRESS OF DCB                
         MVC   40(7,R4),ISFFID     SET FILE ID IN DCB DDNAME                    
         MVI   47(R4),C' '                                                      
         CLI   ISFFIDX,C' '                                                     
         BNH   *+10                                                             
         MVC   47(1,R4),ISFFIDX                                                 
*                                                                               
         BRAS  RE,ALLOC            ALLOCATE DD CARD                             
*                                                                               
         OPEN  ((4),INOUT)                                                      
         TM    48(R4),X'10'        TEST VALID OPEN                              
         BO    ISOPEN10                                                         
         ABEND 991,DUMP            ABEND FOR OPEN FAILURE                       
         EJECT                                                                  
ISOPEN10 LR    R1,R4               FIX DEBS TO MACRF=EXCP                       
         SVC   252                                                              
         MVI   42(R4),X'D0'        CHANGE MACRF BYTES TO EXCP                   
         MVI   43(R4),X'04'        IN OPENED FOUNDATION BLOCK                   
         OI    ISFOPEN,X'22'       SET FILE OPEN/PREV OPEN                      
*                                                                               
         LA    R4,ISXTNTIX         R4=A(EXTENT MATRIX ENTRY)                    
         SR    RE,RE                                                            
         ICM   RE,7,ISFADCB+1                                                   
         L     RE,44(RE)           GET DEB ADR FROM DCB                         
         SR    R1,R1                                                            
         ICM   R1,1,16(RE)         R1=NUMBER OF EXTENTS IN DEB                  
         BNZ   *+6                                                              
         DC    H'0'                NO EXTENTS IN DEB                            
         SR    R5,R5                                                            
         ICM   R5,1,ISFXTNTS       GET NUM OF EXTENTS DEFINED IN DTF            
         BNZ   *+8                                                              
         LA    R5,MAXXTNTS                                                      
         CR    R1,R5                                                            
         BNH   *+6                                                              
         DC    H'0'                TOO MANY EXTENTS                             
         LA    R5,32(RE)           R5=A(DEB MATRIX ENTRY)                       
         SR    R6,R6               R6=EXTENT SEQUENCE NUMBER                    
*                                                                               
ISOPEN20 XC    0(14,R4),0(R4)                                                   
         SR    RE,RE                                                            
         ICM   RE,7,1(R5)                                                       
         MVC   0(1,R4),19(RE)      SET MVS DEVICE TYPE FROM UCB                 
         STC   R6,1(R4)            SET EXTENT SEQUENCE NUMBER                   
         MVC   2(8,R4),6(R5)       SET CCHH LOW AND CCHH HIGH                   
         MVC   10(2,R4),4(RE)      SET CHAN/UNIT FROM UCB                       
*                                                                               
         L     RE,=A(DEVCODE)                                                   
ISOPEN22 CLI   0(RE),0                                                          
         BNE   *+6                                                              
         DC    H'0'                UNKNOWN DEVICE CODE                          
         CLC   1(1,RE),0(R4)       TEST MVS CODE WITH TABLE ENTRY               
         BE    *+12                                                             
         LA    RE,3(RE)                                                         
         B     ISOPEN22                                                         
         MVC   0(1,R4),2(RE)       SET INT DEVICE TYPE CODE FROM TABLE          
         EJECT                                                                  
ISOPEN24 SR    RF,RF               SET DEVICE DATA IN DTF                       
         IC    RF,2(RE)                                                         
         BCTR  RF,0                                                             
         SLL   RF,4                                                             
         L     RE,=A(DEVDISK)                                                   
         AR    RF,RE                                                            
         LTR   R6,R6                                                            
         BNZ   ISOPEN26                                                         
         MVC   ISFDEVF(2),0(RF)    SET INTERNAL DEV FLAG AND TYPE               
         MVI   ISF+2,X'00'         SET DTF AVAIL (X'80' MEANS BUSY)             
         OI    ISF+0,X'40'                                                      
ISOPEN26 MVC   DEVDATA,0(RF)                                                    
         LH    R3,DEVTRKS                                                       
         BCTR  R3,0                R3=TRKS/CYL-1                                
         OC    4(2,R4),4(R4)                                                    
         BNZ   *+12                                                             
         CH    R3,8(R4)                                                         
         BE    *+8                                                              
         OI    ISFDEVF,X'04'       SET EXTENTS NOT ON CYL BOUNDRYS              
*                                                                               
ISOPEN28 CLC   0(1,R4),ISFDEVT     TEST FOR MIXED EXTENTS                       
         BE    ISOPEN30                                                         
         OI    ISFDEVF,X'08'                                                    
*                                                                               
ISOPEN30 LA    R4,14(R4)           BUMP TO NEXT EXTENT                          
         LA    R5,16(R5)                                                        
         LA    R6,1(R6)                                                         
         BCT   R1,ISOPEN20                                                      
*                                                                               
         MVI   0(R4),X'FF'         SET END OF EXTENTS                           
         SPACE 1                                                                
ISOPENX  J     RTNXIT                                                           
*                                                                               
         LTORG                                                                  
         EJECT                                                                  
*========================================================*                      
* ISCLOSE INDIRECT ADDRESS ROUTINE                       *                      
*========================================================*                      
         SPACE 1                                                                
AISCLOSE NTR1  BASE=*                                                           
         SR    R4,R4                                                            
         ICM   R4,7,ISFADCB+1      CLOSE FILE                                   
         MVI   42(R4),X'28'        CHANGE MACRF BYTES BACK TO RI                
         MVI   43(R4),X'00'        IN OPENED FOUNDATION BLOCK                   
         CLOSE ((4))                                                            
         NI    ISFOPEN,255-X'20'   TURN OFF OPEN FLAG                           
         MVI   ISF+2,X'00'         SET DTF AVAIL (X'80' = BUSY)                 
         OI    ISF+0,X'40'                                                      
         XC    ISCILAST,ISCILAST   SET NOT INITIALISED                          
         LA    R4,ISXTNTIX                                                      
         XC    0(15,R4),0(R4)      CLEAR FIRST EXTENT ENTRY                     
         SPACE 1                                                                
*=======================================================*                       
* FREEMAIN ACQUIRED STORAGE                             *                       
* IF FILE OPENED BUT NOT ACCESSED, GETMAINS WILL NOT    *                       
* HAVE BEEN DONE - SO JUST EXIT                         *                       
*=======================================================*                       
         SPACE 1                                                                
         TM    ISCMPRSW,X'20'        TEST BEEN THROUGH INIT                     
         BZ    ISCLOSEX              NO - NEVER ACCESSED FILE                   
         NI    ISCMPRSW,X'FF'-X'20'  RESET FLAG                                 
*                                                                               
         ICM   RE,15,ISINDX          POINT TO CI TABLE                          
         BZ    ISCLOSEX                                                         
         L     R1,8(RE)            FIRST ENTRY IS A(GETMAIN AREA)               
         L     R0,4(RE)            POINT TO EOT-1                               
         AH    R0,=H'1'                                                         
         SR    R0,R1               END-START GIVES LEN                          
         FREEMAIN RC,A=(1),LV=(0)                                               
         LTR   RF,RF                                                            
         BZ    *+6                                                              
         DC    H'0'                                                             
         XC    ISINDX,ISINDX       CLEAR ADDRESS IN DTF                         
*                                                                               
         CLI   ONLINE,C'Y'                                                      
         BE    ISCLOSEX                                                         
*                                                                               
         L     R1,ISBUFF1                                                       
         LH    R0,ISPDLN                                                        
         TM    ISCMPRSW,X'40'      TEST 1 OR 2 BUFFERS                          
         BO    *+6                 FLAG IS ON IF ONLY 1                         
         AR    R0,R0                                                            
         FREEMAIN RC,A=(1),LV=(0)                                               
         LTR   RF,RF                                                            
         BZ    *+6                                                              
         DC    H'0'                                                             
*                                                                               
         XC    ISBUFF1(12),ISBUFF1 CLEAR BUFF1/BUFF1X/BUFF2                     
*                                                                               
         L     R1,ISPDKEY                                                       
         LH    R0,ISKEYLN                                                       
         MH    R0,=H'3'                                                         
         FREEMAIN RC,A=(1),LV=(0)                                               
         LTR   RF,RF                                                            
         BZ    *+6                                                              
         DC    H'0'                                                             
*                                                                               
         XC    ISPDKEY,ISPDKEY                                                  
         XC    ISPDPRKY,ISPDPRKY                                                
         XC    ISTIHIKY,ISTIHIKY                                                
*                                                                               
         ICM   R1,15,ISTIBUFF                                                   
         BZ    ISCLOSE4                                                         
         LH    R0,ISTILN                                                        
         FREEMAIN RC,A=(1),LV=(0)                                               
         LTR   RF,RF                                                            
         BZ    *+6                                                              
         DC    H'0'                                                             
*                                                                               
         XC    ISTIBUFF,ISTIBUFF                                                
*                                                                               
ISCLOSE4 DS    0H                                                               
         SR    R0,R0                                                            
         ICM   R0,1,ISFBUFFS       TEST EXTENDED IOAREAS REQUESTED              
         BZ    ISCLOSEX            NO                                           
         LA    R1,ISTILN           LENGTH IS BIGGER OF ISTILN/ISPDLN            
         CLC   ISTILN,ISPDLN                                                    
         BH    *+8                                                              
         LA    R1,ISPDLN                                                        
         MH    R0,0(R1)                                                         
         AH    R0,=AL2((ISXMAX+1)*ISXTBLN)  PLUS ROOM FOR TABLE                 
         L     R1,ISFXTAB                                                       
         FREEMAIN RC,A=(1),LV=(0)                                               
         LTR   RF,RF                                                            
         BZ    *+6                                                              
         DC    H'0'                                                             
         XC    ISFXTAB,ISFXTAB     CLEAR ADDRESS                                
*                                                                               
ISCLOSEX J     RTNXIT                                                           
*                                                                               
         LTORG                                                                  
         EJECT                                                                  
*========================================================*                      
* ROUTINE TO DYNAMICALLY ALLOCATE A DD CARD FOR FILE     *                      
*========================================================*                      
         SPACE 1                                                                
ALLOC    NTR1  BASE=*                                                           
ALLOCL   ICM   RE,15,=V(SSB)       EXTRACT FACPAC ID IF ONLINE                  
         BZ    ALLOC0                                                           
         OC    0(2,RE),0(RE)                                                    
         BZ    *+14                                                             
         MVC   SYSID,SSBSYSID-SSBD(RE)                                          
         B     ALLOC0                                                           
         CLI   SSOXTND-SSOOFF(RE),X'FF' OR DSN OVERRIDE ID IF OFFLINE           
         BNE   ALLOC0                                                           
         MVC   SYSID,SSODSNID-SSOOFF(RE)                                        
*                                                                               
ALLOC0   LA    R1,RBLK             SET UP REQ BLK POINTER                       
         ST    R1,ARBLK                                                         
         OI    ARBLK,X'80'                                                      
*                                                                               
ALLOC1   MVI   RBLKLEN,20          SET UP REQ BLK LEN                           
         MVI   RBLKVERB,1          SET ALLOCATE BY DSN VERB CODE                
         LA    R1,ATXT                                                          
         ST    R1,RBLKATXT         SET POINTER TO TEXT POINTER LIST             
*                                                                               
ALLOC2   LA    R1,TXTDD            SET UP POINTER TO DDNAME TEXT                
         ST    R1,ATXTDD                                                        
         MVC   0(2,R1),=X'0001'    SET DDNAME TEXT CODE                         
         MVC   2(2,R1),=X'0001'                                                 
         MVC   6(7,R1),ISFFID      SET DDNAME VALUE TO DCB VALUE                
         MVI   13(R1),C' '                                                      
         LA    RF,6(R1)            FIND LEN OF DDNAME                           
         CLI   0(RF),C' '                                                       
         BE    *+12                                                             
         LA    RF,1(RF)                                                         
         B     *-12                                                             
         LA    RE,6(R1)                                                         
         SR    RF,RE                                                            
         STH   RF,4(R1)            SET LEN IN DDNAME TEXT HEADER                
*                                                                               
ALLOC3   LA    R1,TXTDSN           SET UP POINTER TO DSN TEXT                   
         ST    R1,ATXTDSN                                                       
         MVC   0(2,R1),=X'0002'    SET DSN TEXT CODE                            
         MVC   2(2,R1),=X'0001'                                                 
         ICM   RE,15,=V(DMDYNDD)   POINT TO DYNAMIC DDNAME TABLE                
         BZ    ALLOC3C                                                          
ALLOC3A  CLI   0(RE),0             TEST END OF TABLE                            
         BE    ALLOC3C                                                          
         CLI   1(RE),0             TEST GENERAL ENTRY                           
         BE    ALLOC3A1                                                         
         CLC   1(1,RE),SYSID       TEST SPECIFIC FACPAK ENTRY                   
         BNE   ALLOC3A2                                                         
ALLOC3A1 IC    RF,0(RE)            RF=LENGTH OF COMPARE                         
         BCTR  RF,0                                                             
         EX    RF,*+8                                                           
         B     *+10                                                             
         CLC   ISFFID(0),2(RE)                                                  
         BE    ALLOC3B                                                          
ALLOC3A2 LA    RE,30(RE)                                                        
         B     ALLOC3A                                                          
ALLOC3B  MVC   6(20,R1),10(RE)     MOVE DSN TO TEXT BLOCK                       
         B     ALLOC3D                                                          
ALLOC3C  B     ALLOCX              EXIT IF NOT IN TABLE                         
ALLOC3D  LA    RE,ISFFID+1(RF)     POINT TO SUBSTITUTION CHR                    
         LA    RF,6(R1)            POINT TO START OF DSN                        
ALLOC3E  CLI   0(RF),C'='                                                       
         BNE   *+10                                                             
         MVC   0(1,RF),0(RE)       SUBSTITUTE                                   
         CLI   0(RF),C' '                                                       
         BE    *+12                                                             
         LA    RF,1(RF)                                                         
         B     ALLOC3E                                                          
         LA    RE,6(R1)                                                         
         SR    RF,RE                                                            
         STH   RF,4(R1)            SET LEN IN DSN TEXT HEADER                   
*                                                                               
ALLOC4   LA    R1,TXTDISP          SET UP POINTER TO DISP TEXT                  
         ST    R1,ATXTDISP                                                      
         MVC   0(2,R1),=X'0004'    SET DISP TEXT CODE                           
         MVC   2(2,R1),=X'0001'                                                 
         MVC   4(2,R1),=X'0001'                                                 
         MVI   6(R1),X'08'         SET DISP=SHR CODE                            
*                                                                               
         CLI   BYTE,255            IS THIS AN ISOPOLD                           
         BNE   *+8                                                              
         MVI   6(R1),X'01'         SET DISP=OLD CODE                            
*                                                                               
ALLOC5   LA    R1,TXTUNAL          SET UP POINTER TO UNALLOCATE TEXT            
         ST    R1,ATXTUNAL                                                      
         MVC   0(2,R1),=X'001C'    SET UNALLOCATE TEXT CODE                     
         XC    2(4,R1),2(R1)                                                    
*                                                                               
ALLOCA   OI    ATXTLAST,X'80'      SET END OF TEXT POINTER LIST                 
         LA    R1,ARBLK                                                         
         LR    R5,R1               R5=A(REQ BLK IN DUMP)                        
         DYNALLOC                                                               
         LR    R6,RF               R6=RETURN CODE IN DUMP                       
         L     R7,RBLKERR          R7=RBLKERR/RBLKINFO IN DUMP                  
         LTR   RF,RF               TEST FOR ERRORS                              
         BZ    ALLOCB              NO                                           
         CLC   RBLKERR,=X'0410'    YES TEST IF DD CARD ALREADY EXISTS           
         BE    ALLOCX                                                           
         CLI   BYTE,255                                                         
         BNE   ALLOCE                                                           
*                                                                               
         XC    MYWORK,MYWORK                                                    
         MVC   MYWORK,=X'0033'                                                  
         MVC   MYWORK+2(32),=C'DISP=OLD ALLOCATION FAILURE FOR '                
         MVC   MYWORK+34(20),TXTDSN+6                                           
         LA    R4,MYWORK                                                        
         WTO   TEXT=(R4)                                                        
         XC    ECBAD,ECBAD                                                      
         WTOR  'RETRY OR CANCEL',REPLY,1,ECBAD,ROUTCDE=(1)                      
         WAIT  ECB=ECBAD                                                        
         CLI   REPLY,C'R'                                                       
         BE    ALLOCL                                                           
         ABEND 990                 FILE IS INUSE NO DUMP                        
*                                                                               
ALLOCE   ABEND 990,DUMP            ALLOCATION FAILURE ABEND                     
*                                                                               
ALLOCB   OI    ISFOPEN,X'10'       SET DD CARD DYNAMICALLY GENERATED            
*                                                                               
ALLOCX   J     RTNXIT                                                           
*                                                                               
         LTORG                                                                  
         SPACE 2                                                                
ECBAD    DC    F'0'                WTOR FIELDS                                  
REPLY    DC    CL4' '                                                           
         DROP  R2                                                               
         EJECT                                                                  
***********************************************************************         
* ROUTINE TO LOCK DTF                                                 *         
***********************************************************************         
         SPACE 1                                                                
LOCKDTF  NTR1  BASE=*                                                           
         ICM   R4,15,=V(SSB)                                                    
         BZ    LOCKDTFX                                                         
         USING SSBD,R4                                                          
*                                                                               
         L     R3,P4               R3=DTF                                       
         USING ISDTF,R3                                                         
*                                                                               
LKD020   CLI   ISFSNUM,0           IGNORE LOCK IF NO SYSTEM                     
         BE    LOCKDTFX                                                         
         TM    ISFFLAG,ISFGLOB     TEST GLOBAL RESOURCE                         
         BZ    LKD100              NOT GLOBAL - DO LOCAL LOCK                   
         XC    DUB,DUB                                                          
         MVC   DUB+3(1),ISFSNUM                                                 
*                                                                               
         GOTO1 =V(LOCKSPC),DUB     LOCK THE SYSTEM                              
         MVI   LOCKFLG,C'Y'                                                     
*                                                                               
         L     R2,4(R1)            SET FULL TO A(SYSTEM)                        
         USING DMSPACED,R2                                                      
         MVC   FULL,DSPECB                                                      
         SAC   512                                                              
         LAM   R2,R2,SSBALET                                                    
         L     R2,FULL                                                          
         USING DMSYSHDR,R2                                                      
         LH    R1,DSYFILES         R1=NUMBER OF FILES                           
         LA    R2,DSYDATA          R2 POINTS TO FILES                           
         USING DSFILHDR,R2                                                      
*                                                                               
LKD030   CLC   ISFXNUM,DSFILNUM    TEST FILE NUMBER                             
         BE    LKD050                                                           
         LA    R2,32(,R2)                                                       
         BCT   R1,LKD030                                                        
         DC    H'0'                MUST HAVE FILE DEFINED                       
*                                                                               
LKD050   OC    DSEOF1,DSEOF1       TEST DSPACE NOT ZERO                         
         BZ    LKDERR                                                           
         CLC   ISOVLAST,DSEOF1     TEST OUR EOF NOT GREATER                     
         BH    LKDERR                                                           
         MVC   ISOVLAST,DSEOF1                                                  
         MVC   ISPDLAST,DSEOF2                                                  
         CR    RB,RB                                                            
         B     LKD999                                                           
*                                                                               
LKD100   ICM   RF,15,=V(ADWAIT)                                                 
         BZ    LOCKDTFX                                                         
         TS    ISFAVAIL            DTF+2 =X'80' MEANS BUSY                      
         BNZ   LKD102              BUSY - GO WAIT                               
         NI    ISDTF,X'BF'         TURN OFF POST BIT (ISFAVAIL=X'FF')           
         B     LOCKDTFX                                                         
*                                                                               
LKD102   LA    R1,ISDTF            POINT TO DTF                                 
         O     R1,=X'FF000000'     SET 'DO NOT WAIT ON THIS ECB'                
         BASSM RE,RF               BRANCH AND SET 24-BIT MODE                   
         LA    RE,LKD100                                                        
         O     RE,=X'80000000'                                                  
         BSM   0,RE                BACK TO 31-BIT MODE AND TRY AGAIN            
*                                                                               
LKDERR   LTR   RB,RB               FORCE EOF SEARCH                             
*                                                                               
LKD999   SAC   0                                                                
*                                                                               
LOCKDTFX J     RTNXIT                                                           
*                                                                               
         LTORG                                                                  
         DROP  R2,R3,R4                                                         
         EJECT                                                                  
***********************************************************************         
* ROUTINE TO UNLOCK SYSTEM                                            *         
***********************************************************************         
         SPACE 1                                                                
FREEDTF  NTR1  BASE=*                                                           
         ICM   R4,15,=V(SSB)                                                    
         BZ    FREEDTFX                                                         
         USING SSBD,R4                                                          
*                                                                               
         XR    R3,R3               R3=DTF                                       
         ICM   R3,7,P4+1                                                        
         USING ISDTF,R3                                                         
*                                                                               
FRE020   CLI   ISFSNUM,0           IGNORE LOCK IF NO SYSTEM                     
         BE    FREEDTFX                                                         
         TM    ISFFLAG,ISFGLOB     TEST GLOBAL RESOURCE                         
         BZ    FRE100              NO - LOCAL  FREE100                          
         XC    DUB,DUB                                                          
         OI    DUB,X'20'                                                        
         MVC   DUB+3(1),ISFSNUM                                                 
*                                                                               
         GOTO1 =V(LOCKSPC),DUB     ENQUIRE ON SYSTEM                            
*                                                                               
         L     R2,4(R1)            SET FULL TO A(SYSTEM)                        
         USING DMSPACED,R2                                                      
         MVC   FULL,DSPECB                                                      
         NI    FULL,X'3F'                                                       
         SAC   512                                                              
         LAM   R2,R2,SSBALET                                                    
         L     R2,FULL                                                          
         USING DMSYSHDR,R2                                                      
         LH    R1,DSYFILES         R1=NUMBER OF FILES                           
         LA    R2,DSYDATA          R2 POINTS TO FILES                           
         USING DSFILHDR,R2                                                      
*                                                                               
FRE030   CLC   ISFXNUM,DSFILNUM    TEST FILE NUMBER                             
         BE    FRE050                                                           
         LA    R2,32(,R2)                                                       
         BCT   R1,FRE030                                                        
         DC    H'0'                MUST HAVE FILE DEFINED                       
*                                                                               
FRE050   MVC   DSEOF1,ISOVLAST     SET NEW VALUES                               
         MVC   DSEOF2,ISPDLAST                                                  
*                                                                               
         SAC   0                                                                
         MVI   DUB,X'10'                                                        
         MVC   DUB+3(1),ISFSNUM                                                 
         GOTO1 =V(LOCKSPC),DUB     FREE THE SYSTEM                              
         B     FREEDTFX                                                         
*                                                                               
FRE100   MVI   ISFAVAIL,0          FREE LOCK FLAG                               
         OI    ISDTF,X'40'         POST ECB COMPLETE                            
*                                                                               
FREEDTFX J     RTNXIT                                                           
*                                                                               
         LTORG                                                                  
         EJECT                                                                  
*========================================================*                      
* SAVE CURRENT IO DATA IN OLDEST SLOT IN TABLE           *                      
* NOTE THAT FIRST TABLE ENTRY CONTAINS ADDRESS/LEN       *                      
* OF LAST ACTUAL I/O DONE                                *                      
*========================================================*                      
         SPACE 1                                                                
         DROP  R2,R3,R4                                                         
         DS    0H                                                               
         USING ISDTF,R2            R2=A(DTF)                                    
ISX      NTR1  BASE=*                                                           
         L     R1,ISFXTAB                                                       
         USING ISXTABD,R1                                                       
*                                                                               
         OC    ISXTBADR,ISXTBADR   TEST ANY DATA TO BE SAVED                    
         BZ    ISX20               NO                                           
*                                                                               
         LA    R1,ISXTBLN(R1)      POINT TO SECOND ENTRY                        
         ZIC   R0,ISFBUFFS         GET NUMBER OF BUFFERS                        
         B     ISX12                                                            
*                                                                               
ISX10    CLC   ISXTBSEQ,ISXTBSEQ-ISXTABD(R5)                                    
         BNL   *+6                                                              
ISX12    LR    R5,R1                            LOW --> SAVE ADDRESS            
         LA    R1,ISXTBLN(R1)                                                   
         BCT   R0,ISX10                                                         
*                                                                               
         L     R1,ISFXTAB                       R1 TO TOP OF TABLE              
         MVC   ISXTBSK-ISXTABD(8,R5),ISXTBSK    MOVE SEEK ADDRESS               
         MVC   ISXTBDL-ISXTABD(4,R5),ISXTBDL    MOVE DATA LENGTH                
         SR    RE,RE                                                            
         ICM   RE,3,ISFXSEQ                     GET CURRENT SEQNUM              
         LA    RE,1(RE)                         BUMP IT                         
         STCM  RE,3,ISFXSEQ                     SAVE IT IN THE DTF              
         ST    RE,ISXTBSEQ-ISXTABD(R5)          AND SET IN TABLE                
         SPACE 1                                                                
* NOW MOVE DATA TO EXTENDED IOAREA *                                            
         SPACE 1                                                                
         LM    RE,RF,ISXTBADR      GET 'FROM' ADDR/LEN FROM FIRST ENTRY         
         LR    R1,R5               POINT TO NEW ENTRY                           
         L     R0,ISXTBADR         SET 'TO' ADDR                                
         LR    R1,RF               SET 'TO' LEN                                 
         MVCL  R0,RE               MOVE DATA                                    
         SPACE 1                                                                
* SAVE DATA FOR THIS IO IN FIRST TABLE ENTRY *                                  
         SPACE 1                                                                
ISX20    DS    0H                                                               
         L     R1,ISFXTAB          R1 TO TOP OF TABLE                           
         MVC   ISXTBSK,ISFSEEK     SAVE SEEK ADDRESS                            
         SR    R0,R0                                                            
         ICM   R0,3,CCW4+6         DATA LENGTH                                  
         ST    R0,ISXTBDL                                                       
         MVC   ISXTBADR,IDAWS      SET DATA ADDRESS FROM FIRST IDAW             
         EJECT                                                                  
*=====================================================*                         
* NOW HAVE A LOOK TO SEE IF REQ DATA IS IN CORE       *                         
*=====================================================*                         
         SPACE 1                                                                
         LA    R1,ISXTBLN(R1)      POINT TO SECOND ENTRY                        
         ZIC   R0,ISFBUFFS         NUMBER OF IOAREAS                            
*                                                                               
ISX22    OC    ISXTBSEQ,ISXTBSEQ   IS THIS ENTRY VALID                          
         BZ    *+14                NO                                           
         CLC   ISFSEEK,ISXTBSK     COMPARE SEEK ADDRESSES                       
         BE    ISX24               GOT IT !                                     
ISX23    LA    R1,ISXTBLN(R1)                                                   
         BCT   R0,ISX22                                                         
         B     ISX26                                                            
*                                                                               
ISX24    TM    READTYPE,FLUSH      TEST IF WANT FORCED READ OF BLOCK            
         BZ    ISX30               NO THEN USE THIS BUFFER                      
         CLC   ISXTBDL+2(2),ISTILN                                              
         BE    ISX30               ONLY CONCERED ABOUT PD BUFFS                 
         XC    ISXTBSEQ,ISXTBSEQ   THROW THIS BUFFER AWAY                       
         B     ISX23                                                            
*                                                                               
ISX26    L     R1,ISFXTAB          POINT TO FIRST ENTRY                         
         SR    RE,RE                                                            
         ICM   RE,3,ISXTBSEQ       THIS HLFWD USED TO COUNT MISSES              
         LA    RE,1(RE)                                                         
         STCM  RE,3,ISXTBSEQ                                                    
*                                                                               
ISX28    MVI   ECB,X'FF'           SET CC FOR LATER                             
         B     ISX40               AND EXIT                                     
         SPACE 2                                                                
*=======================================================*                       
* FOUND THE DATA IN EXT IOAREA - MOVE IT TO CURRENT IOA *                       
* R1 POINTS TO THE TABLE ENTRY                          *                       
*=======================================================*                       
         SPACE 1                                                                
ISX30    DS    0H                                                               
         XC    ISXTBSEQ,ISXTBSEQ   SET SLOT FREE NOW                            
         LM    RE,RF,ISXTBADR      'FROM' ADDR/LEN                              
         L     R1,ISFXTAB          R1 TO FIRST ENTRY                            
         L     R0,ISXTBADR         'TO' ADDR                                    
         LR    R1,RF               'TO' LEN = 'FROM' LEN                        
         MVCL  R0,RE               MOVE DATA TO REQUESTED ADDRESS               
         MVI   ECB,0               SET CC FOR LATER                             
*                                                                               
ISX40    L     R1,ISFXTAB          POINT TO FIRST SLOT                          
         SR    RE,RE                                                            
         ICM   RE,3,ISXTBSEQ+2     BUMP TOTAL I/O COUNT                         
         LA    RE,1(RE)                                                         
         STCM  RE,3,ISXTBSEQ+2                                                  
         B     ISXX  *============ NOP COUNTER LOGIC  =============*            
*                                                                               
         N     RE,=X'000003FF'     TEST DIVISIBLE BY 1024                       
         BNZ   ISXX                NO - GET OUT                                 
         N     RE,=X'0000FFFF'     TEST OVERFLOWED COUNTER                      
         BNZ   *+14                IF BITS ARE ON, NO OVERFLOW YET              
         XC    ISXTBSEQ,ISXTBSEQ   IF BITS ARE ALL OFF, CLEAR COUNTERS          
         B     ISXX                                                             
* TIME TO TEST RATIO OF MISSES TO TRIES                                         
         SR    RF,RF                                                            
         ICM   RF,3,ISXTBSEQ       GET NUMBER OF MISSES                         
         M     RE,=F'100'                                                       
         SR    R0,R0                                                            
         ICM   R0,3,ISXTBSEQ+2     GET NUMBER OF EXCP'S                         
         DR    RE,R0                                                            
         C     RF,=F'90'           TEST 90% MISSED                              
         BL    ISXX                NO                                           
         OI    ISFXTAB,X'80'       SET TO STOP USING EXT BUFFS                  
*                                                                               
ISXX     CLI   ECB,0               SET CC ON EXIT                               
         J     RTNXIT                                                           
*                                                                               
         LTORG                                                                  
         EJECT                                                                  
***********************************************************************         
* WORKING STORAGE DSECT                                               *         
***********************************************************************         
         SPACE 1                                                                
WORKD    DSECT                                                                  
*                                                                               
CCB      DS    0CL40                                                            
IOB      DS    CL40                                                             
ECB      DS    F                                                                
ERRF     DS    H                                                                
BYTE     DS    X                                                                
         DS    X                                                                
COUNT    DS    D                                                                
SEEK     DS    D                                                                
SRCH     EQU   SEEK+2                                                           
*                                                                               
CCW0     DS    D                                                                
CCWS     DS    0CL56                                                            
CCW1     DS    D                                                                
CCW2     DS    D                                                                
CCW3     DS    D                                                                
CCW4     DS    D                                                                
CCW5     DS    D                                                                
CCW6     DS    D                                                                
CCW7     DS    D                                                                
*                                                                               
IDAWS    DS    33F                 MAX IOLEN IS 33 2K RECORDS                   
*                                                                               
DUB      DS    D                                                                
DUB1     DS    D                                                                
DUB2     DS    D                                                                
DUB3     DS    D                                                                
         ORG   DUB3                                                             
DEADBLKA DS    F                                                                
DEADBLKL DS    F                                                                
*                                                                               
AREC0    DS    A                                                                
*                                                                               
CALLMODE DS    F                                                                
SAVER    DS    F                                                                
SAVER1   DS    F                                                                
SAVER9   DS    F                                                                
CURARG   DS    F                                                                
LOARG    DS    H                                                                
HIARG    DS    H                                                                
ISROUTA  DS    A                                                                
ISSWAPSW DS    C                                                                
RPSSW    DS    C                                                                
SECTOR   DS    C                                                                
OPCD     DS    C                                                                
SPLITBDA DS    F                                                                
COPYBDA  DS    F                                                                
READTYPE DS    X                                                                
FLUSH    EQU   X'01'                                                            
         DS    3C                                                               
*                                                                               
DEVDATA  DS    0CL16                                                            
DEVTYP   DS    X                                                                
DEVSUB   DS    X                                                                
DEVTRKS  DS    H                                                                
DEVIRG   DS    H                                                                
DEVCAPL  DS    H                                                                
DEVCAPP  DS    H                                                                
DEVRZERO DS    H                                                                
DEVSCT   DS    H                                                                
DEVMOD   DS    H                                                                
*                                                                               
PARAMS   DS    0CL24                                                            
P1       DS    A                                                                
P2       DS    A                                                                
P3       DS    A                                                                
P4       DS    A                                                                
P5       DS    A                                                                
P6       DS    A                                                                
*                                                                               
ARBLK    DS    A                   REQUEST BLOCK POINTER                        
*                                                                               
RBLK     DS    0XL20               REQUEST BLOCK                                
RBLKLEN  DS    XL1                                                              
RBLKVERB DS    XL1                                                              
         DS    XL2                                                              
RBLKERR  DS    XL2                                                              
RBLKINFO DS    XL2                                                              
RBLKATXT DS    A                                                                
         DS    XL8                                                              
*                                                                               
ATXT     DS    0A                  TEXT BLOCK POINTERS                          
ATXTDD   DS    A                                                                
ATXTDSN  DS    A                                                                
ATXTDISP DS    A                                                                
ATXTUNAL DS    A                                                                
         ORG   *-4                                                              
ATXTLAST DS    A                   LAST TEXT BLOCK POINTER                      
         ORG                                                                    
*                                                                               
TXTDD    DS    XL6,CL8             TEXT BLOCK DDNAME 0001                       
TXTDSN   DS    XL6,CL20            TEXT BLOCK DSN    0002                       
TXTDISP  DS    XL6,XL1             TEXT BLOCK DISP   0004                       
TXTUNAL  DS    XL6                 TEXT BLOCK UNALOC 001C                       
*                                                                               
FULL     DS    F                                                                
MYWORK   DS    CL64                                                             
DAYWSTD  DS    XL6                                                              
*                                                                               
GMFLAG   DS    X                   FLAGS FOR GETMAIN                            
GMFHI    EQU   X'80'               IN HIGH CORE                                 
GMFPG    EQU   X'40'               BOUNDARY=PAGE                                
GMFCD    EQU   X'20'               RC CONDITIONAL GETMAIN                       
*                                                                               
*              DATA EXTRACTED FOR PD BLOCK INDEX SAVED IN ISBUFF2               
BILNK    DS    F                                                                
*                                                                               
*              SAVE KEY VALUES FOR BLOCK INDEX ADDS                             
BLKK1    DS    XL(SVBLKDL)                                                      
BLKK2    DS    XL(SVBLKDL)                                                      
BLKK3    DS    XL(SVBLKDL)                                                      
*                                                                               
LOCKFLG  DS    C                                                                
WORKL    EQU   *-WORKD                                                          
         EJECT                                                                  
***********************************************************************         
* DSECT TO COVER SAVED PD LINK INFORMATION                            *         
***********************************************************************         
         SPACE 1                                                                
SVBLKD   DSECT                                                                  
SVLNK    DS    XL4                 SAVED OV LINK OR BLOCK INDEX VALUE           
SVHIKEY  DS    XL64                SAVED HIGH KEY                               
SVBLKDL  EQU   *-SVBLKD                                                         
         EJECT                                                                  
***********************************************************************         
* DSECT FOR TABLE OF EXTENDED IOAREA DATA                             *         
* NOTE: 1ST ENTRY IN TABLE RESERVED FOR LAST REAL I/O THAT TOOK PLACE*          
***********************************************************************         
         SPACE 1                                                                
ISXMAX   EQU   16                  MAXIMUM NUMBER OF EXTENDED IOAREAS           
*                                                                               
ISXTABD  DSECT                                                                  
ISXTBADR DS    A                   IOAREA ADDRESS                               
ISXTBDL  DS    F                   DATA LENGTH                                  
ISXTBSEQ DS    F                   USAGE SEQUENCE NUMBER                        
ISXTBSK  DS    XL8                 FULL SEEK ADDRESS OF RECORD                  
ISXTBLN  EQU   *-ISXTABD                                                        
         EJECT                                                                  
***********************************************************************         
* DMDTFIS                                                             *         
***********************************************************************         
         SPACE 1                                                                
       ++INCLUDE DMDTFIS                                                        
         EJECT                                                                  
***********************************************************************         
* OTHER INCLUDED DSECTS                                               *         
***********************************************************************         
         SPACE 1                                                                
*FASSB                                                                          
         PRINT OFF                                                              
       ++INCLUDE FASSB                                                          
         PRINT ON                                                               
*FASSBOFF                                                                       
         PRINT OFF                                                              
       ++INCLUDE FASSBOFF                                                       
         PRINT ON                                                               
*FATCB                                                                          
         PRINT OFF                                                              
       ++INCLUDE FATCB                                                          
         PRINT ON                                                               
*DMSPACED                                                                       
         PRINT OFF                                                              
       ++INCLUDE DMSPACED                                                       
         PRINT ON                                                               
*DMDSYSHDR                                                                      
         PRINT OFF                                                              
       ++INCLUDE DMDSYSHDR                                                      
         PRINT ON                                                               
**PAN#1  CSECT                                                                  
**PAN#1  DC    CL21'007DMISDDSS  10/18/00'                                      
         END                                                                    
