*          DATA SET DMISDDS20  AT LEVEL 011 AS OF 04/25/19                      
*CATALP DMIS20                                                                  
*&&      SET   DB=Y                                                             
***********************************************************************         
* THIS IS THE 20-BIT TRACK DISK ADDRESS VERSION OF ISDDS              *         
* IT CAN BE CALLED DIRECTLY USING V(ISDDS20)                          *         
* IT CAN ALSO BE CALLED FROM DMISDDS USING THE V(ISDDS20E) ENTRY WITH *         
* R1 POINTING TO DMISDDS'S WORKING STORAGE WHICH IT SHARES            *         
*                                                                     *         
* THE FIRST RECORD HAS DISK ADDRS OF PRIME DATA (PD) AND OVERFLOW (OV)*         
* AFTER FIRST RECORD IS THE BLOCK INDEX (BI), THEN PD, THEN OV        *         
***********************************************************************         
         EJECT                                                                  
         TITLE 'INDEX SEQUENTIAL ACCESS METHOD - 20-BIT DISK ADDR'              
         PRINT NOGEN                                                            
ISDDS20  CSECT                                                                  
         ENTRY ISDDS20E                                                         
         NMOD1 WORKL,**IS20**,CLEAR=YES                                         
         USING WORKD,RC                                                         
         ST    R1,SAVER1                                                        
         MVC   PARAMS,0(R1)                                                     
         MVI   P2,0                CLEAR HIGH ORDER BYTES OF PARMS              
         MVI   P4,0                                                             
         MVI   P5,0                                                             
         B     ISDDS                                                            
                                                                                
ISDDS20E STM   RE,RC,12(RD)        ENTRY POINT IF CALLED FROM V(ISDDS)          
         LARL  RB,ISDDS20                                                       
         LA    RC,72(RD)                                                        
         ST    RD,4(RC)                                                         
         ST    RC,8(RD)                                                         
         MVC   0(4,RD),24(RB)                                                   
         LR    RD,RC                                                            
         LR    RC,R1               R1=A(ISDDS'S WORKING STORAGE)                
*                                                                               
ISDDS    ST    RD,SAVERD           SAVED FOR FAST EXIT                          
         L     RA,ACOMMON          RA=A(START OF COMMON ROUTINES)               
         USING COMMON,RA                                                        
         SAM31                     SWITCH INTO XA                               
*                                                                               
         L     R2,P4               R2=A(DTF)                                    
         USING ISDTF,R2                                                         
         MVI   READTYPE,0                                                       
         MVI   ISTI,C'N'                                                        
         XC    P6,P6               FULL TRACK NOT SUPPORTED                     
*                                                                               
         LH    RE,ISKEYLN          SET KEY LEN + 4 FOR BLKIND CODE              
         AHI   RE,4                                                             
         STH   RE,ISKEYLN4                                                      
*                                                                               
         TM    P1,X'80'            CHECK WANT TO DO INTERNAL LOCKER             
         BZ    *+12                                                             
         OI    READTYPE,DOLOCKER                                                
         NI    P1,X'7F'                                                         
*                                                                               
         LARL  RE,DEV3390          3390 IS ONLY VALID CURRENT DEVICE            
*&&DO                                                                           
         XR    RE,RE               SET DISK DEVICE DATA                         
         ICM   RE,1,ISFDEVT                                                     
         BNZ   *+8                                                              
         LHI   RE,1                                                             
         BCTR  RE,0                                                             
         SLL   RE,4                                                             
         LA    RE,DEVDISK(RE)                                                   
*&&                                                                             
         MVC   DEVDATA,0(RE)                                                    
*                                                                               
         LLC   RF,P1+3             CONVERT ROUTINE NUMBER TO ADDRESS            
         SLL   RF,2                                                             
         LARL  RE,ISROUTS                                                       
         AR    RE,RF                                                            
         L     RF,0(RE)                                                         
         ST    RF,ISROUTA          SAVE ADDRESS OF ROUTINE                      
*                                                                               
         OC    ISCILAST,ISCILAST   INITIALISE ON FIRST CALL                     
         BNZ   *+8                                                              
         BRAS  RE,INIT                                                          
*                                                                               
         XC    P3(2),P3            CLEAR ERROR INDICATORS                       
         MVI   ISSWAPSW,0          RESET SWAP SWITCH                            
         L     R3,P5               R3=A(KEYARG)                                 
         L     RF,ISROUTA                                                       
         BR    RF                  GO TO REQUIRED IS ROUTINE                    
*                                                                               
ACOMMON  DC    A(COMMON)                                                        
         EJECT                                                                  
***********************************************************************         
* ISREAD - READ RANDOM                                                *         
***********************************************************************         
ISRDFLS  OI    READTYPE,FLUSH      READ REQUIRES BLK TO BE READ                 
ISREAD   BRAS  RE,AISREAD                                                       
         B     XMOD                                                             
         EJECT                                                                  
***********************************************************************         
* ISRDSEQ - READ SEQUENTIAL                                           *         
***********************************************************************         
ISRSFLS  OI    READTYPE,FLUSH      SET FLUSH TYPE READING                       
ISRDSEQ  BRAS  RE,AISRDSEQ                                                      
         B     XMOD                                                             
         EJECT                                                                  
***********************************************************************         
* ISCLEAR - CLEAR BUFFER CONTENTS TO FORCE I/OS NEXT TIME             *         
***********************************************************************         
ISCLEAR  BRAS  RE,AISCLEAR                                                      
         B     XMOD                                                             
         EJECT                                                                  
***********************************************************************         
* ISERASE - ERASE RECORD IN ISPDKEY                                   *         
***********************************************************************         
ISERASE  BRAS  RE,AISERS           TEST BUFFER CONTENTS VALID                   
         B     XMOD                                                             
         EJECT                                                                  
***********************************************************************         
* ISWRITE - WRITE LAST RECORD READ                                    *         
***********************************************************************         
ISWRITE  BRAS  RE,AISWRITE                                                      
         B     XMOD                                                             
         EJECT                                                                  
***********************************************************************         
* ISADD - ADD A RECORD                                                *         
***********************************************************************         
ISADD    BRAS  RE,AISADD                                                        
         B     XMOD                                                             
         EJECT                                                                  
***********************************************************************         
* GET CPU ID FROM RECORD ZERO OF TRACK ONE IN INDEX EXTENT            *         
* I/O IS DONE TO NMOD AREA IN 24 BIT ADDRESSABLE STORAGE, NO IDAL.    *         
* IF STORAGE PROTECT ON REC 0 READ INTO TCB FIELD (NO EXCP IN KEY 9)  *         
***********************************************************************         
ISCPUID  BRAS  RE,AISCPUID                                                      
         B     XMOD                                                             
         EJECT                                                                  
***********************************************************************         
* THIS ROUTINE IS USED OFFLINE TO MAKE SURE WE HAVE RIGHT EOF ADDRESS *         
* I/O IS DONE IN NMOD AREA (24-BIT) SO NO IDAL REQUIRED               *         
***********************************************************************         
ISFNDEOF BRAS  RE,AISFNDEF                                                      
*NOP*    MVI   DUB,C'E'            FNDEOF TRACE                                 
*NOP*    BRAS  R9,ISTRACE                                                       
         B     XMOD                                                             
         EJECT                                                                  
***********************************************************************         
* OPEN A FILE                                                         *         
***********************************************************************         
ISOPOLD  MVI   BYTE,1              FLAG OPEN DISP=OLD                           
         B     *+8                                                              
ISOPEN   MVI   BYTE,0                                                           
         BRAS  RE,AISOPEN          CALL ISOPEN AT INDIRECT ADDRESS              
         B     XMOD                                                             
         EJECT                                                                  
***********************************************************************         
* ISWRITE - WRITE LAST RECORD READ                                    *         
***********************************************************************         
AISWRITE NTR1  BASE=*,LABEL=*                                                   
         OC    ISPDDA,ISPDDA       TEST BUFFER CONTENTS VALID                   
         JZ    *+2                 DIE=ZERO ISPDDA                              
         L     R3,P2               USE RECORD AS KEYARG                         
         L     R4,ISPDKEY                                                       
         LH    R5,ISKEYLN1                                                      
         EX    R5,CLCR3R4          CLC  0(0,R3),0(R4)                           
         JNE   *+2                 DIE=KEYS NOT EQL                             
*                                                                               
ISWRT02  TM    ISCMPRSW,VARIABLE   FIXED/VARIABLE LENGTH RECORDS?               
         BO    ISWRT04                                                          
*                                                                               
         LH    R6,ISRECLN          FIXED LENGTH RECORDS                         
         L     RF,ISPDPTR          GET ADDRESS OF REC IN BUFFER                 
         XR    RE,RE                                                            
         IC    RE,0(RF)            GET MISSING KEY BYTES                        
         SR    R6,RE               GIVES ACTUAL REC BYTES PRESENT               
         LA    R7,0(RE,R3)         GET FROM ADDRESS                             
         LA    RF,1(RF)            GET TO ADDRESS                               
         BRAS  R9,MOVEIT           MVC  0(R6,RF),0(R7)                          
         BRAS  RE,ISWRTPD          WRITE PD BLOCK                               
         B     EXIT                                                             
*                                                                               
ISWRT04  LH    R6,ISKEYLN          VARIABLE LENGTH RECORDS                      
         AR    R6,R3               POINT TO REC LENGTH                          
         CLC   ISRECLN,0(R6)       DID LENGTH CHANGE                            
         BNE   ISWRT06             YES                                          
                                                                                
***********************************************************************         
* LENGTH UNCHANGED                                                    *         
***********************************************************************         
         L     RF,ISPDPTR                                                       
         XR    RE,RE                                                            
         IC    RE,0(RF)            GET MISSING BYTES                            
         LH    R6,ISRECLN                                                       
         SR    R6,RE               GIVES ACTUAL BYTES PRESENT                   
*                                                                               
         LA    R7,0(RE,R3)         GIVES FROM ADDRESS                           
         LA    RF,1(RF)            GIVES TO ADDRESS                             
         BRAS  R9,MOVEIT           MVC  0(R6,RF),0(R7)                          
         BRAS  RE,ISWRTPD          WRITE BLK                                    
         B     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* REC LENGTH HAS CHANGED                                              *         
***********************************************************************         
ISWRT06  L     R0,ISBUFF2          SET TO ADDRESS                               
         LH    R1,ISPDLN           SET TO LEN                                   
         L     RE,ISBUFF1          SET FROM ADDRESS                             
         LR    RF,R1               SET FROM LENGTH                              
         MVCL  R0,RE               MOVE BUFF1 TO BUFF2                          
                                                                                
***********************************************************************         
* MOVE BUFF2 TO BUFF1 OMITTING CHANGED REC                            *         
***********************************************************************         
         L     RF,ISPDPTR                                                       
         SR    RE,RE                                                            
         IC    RE,0(RF)            GET COMPRESSION FACTOR                       
         LCR   RE,RE               NEGATE IT                                    
         L     RF,ISBUFF1                                                       
         AH    RE,0(RF)            ADD OLD SPARE                                
         AH    RE,ISRECLN          PLUS OLD RECLEN                              
         LA    RE,1(RE)            AND ONE FOR LUCK                             
         STH   RE,0(RF)            SET NEW SPARE                                
*                                                                               
         LA    RF,6(RE,RF)         GIVES TO ADDRESS                             
         L     R7,ISBUFF2                                                       
         AH    R7,0(R7)                                                         
         LA    R7,6(R7)            GIVES FROM ADDRESS                           
         L     R0,ISPDPTR                                                       
         AH    R0,ISPDLN           SET PTR TO CHANGED REC IN BUFF2              
         ST    R0,DUB+4            AND SAVE IT                                  
*                                                                               
ISWRT08  CLI   0(R7),X'FF'         CHECK FOR EOB FLAG                           
         BE    ISWRT12                                                          
*                                                                               
         LH    R6,ISKEYLN                                                       
         SR    RE,RE                                                            
         IC    RE,0(R7)            GET MISSING BYTES                            
         SR    R6,RE                                                            
         LA    R6,1(R7,R6)         POINT TO RECLEN                              
         MVC   DUB(2),0(R6)        ALIGN                                        
         LH    R6,DUB                                                           
         SR    R6,RE               GIVES ACTUAL BYTES PRESENT                   
         LA    R6,1(R6)            ADJUST FOR CONTROL BYTE                      
         C     R7,DUB+4            IS THIS CHANGED REC                          
         BNE   ISWRT10             NO                                           
         AR    R7,R6               POINT TO NEXT REC                            
         ST    RF,DUB+4            THINK ABOUT IT                               
         B     ISWRT08                                                          
*                                                                               
ISWRT10  BRAS  R9,MOVEIT           MVC  0(R6,RF),0(R7)                          
         B     ISWRT08                                                          
*                                                                               
ISWRT12  MVI   0(RF),X'FF'         SET EOB FLAG                                 
         MVC   ISPDPTR,DUB+4       SET NEW INS. ADDRS                           
         BRAS  RE,ISADD18          ADD RECORD                                   
         B     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* ISADD - ADD A RECORD                                                *         
***********************************************************************         
B1       USING SVBLKD,BLKK1                                                     
B2       USING SVBLKD,BLKK2                                                     
*                                                                               
AISADD   NTR1  BASE=*,LABEL=*                                                   
         L     R3,P2               POINT TO RECORD AS KEYARG                    
         MVI   BUFFOK,X'40'        SET BUFF OK FLAG TO SAY ISADD                
         BRAS  R9,CHKHILO          SEE IF BLK IN CORE                           
         B     ISADD06             KEY ARG LO                                   
         B     ISADD04             KEY ARG HI                                   
*                                                                               
ISADD02  BNE   ISADD18             IF CC NOT =, GO ADD RECORD                   
         OI    P3,X'20'            SET DUP KEY ERROR                            
         XC    ISPDPTR,ISPDPTR     RESET SEQUENTIAL READ POINTER                
         B     XMOD                                                             
                                                                                
***********************************************************************         
* KEYARG HIGHER THAN BUFFER IN CORE. TEST FOR OVERFLOW                *         
***********************************************************************         
ISADD04  BRAS  R9,CHKHITI                                                       
         BNH   ISADD08             KEYARG LE - READ OVERFLOW BLK                
                                                                                
***********************************************************************         
* SEARCH INDEX TO FIND REC                                            *         
***********************************************************************         
ISADD06  BRAS  R9,READIX                                                        
         DC    AL4(0)                                                           
         B     ISADD08                                                          
         BE    ISADD02+4           RECORD FOUND IS ERROR                        
         B     ISADD10                                                          
*                                                                               
ISADD08  BRAS  R9,READOV                                                        
         DC    AL4(0)                                                           
         B     ISADD08                                                          
         BE    ISADD02+4                                                        
*                                                                               
ISADD10  TM    ISCMPRSW,X'80'      TEST FIXED/VARIABLE LENGTH RECORDS           
         BO    ISADD18                                                          
         B     ISADD12                                                          
                                                                                
***********************************************************************         
* FOR FIXED LENGTH RECORDS                                            *         
* IF REC TO BE INSERTED IS LOWEST IN BUFFER -                         *         
* INTERCHANGE FIRST REC IN BLK AND INSERT REC, THEN PROCEED           *         
* WITH INSERTION. RESTORE USERS RECORD AT END.                        *         
***********************************************************************         
ISADD12  LH    R6,ISRECLN                                                       
         L     R7,ISBUFF1                                                       
         AH    R7,0(R7)                                                         
         LA    R7,7(R7)            POINT TO KEY OF FIRST REC                    
*                                                                               
         L     RF,ISPDPRKY                                                      
         LH    R5,ISKEYLN1                                                      
         EX    R5,OCRF             OC  0(0,RF),0(RF)                            
         BNZ   ISADD18             INSERT IS NOT LOWEST IN BLK                  
         EX    R5,MVCRFR3          MVC  0(0,RF),0(R3)                           
*                                                                               
         LA    RE,0(R6,R7)         SET NEW INSERTION ADDRESS                    
         ST    RE,ISPDPTR                                                       
*                                                                               
ISADD14  CHI   R6,256              SWAP IN 256 BYTE CHUNKS                      
         BNH   ISADD16                                                          
         XC    0(256,R3),0(R7)                                                  
         XC    0(256,R7),0(R3)                                                  
         XC    0(256,R3),0(R7)                                                  
         AHI   R6,-256                                                          
         LA    R3,256(R3)                                                       
         LA    R7,256(R7)                                                       
         B     ISADD14                                                          
*                                                                               
ISADD16  BCTR  R6,0                LAST EXECUTED SWAP                           
         EX    R6,XCR3R7                                                        
         EX    R6,XCR7R3                                                        
         EX    R6,XCR3R7                                                        
*                                                                               
         L     R3,P2               RESET REC POINTER                            
         MVI   ISSWAPSW,C'S'       SET SWITCH                                   
         B     ISADD18                                                          
                                                                                
***********************************************************************         
* GET NUMBER OF MATCHING KEY BYTES                                    *         
***********************************************************************         
ISADD18  BRAS  RE,AISADD18                                                      
         B     XMOD                                                             
         EJECT                                                                  
***********************************************************************         
* SWAP ISBUFF1 WITH ISBUFF2                                           *         
***********************************************************************         
SWAPB12  ST    R9,SAVER                                                         
         LH    R6,ISPDLN                                                        
         L     R7,ISBUFF1                                                       
         L     R3,ISBUFF2                                                       
*                                                                               
SWAP010  CHI   R6,256              SWAP IN 256 BYTE CHUNKS                      
         BNH   SWAP020                                                          
         XC    0(256,R3),0(R7)                                                  
         XC    0(256,R7),0(R3)                                                  
         XC    0(256,R3),0(R7)                                                  
         AHI   R6,-256                                                          
         LA    R3,256(R3)                                                       
         LA    R7,256(R7)                                                       
         B     SWAP010                                                          
*                                                                               
SWAP020  BCTR  R6,0                LAST EXECUTED SWAP                           
         EX    R6,XCR3R7                                                        
         EX    R6,XCR7R3                                                        
         EX    R6,XCR3R7                                                        
*                                                                               
         L     R3,P2               RESET REC POINTER                            
         L     R9,SAVER                                                         
         BR    R9                                                               
         EJECT                                                                  
***********************************************************************         
* BUILD CCW - R7=A(DISK ADDRESS)                                      *         
***********************************************************************         
ISBLDCCW NTR1  BASE=*,LABEL=*                                                   
         MVI   RPSSW,0                                                          
         XC    CCWS,CCWS                                                        
         XC    IOB,IOB                                                          
         MVI   IOB,X'C3'           SET DC/CC/NOTRELATED/NOAPPENDG               
         LA    RE,ECB                                                           
         ST    RE,IOB+4                                                         
         LA    RE,CCWS                                                          
         ST    RE,IOB+16                                                        
         L     RE,ISFADCB          GET DCB ADDRESS                              
         STCM  RE,7,IOB+21                                                      
         LA    R0,SEEK                                                          
         ST    R0,CCW1                                                          
         MVI   CCW1,7              SET SEEK                                     
         MVI   CCW1+4,X'40'                                                     
         MVI   CCW1+7,6                                                         
*                                                                               
         LA    R0,SRCH                                                          
         ST    R0,CCW2                                                          
         MVI   CCW2,X'31'          SET SRCH ID EQL                              
         MVI   CCW2+4,X'40'                                                     
         MVI   CCW2+7,5                                                         
*                                                                               
         LA    R0,CCW2                                                          
         ST    R0,CCW3                                                          
         MVI   CCW3,8                                                           
         MVI   CCW3+4,X'40'                                                     
*                                                                               
         MVI   CCW4,X'06'          SET READ DATA                                
         OI    CCW4+4,X'04'        SET IDAW FLAG (BIT 37)                       
         MVC   CCW4+6(2),ISPDLN    FOR PD BUFFER LENGTH                         
*                                                                               
         LH    R0,ISPDLN           GET LENGTH                                   
         L     R1,ISBUFF1          AND DATA ADDRESS                             
         BRAS  RE,SETIDAWS                                                      
         LA    R0,IDAWS                                                         
         STCM  R0,7,CCW4+1                                                      
         EJECT                                                                  
***********************************************************************         
* TRANSLATE DISK ADDRESS AT 0(R7) USING EXTENT AT 0(R8)               *         
***********************************************************************         
ISCCHH   MVC   SAVEDA,0(R7)        SAVE DISK ADDR FOR TRACE DATA                
         LA    R8,ISXTNT           ALWAYS POINT TO FIRST EXTENT                 
         XC    SEEK,SEEK                                                        
         CLC   0(4,R7),=F'-1'      DUMMY ADDRESS SET BY ISCPUID                 
         BNE   ISCCHH1                                                          
         LH    RF,2(R8)            POINT TO LOW CYL                             
         LH    RE,4(R8)            POINT TO LOW TRACK                           
         B     ISCCHH8                                                          
*                                                                               
ISCCHH1  XR    RE,RE               DSK ADDR FORM IS TTTTTBRR                    
         ICM   RE,7,0(R7)          00TTTTTB                                     
         SRL   RE,4                000TTTTT                                     
         OR    RE,RE                                                            
         JZ    *+2                 DIE=ZERO TRACK                               
*                                                                               
         XR    R0,R0               TRAVERSE EXTENT MATRIX                       
         XR    R1,R1                                                            
ISCCHH2  ICM   R1,3,12(R8)                                                      
         AR    R0,R1                                                            
         CR    RE,R0                                                            
         BH    ISCCHH4                                                          
         SR    R0,R1                                                            
         SR    RE,R0                                                            
         B     ISCCHH6                                                          
*                                                                               
ISCCHH4  AHI   R8,14                                                            
         CLI   0(R8),X'FF'                                                      
         BNE   ISCCHH2                                                          
*                                                                               
ISEOF    MVI   P3+1,X'04'          SET EOF                                      
         XC    ISPDDA(8),ISPDDA    SET BUFF CONTENTS NOT VALID                  
         XC    ISPDPTR,ISPDPTR     CLEAR SEQ READ POINTER                       
         ICM   R1,15,ISFXTAB       TEST FOR EXTENDED BUFFERS                    
         BZ    XMOD                                                             
         XC    0(ISXTBLN,R1),0(R1)                                              
         B     XMOD                EXIT MODULE                                  
                                                                                
***********************************************************************         
* RE NOW CONTAINS REL TRK FOR THIS XTNT                               *         
***********************************************************************         
ISCCHH6  AH    RE,4(R8)            ADD LOW TRACK                                
         BCTR  RE,0                                                             
         SRDA  RE,32                                                            
         LH    R0,ISTRKS                                                        
         DR    RE,R0               RF HAS CYL, RE HAS TRK                       
         AH    RF,2(R8)            ADD LOW CYL                                  
         MVC   SEEK+6(1),2(R7)     SET REC                                      
         NI    SEEK+6,X'0F'                                                     
*                                                                               
ISCCHH8  STH   RF,SEEK+2           SET CYL                                      
         STH   RE,SEEK+4           SET TRK                                      
         XC    ISFSEEK,ISFSEEK     SET SEEK ADDR IN DTF (MBBCCHHR)              
         MVC   ISFSEEK(1),1(R8)                                                 
         MVC   ISFSEEK+3(5),SEEK+2                                              
         MVC   ISFUC,0(R8)         SET SEQNUM/DEVTYP IN ISF                     
         MVC   IOB+32(8),ISFSEEK   SET SEEK ADDR IN IOB (MBBCCHHR)              
         B     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* FILE INITIALIZATION ROUTINES                                        *         
*                                                                     *         
* OFFLINE: ACQUIRE PRIME DATA BUFFERS AND SAVE AREAS FOR KEYS         *         
*                                                                     *         
* ONLINE : DATA BUFFERS ARE ACQUIRED BY TASK, NOT BY FILE SO CANT BE  *         
*          DONE HERE                                                  *         
*                                                                     *         
* BOTH   : GETMAIN AN AREA AND BUILD INDEX. WHEN ALL CI RECORDS READ, *         
*          SAVE TTBR OF LAST IN ISCILAST.                             *         
*          THEN FIND LAST OVERFLOW RECORD AND SET ISOVLAST            *         
***********************************************************************         
INIT     NTR1  BASE=*,LABEL=*                                                   
         L     RF,=A(ISOPEN)       CHECK FOR SPECIAL COMMANDS                   
         C     RF,ISROUTA                                                       
         BE    EXIT                                                             
         L     RF,=A(ISCLOSE)                                                   
         C     RF,ISROUTA                                                       
         BE    EXIT                                                             
         L     RF,=A(ISCPUID)                                                   
         C     RF,ISROUTA                                                       
         BE    EXIT                                                             
         L     RF,=A(ISOPOLD)                                                   
         C     RF,ISROUTA                                                       
         BE    EXIT                                                             
*                                                                               
         LA    R1,ISXTNT           CHECK FILE STATUS                            
         OC    10(2,R1),10(R1)                                                  
         JZ    *+2                 DIE=FILE NOT OPEN                            
         OC    12(2,R1),12(R1)                                                  
         JNZ   *+2                 DIE=ALREADY INIT                             
*                                                                               
         MVC   DUB(4),=C'SSET'     SUSPEND TIMER DURING INITIALISATION          
         BRAS  RE,GOTICTOC                                                      
                                                                                
***********************************************************************         
* ALLOCATE DATA BUFFERS                                               *         
* NOTE THAT KEY AREAS ARE ALLOCATED BELOW THE LINE BECAUSE THEY ARE   *         
* ARE REFERENCED BY DATAMGR                                           *         
***********************************************************************         
INIBUF   MVI   ONLINE,C'Y'                                                      
         ICM   R1,15,VSSB          ALLOCATION BY TASK DONE IF ONLINE            
         BZ    *+14                                                             
         OC    0(2,R1),0(R1)                                                    
         BNZ   SETDTF                                                           
*                                                                               
         MVI   ONLINE,C'N'         SET NOT ON-LINE FLAG                         
         OI    ISCMPRSW,X'20'      SET BEEN THROUGH INIT FLAG                   
*                                                                               
         LH    R0,ISPDLN                                                        
         TM    ISCMPRSW,X'40'      TEST ONE OR TWO BUFFERS                      
         BO    *+6                 FLAG IS ON IF ONLY 1                         
         AR    R0,R0               ELSE DOUBLE LENGTH                           
*                                                                               
         MVI   GMFLAG,GMFHI+GMFPG                                               
         BRAS  RE,GETMAIN                                                       
*                                                                               
         ST    R1,ISBUFF1                                                       
         AH    R1,ISPDLN                                                        
         TM    ISCMPRSW,X'40'      TEST ONE OR TWO BUFFERS                      
         BO    *+8                                                              
         ST    R1,ISBUFF2          SET ADDR OF SECOND BUFFER                    
         BCTR  R1,0                                                             
         ST    R1,ISBUFF1X                                                      
*                                                                               
         LH    R0,ISKEYLN                                                       
         MHI   R0,3                                                             
         MVI   GMFLAG,0                                                         
         BRAS  RE,GETMAIN                                                       
*                                                                               
         ST    R1,ISPDKEY                                                       
         AH    R1,ISKEYLN                                                       
         ST    R1,ISPDPRKY                                                      
         AH    R1,ISKEYLN                                                       
         ST    R1,ISTIHIKY                                                      
                                                                                
***********************************************************************         
* SET DEVICE DEPENDENT DATA IN DTF                                    *         
***********************************************************************         
SETDTF   MVC   ISTRKS,DEVTRKS      SET TRKS/CYL                                 
         XR    R0,R0                                                            
         ICM   R0,3,ISPDLN                                                      
         BRAS  RE,SETDTFR          GET PD RECS/TRK                              
         STH   R0,ISHIPD                                                        
         MVC   ISTILN,ISPDLN       ISTILN=ISPDLN                                
                                                                                
***********************************************************************         
* ALLOCATE EXTENDED IOAREAS IF NECESSARY NOW BUFFER SIZES ARE FIXED   *         
***********************************************************************         
         CLI   ONLINE,C'Y'                                                      
         BE    SETDTF04                                                         
         XR    R0,R0                                                            
         ICM   R0,1,ISFBUFFS       TEST EXTENDED IOAREAS REQUESTED              
         BZ    SETDTF04            NO                                           
         MH    R0,ISPDLN                                                        
         AHI   R0,((ISXMAX+1)*ISXTBLN)  PLUS ROOM FOR TABLE                     
*                                                                               
         MVI   GMFLAG,GMFHI                                                     
         BRAS  RE,GETMAIN                                                       
*                                                                               
         ST    R1,ISFXTAB          SAVE TABLE ADDRESS                           
         USING ISXTABD,R1                                                       
         XC    0(ISXTBLN,R1),0(R1) CLEAR FIRST ENTRY                            
         LA    R1,ISXTBLN(R1)      AND POINT TO NEXT                            
*                                                                               
         LA    RE,(ISXMAX*ISXTBLN)(R1) POINT TO FIRST IOAREA                    
         XR    RF,RF                                                            
         IC    RF,ISFBUFFS         GET NUMBER OF IOAREAS                        
         LHI   R0,ISXMAX                                                        
         CR    RF,R0                                                            
         BNH   *+6                                                              
         LR    RF,R0                                                            
*                                                                               
SETDTF02 XC    ISXTABD(ISXTBLN),ISXTABD CLEAR THE ENTRY                         
         ST    RE,ISXTBADR         SET IOAREA ADDRESS                           
         AH    RE,ISPDLN           BUMP TO NEXT                                 
         LA    R1,ISXTBLN(R1)      POINT TO NEXT TABLE ENTRY                    
         BCT   RF,SETDTF02                                                      
                                                                                
***********************************************************************         
* ALLOCATE TRACK INDEX BUFFER IF OFFLINE                              *         
***********************************************************************         
SETDTF04 XC    ISTITRKL,ISTITRKL                                                
         XC    ISTIBUFF,ISTIBUFF   MAKE SURE STARTS ZERO                        
         CLI   ONLINE,C'Y'                                                      
         BE    SETDTF06                                                         
*                                                                               
*NOP*    CLI   ISFBUFFS,0          TEST EXTENDED IOAREAS                        
*NOP*    BNE   SETDTF06            YES - NO TIBUFF NEEDED                       
*                                                                               
         LH    R0,ISTILN           GETMAIN STORAGE AREA FOR TIBUFF              
         MVI   GMFLAG,GMFHI                                                     
         BRAS  RE,GETMAIN                                                       
         ST    R1,ISTIBUFF                                                      
         B     SETDTF06                                                         
*                                                                               
SETDTF06 XR    RE,RE                                                            
         LA    R1,ISXTNT                                                        
SETDTF08 LH    R7,2(R1)            GET LOW CYL                                  
         MH    R7,ISTRKS           X TRKS/CYL                                   
         AH    R7,4(R1)            ADD LOW TRK                                  
         LH    R8,6(R1)            GET HI CYL                                   
         MH    R8,ISTRKS           X TRKS/CYL                                   
         AH    R8,8(R1)            ADD HI TRK                                   
         SR    R8,R7                                                            
         LA    R8,1(R8)                                                         
         STH   R8,12(R1)           NUMBER OF TRACKS IN THIS EXTENT              
         LA    R1,14(R1)                                                        
         CLI   0(R1),X'FF'                                                      
         BNE   SETDTF08                                                         
                                                                                
***********************************************************************         
* READ FIRST RECORD ON FILE - THIS HAS PDIXOV HEADER INFORMATION      *         
***********************************************************************         
         MVC   FULL,=XL4'00001100' FIRST RECORD FOR PDIXOV FILE                 
         LA    R7,FULL                                                          
         BRAS  RE,ISBLDCCW                                                      
*                                                                               
         BRAS  RE,INIEXCP                                                       
         XR    R0,R0                                                            
         BRAS  RE,EXCPCHK                                                       
         TM    ERRF+1,X'04'        TEST EOF RECORD                              
         BO    *+12                                                             
         TM    ERRF+1,X'08'        TEST N/F                                     
         BZ    INITC02                                                          
         DC    H'0'                DIE=FIRST REC ERR                            
*                                                                               
INITC02  L     RF,ISBUFF1          GET LOAD INFORMATION                         
         USING ISVBLK1,RF                                                       
         MVC   NUMTI,ISVTICNT                                                   
         MVC   FSTTI,ISVTIS                                                     
         MVC   ISPDLAST,FSTTI                                                   
         OI    FSTTI+2,X'01'       BLOCK 1                                      
         MVC   FSTOV,ISVOVS                                                     
         DROP  RF                                                               
*                                                                               
         L     R0,NUMTI                                                         
         MH    R0,ISKEYLN4                                                      
         AHI   R0,16                                                            
         AHI   R0,4095             ROUND TO NEXT WHOLE 4K                       
         SRL   R0,12                                                            
         SLL   R0,12                                                            
         MVI   GMFLAG,GMFHI                                                     
         BRAS  RE,GETMAIN                                                       
         ST    R1,ISINDX                                                        
*                                                                               
* START READING THE TI BLOCKS AND PULL OUT THE HIGH KEY FROM EACH               
*                                                                               
         L     R3,ISINDX           R3=A(TRACK INDEX AREA)                       
         AHI   R3,16               FIRST 16 BYTES ARE RESERVED                  
         L     R4,NUMTI                                                         
         MVC   FULL,FSTTI                                                       
*                                                                               
INITC04  LA    R7,FULL                                                          
         BRAS  RE,ISBLDCCW                                                      
         BRAS  RE,INIEXCP                                                       
         XR    R0,R0                                                            
         BRAS  RE,EXCPCHK                                                       
*                                                                               
         L     RF,ISBUFF1                                                       
         AH    RF,ISPDLN                                                        
         SH    RF,ISKEYLN                                                       
         LH    RE,ISKEYLN1                                                      
         EX    RE,MVCR3RF                                                       
         AH    R3,ISKEYLN                                                       
         MVC   0(4,R3),FULL        SAVE DISK ADDRESS FOR THIS TI BLOCK          
         AHI   R3,4                                                             
*                                                                               
         XR    R0,R0               GET NEXT BLOCK ON FILE FOR SEQ READ          
         ICM   R0,7,FULL           RE HAS TTTTT                                 
         SRDL  R0,4                                                             
         SRL   R1,32-4             RF HAS B                                     
         AHI   R1,1                                                             
         CH    R1,ISHIPD           COMPARE TO HI REC ON PD TRACK                
         BNH   *+12                                                             
         AHI   R0,1                SET T TO T+1                                 
         LHI   R1,1                SET B TO 1                                   
*                                                                               
         SLL   R0,4                                                             
         OR    R0,R1               RESTORE TTTTTB                               
         STCM  R0,7,FULL           SET NEW VALUE                                
         BCT   R4,INITC04                                                       
*                                                                               
         L     RF,ISINDX                                                        
         ST    R3,0(RF)            SET A(END OF ISINDX) AT +0                   
                                                                                
***********************************************************************         
* OVERFLOW STARTS AT FSTOV - WE NEED TO FIND THE EOF POINT            *         
***********************************************************************         
INITOV   XR    RE,RE                                                            
         ICM   RE,7,FSTOV          NEXT TRACK IS LOW BOUND OF BINSRCH           
         SRL   RE,4                                                             
         STCM  RE,7,LOARG2                                                      
*                                                                               
INITV02  LA    R1,ISXTNT           SEARCH EXTENTS TO GET HIGHEST TRACK          
         XR    RE,RE                                                            
*                                                                               
INITV04  XR    R0,R0                                                            
         ICM   R0,3,12(R1)         GET NUMBER OF TRKS THIS EXTENT               
         AR    RE,R0               ADD TO TOTAL                                 
         AHI   R1,14                                                            
         CLI   0(R1),X'FF'                                                      
         BNE   INITV04             NOW THIS FUCKER CAN FIND EOF WHEN            
         AHI   RE,1                THE FILE IS FULL TOO                         
         STCM  RE,7,HIARG2         SET HI TRACK + 1 AS HIGH BOUND               
*                                                                               
INITV06  XR    R0,R0                                                            
         ICM   R0,7,LOARG2                                                      
         XR    RE,RE                                                            
         ICM   RE,7,HIARG2                                                      
         AR    R0,RE                                                            
         SRL   R0,1                R0=MIDPOINT TRACK                            
         STCM  R0,7,CURARG2                                                     
         CLC   LOARG2,CURARG2      WHEN LOARG=CURARG, WE'VE FOUND TRACK         
         BE    INITOV14                                                         
*                                                                               
         XC    FULL,FULL                                                        
         XR    R0,R0                                                            
         ICM   R0,7,CURARG2        0TTTTT                                       
         SLL   R0,4                TTTTT0                                       
         STCM  R0,7,FULL                                                        
         OI    FULL+2,X'01'        FIRST RECORD ON TRACK                        
*                                                                               
         LA    R7,FULL                                                          
         BRAS  RE,ISBLDCCW                                                      
         BRAS  RE,INIEXCP                                                       
         XR    R0,R0                                                            
         BRAS  RE,EXCPCHK                                                       
         LA    RE,LOARG2           IF DATA, SET LOARG2=CURARG2                  
         TM    ERRF+1,X'08'        TEST NOT FOUND                               
         BZ    *+8                 RECORD WAS FOUND                             
         LA    RE,HIARG2                                                        
         MVC   0(3,RE),CURARG2                                                  
         B     INITV06                                                          
*                                                                               
INITOV14 ICM   R0,7,CURARG2        SET TRACK                                    
         SLL   R0,32-20                                                         
         ST    R0,FULL                                                          
*                                                                               
INITOV16 XR    RE,RE                                                            
         IC    RE,FULL+2           ADD 1 TO REC                                 
         AHI   RE,1                                                             
         STC   RE,FULL+2                                                        
         N     RE,=XL4'0000000F'                                                
         CH    RE,ISHIPD           TEST GT HI REC                               
         BH    INITOV22            YES - SET REC 0 NEXT TRK                     
*                                                                               
INITOV18 LA    R7,FULL                                                          
         BRAS  RE,ISBLDCCW                                                      
         XR    R0,R0                                                            
         BRAS  RE,INIEXCP                                                       
         BRAS  RE,EXCPCHK                                                       
         TM    ERRF+1,X'08'        TEST NOT FOUND                               
         BNO   INITOV16                                                         
*                                                                               
INITOV20 XR    RE,RE               SET PREVIOUS REC- THIS TRK                   
         IC    RE,FULL+2                                                        
         BCTR  RE,0                                                             
         STC   RE,FULL+2                                                        
         B     INITOVX                                                          
*                                                                               
INITOV22 XR    RE,RE               SET REC 0 OF NEXT TRK                        
         ICM   RE,7,FULL                                                        
         SRL   RE,4                GET TTTTT                                    
         AHI   RE,1                                                             
         SLL   RE,32-20            MAKE IT TTTTT0                               
         ST    RE,FULL                                                          
*                                                                               
INITOVX  MVC   ISOVLAST,FULL                                                    
         MVC   ISCILAST,=XL4'FFFFFFFF'                                          
         XC    ISPDDA(12),ISPDDA   SET BUFFER CONTENTS NOT VALID                
         MVC   DUB(4),=C'RSET'     RESTART TIMER AT END OF INITIALISE           
         BRAS  RE,GOTICTOC                                                      
         B     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* SUBROUTINE COMPUTES RECS/TRK FOR RECLEN IN R0                       *         
***********************************************************************         
SETDTFR  NTR1                                                                   
         LTR   R0,R0                                                            
         JZ    *+2                 DIE=REC LEN ZERO                             
         C     R0,=F'32767'                                                     
         JH    *+2                 DIE=REC LEN > 32K                            
*&&DO                                                                           
         CLI   DEVSUB,5            3390 IS ONLY VALID CURRENT DEVICE            
         BE    SET3390                                                          
         SR    RE,RE                                                            
         SR    RF,RF                                                            
         ICM   RF,3,DEVCAPL                                                     
         OC    DEVMOD,DEVMOD                                                    
         BZ    *+16                                                             
         AH    R0,DEVMOD           ADJUST FOR MODULO                            
         SRL   R0,5                                                             
         SLL   R0,5                                                             
         AH    R0,DEVIRG           ADJUST FOR IRG                               
         DR    RE,R0                                                            
         LTR   R0,RF               RETURN RECS/TRK IN R0                        
         BNZ   SETDTFRX                                                         
         DC    H'0'                DIE=REC LEN > TRK                            
*&&                                                                             
                                                                                
***********************************************************************         
* 3390 COMPUTATION ROUTINES                                           *         
* DN=(DL+6+231)/232                                                   *         
* D=9+(DL+6*DN)+6+33)/34                                              *         
* SPACE = 10+D                                                        *         
***********************************************************************         
SET3390  LR    RE,R0               GET RECLEN                                   
         LA    RE,237(RE)          RE=DL+6+231                                  
         SRDL  RE,32                                                            
         D     RE,=F'232'          RF=(DL+237)/232                              
         MHI   RF,6                RF=6*DN                                      
         AR    RF,R0               RF=DL+6*DN                                   
         LA    RF,39(RF)                                                        
         SR    RE,RE                                                            
         D     RE,=F'34'                                                        
         LA    RF,19(RF)           GIVES SPACE REQUIRED IN RF                   
         SR    R0,R0                                                            
         LHI   R1,1729             1729=NUMBER OF CELLS/TRACK                   
         DR    R0,RF               DIVIDE BY SPACE/RECORD                       
         LR    R0,R1               GIVES MAX RECS/TRACK (TRUNCATED)             
         B     SETDTFRX                                                         
*                                                                               
SETDTFRX XIT1  REGS=(R0)                                                        
*                                                                               
GOTICTOC ICM   RF,15,VTICTOC                                                    
         BZR   RE                                                               
         LR    R0,RE                                                            
         LA    R1,DUB                                                           
         BASSM RE,RF               CALL TICTOC IN APPROPRIATE MODE              
         SAM31                                                                  
         LR    RE,R0                                                            
         BR    RE                  BACK TO CALLER IN 31-BIT MODE                
         EJECT                                                                  
***********************************************************************         
* NOTE THIS SYNCS WITH DMISLDDS - CHANGES THERE MUST COME HERE TOO    *         
***********************************************************************         
ISVBLK1  DC    C'PDIXOV BLOCK FORMAT - TI START='                               
ISVTIS   DC    AL4(0)                                                           
         DC    C'NUMBER OF TI BLOCKS='                                          
ISVTICNT DC    AL4(0)                                                           
         DC    C'OV START ADDRESS='                                             
ISVOVS   DC    AL4(0)                                                           
         DC    C'LOADED ON: '                                                   
ISVOVLD  DC    CL16' '                                                          
ISVBLK1L EQU   *-ISVBLK1                                                        
         EJECT                                                                  
***********************************************************************         
* CLOSE A FILE                                                        *         
***********************************************************************         
ISCLOSE  BRAS  RE,AISCLOSE         CALL ISCLOSE AT INDIRECT ADDRESS             
         B     XMOD                                                             
         EJECT                                                                  
***********************************************************************         
* EXECUTE CHANNEL PROGRAM                                             *         
***********************************************************************         
EXCP     NTR1  BASE=*,LABEL=*                                                   
         LA    R0,CCW1                                                          
         ST    R0,IOB+16                                                        
         CLI   RPSSW,0             INSERT RPS CCW IF ACTIVE                     
         BE    EXCP10                                                           
         LA    R0,CCW0                                                          
         ST    R0,IOB+16                                                        
         MVC   CCW0,CCW1                                                        
         XC    CCW1,CCW1                                                        
         LA    R0,SECTOR                                                        
         ST    R0,CCW1                                                          
         MVI   CCW1,X'23'          SET OPCD=SET SECTOR                          
         MVI   CCW1+4,X'40'        SET CC                                       
         MVI   CCW1+7,1            SET LEN=1                                    
         MVI   RPSSW,0                                                          
*                                                                               
EXCP10   L     RF,IOB+16           REMOVE LONG SEEK IF PRESENT                  
         CLI   0(RF),X'07'                                                      
         BNE   EXCP12                                                           
         LA    RF,8(RF)                                                         
         ST    RF,IOB+16                                                        
*                                                                               
EXCP12   CLI   CCW4,6              TEST READ DATA                               
         BNE   EXCP14                                                           
         TM    CCW4+4,X'10'        TEST SUPRESS DATA MOVE ON READ               
         BO    EXCP14              YES - THIS READ DOES NOTHING                 
         LT    R1,ISFXTAB          TEST EXTENDED BUFFERS IN USE                 
         BNZ   ISX                 YES - SEARCH BUFFERS FOR MATCH               
*                                                                               
EXCP14   XC    ECB,ECB             EXECUTE CHANNEL PROGRAM                      
         EXCP  IOB                                                              
         MVI   BUFFOK,0            CLEAR BUFFER OK FLAGS                        
         LA    R1,ECB                                                           
         ICM   RF,15,VADWAIT       CALL V(ADWAIT) IF PRESENT                    
         BZ    EXCPWAIT                                                         
         BASSM RE,RF               BRANCH AND SET TO 24-BIT MODE                
         SAM31                     THEN GET BACK TO 31-BIT MODE                 
*                                                                               
EXCPWAIT TM    0(R1),X'40'         TEST I/O COMPLETE                            
         BO    EXCPWAIX                                                         
         WAIT  ECB=(1)             WAIT FOR I/O COMPLETION                      
EXCPWAIX LHI   R0,-1                                                            
*&&DB                                                                           
         CLI   GMFLAG,C'Y'         SPECIAL FOR DEBUGGING                        
         BNE   *+6                                                              
         XR    R0,R0                                                            
*&&                                                                             
         BRAS  RE,EXCPCHK                                                       
         B     EXIT                                                             
                                                                                
***********************************************************************         
* SAVE CURRENT I/O DATA IN OLDEST SLOT IN TABLE. IF A MATCHING BUFFER *         
* IS FOUND MOVE ENTRY TO TOP OF TABLE AND SET ENTRY FREE FOR REUSE.   *         
* FIRST TABLE ENTRY ALWAYS CONTAINS ADDRESS/LEN OF LAST ACTUAL I/O.   *         
* NOW INLINE CODE AS ONLY CALLER WAS EXCP. USED TO BE A SUBROUTINE    *         
* WITH EXIT CC=EQL IF FOUND, CC=NEQ IF NOT FOUND (NEED TO DO I/O)     *         
***********************************************************************         
         USING ISXTABD,R1          R1=A(ISFXTAB)                                
ISX      LLC   RF,ISFBUFFS         RF=NUMBER OF BUFFERS                         
         LA    R1,ISXTBLN(R1)      R1=A(SECOND TABLE ENTRY)                     
         MVC   DUB1(4),=X'FFFFFFFF'                                             
         XC    DUB1+4(12),DUB1+4                                                
*                                                                               
ISX01    LT    R0,ISXTBSEQ         R0=SEQUENCE NUMBER OF ENTRY                  
         BZ    ISX02                                                            
         CLC   ISFSEEK,ISXTBSK     TEST IF SEEK ADDRESS MATCHES                 
         BNE   ISX02                                                            
         ST    R1,DUB2+4           SAVE A(MATCHING ENTRY)                       
         B     ISX04                                                            
ISX02    CL    R0,DUB1             TEST IF LOWEST SEQ NUM                       
         BNL   ISX04                                                            
         STM   R0,R1,DUB1          SAVE VALUE AND A(LOWEST ENTRY)               
ISX04    AHI   R1,ISXTBLN                                                       
         BCT   RF,ISX01                                                         
*                                                                               
ISX05    L     R1,ISFXTAB          R1=A(TOP OF TABLE)                           
         OC    ISXTBADR,ISXTBADR   TEST ANY DATA TO BE SAVED                    
         BZ    ISX20                                                            
         LT    R5,DUB1+4           TEST IF LOW SEQ BUFFER FOUND                 
         BZ    ISX20                                                            
                                                                                
***********************************************************************         
* MOVE DATA FROM TOP OF TABLE (R1) OVER OLDEST ENTRY (R5)             *         
***********************************************************************         
ISX10    MVC   ISXTDATA-ISXTABD(ISXTDATL,R5),ISXTDATA                           
         LM    RE,RF,ISXTBADR                                                   
         LM    R0,R1,ISXTBADR-ISXTABD(R5)                                       
         MVCL  R0,RE               MOVE BUFFER TO OLDEST ENTRY                  
                                                                                
***********************************************************************         
* NOW BUILD FIRST TABLE ENTRY FOR THIS I/O                            *         
***********************************************************************         
ISX20    L     R1,ISFXTAB          R1=A(TOP OF TABLE)                           
         USING ISXTABD,R1                                                       
         MVC   ISXTBADR,IDAWS      DATA ADDRESS FROM FIRST IDAW                 
         LLH   R0,CCW4+6                                                        
         ST    R0,ISXTBDL          DATA LENGTH                                  
         MVC   ISXTBSK,ISFSEEK     SEEK ADDRESS                                 
         XC    ISXTBPTR,ISXTBPTR                                                
         XC    ISXTBKEY,ISXTBKEY                                                
         LHI   R0,1                                                             
         AL    R0,ISXTBHI          BUMP HIGHEST SEQUENCE NUMBER                 
         ST    R0,ISXTBHI                                                       
         ST    R0,ISXTBSEQ         SET AS CURRENT SEQUENCE NUMBER               
*                                                                               
ISX21    LT    R1,DUB2+4           R1=A(MATCHING ENTRY)                         
         BZ    ISX23                                                            
         CLI   ISTI,C'Y'           IGNORE TI RECORDS                            
         BE    ISX30                                                            
         TM    READTYPE,FLUSH      TEST IF WANT FORCED READ OF BLOCK            
         BZ    ISX30               NO-THEN USE THIS BUFFER                      
         XC    ISXTBSEQ,ISXTBSEQ   THROW THIS BUFFER AWAY                       
         XC    ISXTBSK,ISXTBSK                                                  
*                                                                               
ISX23    B     EXCP14              DO I/O IF NO MATCHING ENTRY (CC NEQ)         
                                                                                
***********************************************************************         
* MATCHING BUFFER FOUND - MOVE IT TO THE FIRST (CURRENT) TABLE ENTRY  *         
* R1 POINTS TO THE TABLE ENTRY THAT HAS THE MATCHING BUFFER           *         
***********************************************************************         
ISX30    XC    ISXTBSEQ,ISXTBSEQ   SET SLOT FREE NOW                            
         OC    ISXTBPTR,ISXTBPTR   TEST IF VALID POINTER                        
         BZ    ISX34                                                            
         CLC   ISXTBPTR,=X'FFFFFFFE'                                            
         BL    ISX32                                                            
         LH    RE,ISKEYLN1         CLEAR KEYS IF NOT A DATA BLOCK               
         L     RF,ISPDKEY                                                       
         EX    RE,XCRF                                                          
         XC    ISPDPTR,ISPDPTR                                                  
         B     ISX34                                                            
*                                                                               
ISX32    LH    RE,ISKEYLN1         RESTORE ISPDKEY FROM ENTRY AT 0(R1)          
         L     RF,ISPDKEY                                                       
         EX    RE,MVCRFXR1                                                      
         L     RF,ISPDPRKY         RESTORE ISPDPRKY FROM SAME                   
         EX    RE,MVCRFXR1                                                      
         NI    BUFFOK,X'80'        RESET ALL BUT READ FLAG                      
         TM    BUFFOK,X'80'        TEST READ                                    
         BZ    ISX34                                                            
         OI    BUFFOK,X'03'        SET LOW KEY/HIGH KEY CHECKED                 
*                                                                               
ISX34    LM    RE,RF,ISXTBADR      SET ADDR/LEN OF MATCHED BUFFER               
         L     R7,ISXTBPTR         SAVE BUFFER POINTER                          
         LR    R5,R1               R5=A(OLDEST ENTRY)                           
         L     R1,ISFXTAB          SET ADDR/LEN OF FIRST ENTRY                  
         L     R0,ISXTBADR                                                      
         LR    R1,RF                                                            
         MVCL  R0,RE               COPY MATCHING BUFFER                         
*                                                                               
         L     R1,ISFXTAB          R1=A(FIRST ENTRY)                            
         L     RE,ISXTBADR         RE=A(FIRST ENTRY BUFFER)                     
         XC    ISPDPTR,ISPDPTR                                                  
         LTR   R7,R7               GET SAVED DISPLACEMENT                       
         BZ    ISXX                                                             
         AR    RE,R7                                                            
         ST    RE,ISPDPTR          SET A(KEY) IN DTF                            
*                                                                               
         ST    R7,ISXTBPTR         SET DISP/KEY IN FIRST ENTRY                  
         MVC   ISXTBKEY,ISXTBKEY-ISXTABD(R5)                                    
         LHI   R0,1                                                             
         AL    R0,ISXTHITS                                                      
         ST    R0,ISXTHITS         BUMP NUMBER OF BUFFER HITS                   
*                                                                               
ISXX     B     EXIT                EXIT IF BUFFER FOUND  (CC EQL)               
         EJECT                                                                  
***********************************************************************         
* SPLIT OFF CHECK ERROR CODE FROM EXCP SO INIEXCP CAN USE IT TOO      *         
***********************************************************************         
EXCPCHK  NTR1  BASE=*,LABEL=*                                                   
         CHI   R0,-1                                                            
         BE    *+6                                                              
         XR    R0,R0                                                            
*                                                                               
EXCP2    XC    ERRF,ERRF                                                        
         CLI   IOB+4,X'7F'         TEST NORMAL COMPLETION                       
         BE    EXCP60                                                           
         CLI   IOB+4,X'41'         TEST PERMANENT ERROR                         
         BE    EXCP20                                                           
         CLI   IOB+4,X'42'         TEST OUTSIDE EXTENTS                         
         BE    EXCP50                                                           
         DC    H'0'                DIE=EXCP COMPLETION                          
*                                                                               
EXCP20   TM    IOB+12,X'02'        TEST CSW UNIT STAT FOR UNIT CHECK            
         BO    EXCP30                                                           
         TM    IOB+12,X'01'        TEST CSW UNIT STAT FOR UNIT EXCPN            
         BZ    EXCP22                                                           
         MVI   ERRF+1,X'04'        SET EOF                                      
         B     EXCP60                                                           
*                                                                               
EXCP22   TM    IOB+12,X'FF'        TEST CSW UNIT STAT                           
         JNZ   *+2                 DIE=CSW UNIT STATUS                          
         TM    IOB+13,X'FF'        TEST CSW CHNL STAT                           
         BZ    EXCP30                                                           
         MVI   ERRF,X'80'          SET UNRECOVERABLE ERROR                      
         B     EXCP60                                                           
*                                                                               
EXCP30   TM    IOB+2,X'04'         TEST SENSE BYTE 0 ON UNIT CHECK              
         BO    EXCP40                                                           
         CLI   IOB+2,0                                                          
         BNE   EXCP40                                                           
*                                                                               
EXCP32   TM    IOB+3,X'08'         TEST SENSE BYTE 1 ON UNIT CHECK              
         BO    EXCP34                                                           
         B     EXCP40              UNRECOVERABLE ERROR                          
EXCP34   MVI   ERRF+1,X'08'        SET NO RECORD FOUND                          
         B     EXCP60                                                           
*                                                                               
EXCP40   MVI   ERRF,X'80'          SET UNRECOVERABLE ERROR                      
         B     EXCP60                                                           
*                                                                               
EXCP50   MVI   ERRF,X'01'          SET REFERENCE OUTSIDE EXTENTS                
         B     EXCP60                                                           
*                                                                               
EXCP60   CLI   CCW4,6              TEST READ DATA                               
         BE    EXCP64              YES                                          
         LT    R1,ISFXTAB          TEST FOR EXTENDED BUFFERS                    
         BZ    EXCP64                                                           
         USING ISXTABD,R1                                                       
         XC    ISXTBSK,ISXTBSK     CLEAR THE FIRST ENTRY                        
         LLC   RF,ISFBUFFS                                                      
         AHI   R1,ISXTBLN          POINT TO SECOND ENTRY                        
*                                                                               
EXCP62   CLC   ISXTBSK,ISFSEEK     MATCH SEEK ADDRESS                           
         BNE   *+10                                                             
         XC    ISXTBSK,ISXTBSK     THEN CLEAR THIS ENTRY                        
         AHI   R1,ISXTBLN                                                       
         BCT   RF,EXCP62                                                        
         DROP  R1                                                               
*                                                                               
EXCP63   LTR   R0,R0               TEST OFFLINE                                 
         BNZ   *+14                                                             
EXCP64   OC    ERRF,ERRF                                                        
         B     EXIT                                                             
*                                                                               
EXCP70   OC    P3(2),ERRF          SET ERROR BITS AND EXIT IF ERROR             
         BZ    EXIT                                                             
         CLI   CCW4,X'5E'          TEST ERROR ON FULL TRK READ                  
         BNE   EXCP80              NO - PASS IT ON                              
         MVI   P6,0                SUPPRESS FOR RETRY                           
         XC    P3(2),P3            CLEAR ERROR FLAG                             
         LTR   RB,RB               SET CC NEQ                                   
         B     EXIT                AND RETURN ERROR TO CALLER                   
*                                                                               
EXCP80   XC    ISPDDA(8),ISPDDA    SET BUFF CONTENTS NOT VALID                  
         XC    ISPDPTR,ISPDPTR     CLEAR SEQ READ POINTER                       
         ICM   R1,15,ISFXTAB       TEST FOR EXTENDED BUFFERS                    
         BZ    XMOD                                                             
         XC    0(ISXTBLN,R1),0(R1)                                              
         B     XMOD                EXIT MODULE                                  
         EJECT                                                                  
***********************************************************************         
* INLINE EXCP FOR INITIALISE                                          *         
***********************************************************************         
INIEXCP  NTR1  BASE=*,LABEL=*                                                   
         L     RF,IOB+16           REMOVE LONG SEEK IF PRESENT                  
         CLI   0(RF),X'07'                                                      
         BNE   *+12                                                             
         LA    RF,8(RF)                                                         
         ST    RF,IOB+16                                                        
         XC    ECB,ECB                                                          
         EXCP  IOB                                                              
         WAIT  ECB=ECB                                                          
         B     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* BINARY SEARCH FOR REQUESTED TABLE ENTRY                             *         
* R1=A(KEY TO FIND)                                                   *         
* RF=A(RECORD) WITH CC EQL                                            *         
* RF=A(INSERTION POINT) WITH CC NEQ                                   *         
***********************************************************************         
BSRCH    NTR1  BASE=*,LABEL=*                                                   
         LR    R4,R1               R4=A(KEYARG)                                 
         L     R5,ISBUFF1                                                       
         AH    R5,0(R5)            R5=A(START OF DATA)                          
*                                                                               
         L     R0,ISBUFF1                                                       
         AH    R0,ISPDLN                                                        
         SR    R0,R5                                                            
         SRDL  R0,32               R0=LENGTH OF DATA IN BUFFER                  
*                                                                               
         LH    RF,ISKEYLN4         R0=LENGTH OF SINGLE ENTRY                    
         DR    R0,RF                                                            
         CHI   R1,6                                                             
         BL    SQSRCH              LESS THAN 6 - DO SEQUENTIAL SEARCH           
*                                                                               
         XR    R0,R0               R0=LOW                                       
         BCTR  R1,0                R1=HIGH                                      
         LH    RE,ISKEYLN1         RE=L'KEY-1                                   
*                                                                               
BSRCH02  CR    R0,R1               WHILE LOW <= HIGH                            
         BH    BSRCH04             R0 POINTS TO INSERTION POINT                 
*                                                                               
         LR    R3,R0               R3=MID                                       
         AR    R3,R1                                                            
         SRL   R3,1                MID=(HIGH+LOW)/2                             
*                                                                               
         LR    RF,R3                                                            
         MH    RF,ISKEYLN4                                                      
         AR    RF,R5               RF=A(TEST ENTRY)                             
*                                                                               
         EX    RE,BSMTCH           TRY TO MATCH KEY                             
         BE    BSXIT               KEY == K(MID)                                
*                                                                               
         BL    *+12                                                             
         LA    R0,1(R3)            IF CC HIGH : LOW=MID+1                       
         B     BSRCH02                                                          
*                                                                               
         LR    R1,R3               IF CC LOW : HIGH=MID-1;                      
         BCTR  R1,0                                                             
         B     BSRCH02                                                          
*                                                                               
BSRCH04  LR    RF,R0                                                            
         MH    RF,ISKEYLN4                                                      
         AR    RF,R5                                                            
         B     BSXIT                                                            
*                                                                               
SQSRCH   L     RF,ISBUFF1                                                       
         AH    RF,0(RF)            RF=A(START OF DATA)                          
         L     R1,ISBUFF1                                                       
         AH    R1,ISPDLN                                                        
         SH    R1,ISKEYLN4         R1=A(LAST ENTRY)                             
*                                                                               
         LH    R0,ISKEYLN4         R0=L'ENTRY                                   
         LH    RE,ISKEYLN1         RE=L'KEY-1                                   
*                                                                               
SSRCH02  EX    RE,BSMTCH           TRY TO MATCH KEY                             
         BNH   BSXIT                                                            
         BXLE  RF,R0,SSRCH02                                                    
         DC    H'0'                DIE=BINARY SEARCH                            
*                                                                               
BSMTCH   CLC   0(0,R4),0(RF)       COMPARE REQUESTED KEY WITH RECORD            
*                                                                               
BSXIT    ST    RF,FULL                                                          
         J     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* ERASE OLD PD BLOCK INDEX ENTRY                                      *         
***********************************************************************         
ERSBI    NTR1  BASE=*,LABEL=*                                                   
         BRAS  RE,CHKPD                                                         
*                                                                               
ERSB00   L     R5,ISBUFF1                                                       
         LH    R4,0(R5)                                                         
         AR    R4,R5               R4=A(FIRST KEY IN INDEX)                     
*                                                                               
         LH    RE,ISKEYLN4         RE=LENGTH OF SINGLE ENTRY                    
         LH    RF,ISPDLN                                                        
         AR    RF,R5                                                            
         BCTR  RF,0                RF=A(END-1 OF BLOCK)                         
*                                                                               
ERSB02   LH    R1,ISKEYLN                                                       
         AR    R1,R4               POINT R1 TO D/A PART OF NTRY                 
         CLC   DEADBLKA,0(R1)                                                   
         BE    ERSB04                                                           
         BXLE  R4,RE,ERSB02                                                     
*                                                                               
         L     R7,ISBUFF1                                                       
         OC    6(4,R7),6(R7)       IS THERE AN OVERFLOW BLKIND BLOCK?           
         JZ    *+2                 DIE=INV OFLOW BLKIND                         
*                                                                               
         LA    R7,6(R7)                                                         
         MVC   ISOVDA,0(R7)        SAVE DISK ADDRESS                            
         BRAS  RE,ISBLDCCW                                                      
         BRAS  RE,SETSCTR                                                       
         BRAS  RE,EXCP             AND READ THIS OVERFLOW BLOCK                 
         B     ERSB00                                                           
*                                                                               
ERSB04   LH    RF,0(R5)                                                         
         AR    RF,R5               RF=A(FIRST ENTRY)                            
*                                                                               
         LR    R1,R4               SHUFFLE ALL BEFORE OVER THIS ONE             
         SH    R1,ISKEYLN4         R1=A(MOVE FROM) - R4=A(MOVE TO)              
         LH    RE,ISKEYLN4                                                      
         BCTR  RE,0                RE=EXECUTE MOVE LENGTH                       
*                                                                               
ERSB06   CR    R4,RF               MOVED ENOUGH DOWN?                           
         BE    ERSB08              YES                                          
         EX    RE,MVCR4R1                                                       
         SH    R4,ISKEYLN4                                                      
         SH    R1,ISKEYLN4                                                      
         B     ERSB06                                                           
*                                                                               
ERSB08   LH    R4,0(R5)                                                         
         AR    R4,R5               R4=A(FIRST KEY IN INDEX)                     
         EX    RE,XCR4             CLEAR OUT THIS ENTRY                         
         LH    RF,0(R5)                                                         
         AH    RF,ISKEYLN4         ADJUST LENGTH                                
         STH   RF,0(R5)                                                         
*                                                                               
ERSBIX   BRAS  RE,CHKPD                                                         
         B     EXIT                EXIT TO WRITE UPDATED BLOCK INDEX            
         EJECT                                                                  
***********************************************************************         
* UPDATE PD BLOCK INDEX WITH NEW HIGH KEY                             *         
***********************************************************************         
UPDBI    NTR1  BASE=*,LABEL=*                                                   
         BRAS  RE,CHKPD                                                         
*                                                                               
         XC    ISOVDA,ISOVDA       ASSUME PD INDEX BLOCK INITIALLY              
*                                                                               
UPDB00   L     R5,ISBUFF1                                                       
         LH    R4,0(R5)                                                         
         AR    R4,R5               R4=A(FIRST KEY IN INDEX)                     
*                                                                               
         LH    R3,ISKEYLN1         R3=LENGTH OF KEY-1                           
*                                                                               
         LH    RE,ISKEYLN4         RE=LENGTH OF SINGLE ENTRY                    
         LH    RF,ISPDLN                                                        
         AR    RF,R5                                                            
         BCTR  RF,0                RF=A(END-1 OF BLOCK)                         
*                                                                               
         L     R1,ISPDKEY                                                       
UPDB02   EX    R3,*+8              SUB 1 FOR COMPARE                            
         B     *+10                                                             
         CLC   0(0,R1),0(R4)       FIND ISPDKEY                                 
         BE    UPDB04                                                           
         BXLE  R4,RE,UPDB02                                                     
*                                                                               
         L     R7,ISBUFF1                                                       
         OC    6(4,R7),6(R7)       IS THERE AN OVERFLOW BLKIND BLOCK?           
         JZ    *+2                 DIE=INV OFLOW BLKIND                         
*                                                                               
         LA    R7,6(R7)                                                         
         MVC   ISOVDA,0(R7)        SAVE DISK ADDRESS                            
         LA    R8,ISXTNTIX                                                      
         BRAS  RE,ISBLDCCW                                                      
         BRAS  RE,SETSCTR                                                       
         BRAS  RE,EXCP             AND READ THIS OVERFLOW BLOCK                 
         B     UPDB00                                                           
*                                                                               
UPDB04   L     R1,ISPDPRKY                                                      
         EX    R3,*+8                                                           
         B     *+10                                                             
         MVC   0(0,R4),0(R1)       COPY IN NEW KEY                              
*                                                                               
UPDBIX   BRAS  RE,CHKPD                                                         
         J     EXIT                EXIT TO WRITE UPDATED BLOCK INDEX            
*                                                                               
         LTORG                                                                  
         EJECT                                                                  
***********************************************************************         
* BUILD NEW BLKIND BLOCK                                              *         
***********************************************************************         
BLDNBI   NTR1  BASE=*,LABEL=*                                                   
         L     R0,ISBUFF1          CLEAR BUFFER                                 
         LH    R1,ISPDLN                                                        
         XR    RF,RF                                                            
         MVCL  R0,RE                                                            
*                                                                               
         L     R4,ISBUFF1                                                       
         MVC   2(4,R4),BLKINDEX    MARK LINK AS PD BLOCK INDEX                  
*                                                                               
         LH    RF,ISKEYLN4         ADDING 2 ENTRIES                             
         SLL   RF,1                                                             
         LH    R3,ISPDLN                                                        
         SR    R3,RF                                                            
         STH   R3,0(R4)            SET DISPLACEMENT TO FIRST DATA               
         AR    R3,R4               AND GO TO 2 ENTRIES FROM END                 
*                                                                               
         LA    R1,B1.SVBLKD        MAKE SURE FIRST TWO IN CORRECT ORDER         
         BRAS  RE,BLDNADD                                                       
         LA    R1,B2.SVBLKD                                                     
         BRAS  RE,BLDNADD                                                       
         BRAS  RE,CHKPD                                                         
         B     EXIT                                                             
*                                                                               
         USING SVBLKD,R1                                                        
BLDNADD  LH    RF,ISKEYLN1         ADD ENTRY TO BUFFER AT (R3)                  
         EX    RF,*+8                                                           
         B     *+10                                                             
         MVC   0(0,R3),SVHIKEY                                                  
         AH    R3,ISKEYLN                                                       
         MVC   0(4,R3),SVLNK                                                    
         AHI   R3,4                                                             
         BR    RE                                                               
         DROP  R1,B1,B2                                                         
         EJECT                                                                  
***********************************************************************         
* CHECK PD INDEX TO MAKE SURE IT IS ALL IN ORDER                      *         
***********************************************************************         
CHKPD    NTR1  BASE=*,LABEL=*                                                   
         L     RF,ISBUFF1                                                       
         AH    RF,ISPDLN                                                        
         SH    RF,ISKEYLN4         LAST KEY - 1                                 
         BCTR  RF,0                (MINUS 1 BYTE FOR BXLE)                      
*                                                                               
         L     R4,ISBUFF1                                                       
         AH    R4,0(R4)            R4=FIRST KEY                                 
*                                                                               
         CR    RF,R4                                                            
         BNH   EXIT                ONLY ONE KEY - MUST BE OK                    
*                                                                               
         LH    R1,ISKEYLN1                                                      
         LH    RE,ISKEYLN4                                                      
*                                                                               
CHKPD02  LR    R5,R4                                                            
         AH    R5,ISKEYLN4         R5=KEY+1                                     
         EX    R1,CLCR5R4                                                       
         BNH   CHKPDDIE                                                         
         BXLE  R4,RE,CHKPD02                                                    
         B     EXIT                                                             
*                                                                               
CHKPDDIE DC    H'0'                DIE=INDEX IS BAD                             
         EJECT                                                                  
***********************************************************************         
* SPLIT BLOCK WTO - R2=A(ISDTF)                                       *         
***********************************************************************         
SPBWTO   NTR1  BASE=*,LABEL=*                                                   
         LA    R4,MSGBF                                                         
         MVC   MSGBFDSN,ISFDD                                                   
         MVI   MSGBFKEY,C' '                                                    
         MVC   MSGBFKEY+1(L'MSGBFKEY-1),MSGBFKEY                                
         LH    R3,ISKEYLN          KEY LENGTH                                   
         LA    RF,L'MSGBFKEY/2     MAX LENGTH WE CAN HEXOUT                     
         CR    R3,RF                                                            
         BNH   *+6                                                              
         LR    R3,RF                                                            
         ICM   R5,15,ISPDKEY       SEE IF CAN WRITE OUT PART OF KEY             
         BZ    SPBWTO10                                                         
         ICM   RF,15,VHEXOUT                                                    
         BZ    SPBWTO10                                                         
         OILH  GR5,X'8000'                                                      
         GOTOR (RF),MYWORK,(R5),MSGBFKEY,(R3),0                                 
*                                                                               
SPBWTO10 WTO   TEXT=(R4),MCSFLAG=HRDCPY                                         
         B     EXIT                                                             
*                                                                               
MSGBF    DC    AL2((MSGBFX-*)-L'MSGBF)                                          
         DC    C'ISDDS BLOCK INDEX FULL '                                       
MSGBFDSN DC    CL8' '                                                           
         DC    C' :KEY='                                                        
MSGBFKEY DC    CL30' '                                                          
MSGBFX   DS    0X                                                               
         EJECT                                                                  
***********************************************************************         
* ROUTINE TO FREE STORAGE                                             *         
* R0=L'STORAGE TO FREE                                                *         
* R1=A(STORAGE TO FREE)                                               *         
***********************************************************************         
FREEMAIN NTR1  BASE=*,LABEL=*                                                   
         STM   R0,R1,DUB                                                        
         FREEMAIN RC,A=(1),LV=(0)                                               
         LTR   RF,RF                                                            
         BZ    EXIT                                                             
         DC    H'0'                DIE=INVALID FREEMAIN                         
                                                                                
***********************************************************************         
* ROUTINE TO OBTAIN STORAGE                                           *         
* R0=L'STORAGE TO OBTAIN                                              *         
* GMFLAG=PARAMETERS TO DRIVE TYPE OF GETMAIN                          *         
***********************************************************************         
GETMAIN  NTR1  BASE=*,LABEL=*                                                   
         LA    R1,GMFTAB           MATCH SUPPORTED GETMAIN TYPES                
         LHI   RF,L'GMFTAB                                                      
*                                                                               
GETM02   CLI   0(R1),255                                                        
         JE    *+2                 DIE=INV GETMAIN TYPE                         
         CLC   GMFLAG,0(R1)                                                     
         BE    GETM04                                                           
         BXH   R1,RF,GETM02                                                     
*                                                                               
GETM04   ICM   RF,7,1(R1)                                                       
         BNZR  RF                                                               
         DC    H'0'                DIE=INV GETMAIN TYPE                         
*                                  UNCONDITIONAL/LOW/DBLWD                      
GMLO     GETMAIN RU,LV=(0),BNDRY=DBLWD                                          
         LTR   RF,RF                                                            
         BZ    GETMAINX                                                         
         BRAS  RE,GMFWTO                                                        
         DC    H'0'                DIE=INVALID GETMAIN                          
*                                  UNCONDITIONAL/HIGH/DBLWD                     
GMHI     GETMAIN RU,LV=(0),LOC=(ANY,ANY),BNDRY=DBLWD                            
         LTR   RF,RF                                                            
         BZ    GETMAINX                                                         
         BRAS  RE,GMFWTO                                                        
         DC    H'0'                DIE=INVALID GETMAIN                          
*                                                                               
GMHIPC   GETMAIN RC,LV=(0),LOC=(ANY,ANY),BNDRY=PAGE                             
         LTR   RF,RF                                                            
         BZ    GETMAINX                                                         
         BRAS  RE,GMFWTO                                                        
         B     GETMAINX                                                         
*                                                                               
GMHIPU   GETMAIN RU,LV=(0),LOC=(ANY,ANY),BNDRY=PAGE                             
         LTR   RF,RF                                                            
         BZ    GETMAINX                                                         
         BRAS  RE,GMFWTO                                                        
         B     GETMAINX                                                         
*                                                                               
GETMAINX XIT1  REGS=(RF,R1)                                                     
*                                                                               
GMFTAB   DS    0XL4                                                             
         DC    AL1(GMFHI+GMFPG+GMFCD),AL3(GMHIPC)                               
         DC    AL1(GMFHI+GMFPG),AL3(GMHIPU)                                     
         DC    AL1(GMFHI+GMFCD),AL3(0)                                          
         DC    AL1(GMFPG+GMFCD),AL3(0)                                          
         DC    AL1(GMFHI),AL3(GMHI)                                             
         DC    AL1(GMFCD),AL3(0)                                                
         DC    AL1(GMFPG),AL3(0)                                                
         DC    AL1(0),AL3(GMLO)                                                 
         DC    AL1(255)                                                         
         EJECT                                                                  
***********************************************************************         
* GETMAIN FAILURE INFORMATION MESSAGE                                 *         
***********************************************************************         
GMFWTO   NTR1  BASE=*,LABEL=*                                                   
         OC    VHEXOUT,VHEXOUT                                                  
         BZ    GMFWTO1                                                          
         GOTO1 VHEXOUT,DUB,FULL,GMFLEN,L'FULL                                   
         ST    R0,FULL                                                          
         GOTO1 VHEXOUT,DUB,FULL,GMFR0,L'FULL                                    
         ST    R1,FULL                                                          
         GOTO1 VHEXOUT,DUB,FULL,GMFR1,L'FULL                                    
         ST    RF,FULL                                                          
         GOTO1 VHEXOUT,DUB,FULL,GMFRF,L'FULL                                    
*                                                                               
GMFWTO1  TM    GMFLAG,GMFCD                                                     
         BO    *+10                                                             
         MVC   GMFTRY,GMFABD                                                    
*                                                                               
         XR    R0,R0                                                            
         WTO   TEXT=((GMFHL,C),(GMFM1L,D),(GMFM2L,D),(0,E))                     
         B     EXIT                                                             
*                                                                               
GMFHL    DC    AL2(25)                                                          
GMFH     DC    CL25'ISDDS GETMAIN FAILURE'                                      
GMFM1L   DC    AL2(51)                                                          
         DC    CL42'XA GETMAIN FAILURE - LENGTH REQUESTED = X'''                
GMFLEN   DC    CL08'????????'                                                   
         DC    CL01''''                                                         
GMFM2L   DC    AL2(61)                                                          
         DC    CL03'R0='                                                        
GMFR0    DC    CL08'        '                                                   
         DC    CL05', R1='                                                      
GMFR1    DC    CL08'        '                                                   
         DC    CL05', RF='                                                      
GMFRF    DC    CL08'        '                                                   
GMFTRY   DC    CL24' ATTEMPTING TO CONTINUE'                                    
GMFABD   DC    CL24' ABENDING'                                                  
         EJECT                                                                  
***********************************************************************         
* ISOPEN INDIRECT ADDRESS ROUTINE                                     *         
***********************************************************************         
AISOPEN  NTR1  BASE=*,LABEL=*                                                   
         TM    ISFTYPE,ISFTBIGF                                                 
         JZ    *+2                 DIE=FILE NOT 20-BIT                          
         OC    ISCILAST,ISCILAST                                                
         BNZ   ISOPENX                                                          
         TM    ISFOPEN,X'20'                                                    
         BO    ISOPENX                                                          
*                                                                               
ISOPEN2  XR    R4,R4                                                            
         ICM   R4,7,ISFADCB+1      PICK UP 3 BYTE ADDRESS OF DCB                
         MVC   40(8,R4),ISFDD      SET FILE ID IN DCB DDNAME                    
*                                                                               
         BRAS  RE,ALLOC            ALLOCATE DD CARD                             
*                                                                               
ISOPEN3  ICM   RE,15,=V(SSB)       TEST OFFLINE WITH EXTENDED SSB               
         BZ    ISOPEN6                                                          
         OC    0(2,RE),0(RE)                                                    
         BNZ   ISOPEN6                                                          
         CLI   SSOXTND-SSOOFF(RE),X'FF'                                         
         BNE   ISOPEN6                                                          
ISOPEN4  TM    SSOMTIND-SSOOFF(RE),SSOWRTN TEST WRITE=N INPUT                   
         BZ    ISOPEN5                                                          
         C     R2,=V(SYS1FLEW)     IGNORE IF SY1 FILES                          
         BL    ISOPEN6                                                          
         OI    ISFOPEN,ISFORO      SET READ-ONLY FILE                           
         B     ISOPEN6                                                          
*                                                                               
ISOPEN5  TM    ISFOPEN,ISFORO      TEST READ-ONLY FILE                          
         BZ    ISOPEN6                                                          
         TM    ISCMPRSW,X'40'      DEFINED WITH ADD=NO IN DMIS MACRO            
         BO    ISOPEN6                                                          
         TM    SSOMTIND-SSOOFF(RE),SSOMRKY TEST IF MARKER=Y INPUT               
         BZ    ISOPEN6                                                          
         C     R2,=V(SYS1FLEW)     IGNORE IF SY1 FILES                          
         BL    ISOPEN6                                                          
         NI    ISFOPEN,255-ISFORO  TURN OFF READ-ONLY BIT                       
         OI    ISFFLAG,ISROWRN     SET FLAG TO ISSUE READ-ONLY WARNING          
*                                                                               
ISOPEN6  TM    ISFOPEN,ISFORO      TEST READ-ONLY FILE                          
         BZ    ISOPEN8                                                          
*                                                                               
ISOPEN7  STAM  ARE,AR1,ARSSAVER    OPEN FILE INPUT                              
         OPEN  ((4),INPUT)                                                      
         LAM   ARE,AR1,ARSSAVER                                                 
         B     ISOPEN9                                                          
*                                                                               
ISOPEN8  STAM  ARE,AR1,ARSSAVER    OPEN FILE INPUT/OUPUT                        
         OPEN  ((4),INOUT)                                                      
         LAM   ARE,AR1,ARSSAVER                                                 
*                                                                               
ISOPEN9  TM    48(R4),X'10'        TEST VALID OPEN                              
         BO    ISOPEN10                                                         
         ABEND 991,DUMP            ABEND FOR OPEN FAILURE                       
*                                                                               
ISOPEN10 LR    R1,R4               FIX DEBS TO MACRF=EXCP                       
         SVC   252                                                              
         MVI   42(R4),X'D0'        CHANGE MACRF BYTES TO EXCP                   
         MVI   43(R4),X'04'               IN OPENED FOUNDATION BLOCK            
         OI    ISFOPEN,ISFOOPN+ISFOPROP   SET FILE OPEN/PREV OPEN               
*                                                                               
         LA    R4,ISXTNT           R4=A(EXTENT MATRIX ENTRY)                    
         SR    RE,RE                                                            
         ICM   RE,7,ISFADCB+1                                                   
         L     RE,44(RE)           GET DEB ADR FROM DCB                         
         SR    R1,R1                                                            
         ICM   R1,1,16(RE)         R1=NUMBER OF EXTENTS IN DEB                  
         JZ    *+2                 DIE=ZERO XTNTS                               
         SR    R5,R5                                                            
         ICM   R5,1,ISFXTNTS       GET NUM OF EXTENTS DEFINED IN DTF            
         BNZ   *+8                                                              
         LA    R5,MAXXTNTS                                                      
         CR    R1,R5                                                            
         JH    *+2                 DIE=TOO MANY XTNTS                           
         LA    R5,32(RE)           R5=A(DEB MATRIX ENTRY)                       
         SR    R6,R6               R6=EXTENT SEQUENCE NUMBER                    
*                                                                               
ISOPEN20 XC    0(14,R4),0(R4)                                                   
         SR    RE,RE                                                            
         ICM   RE,7,1(R5)                                                       
         MVC   0(1,R4),19(RE)      SET MVS DEVICE TYPE FROM UCB                 
         STC   R6,1(R4)            SET EXTENT SEQUENCE NUMBER                   
         MVC   2(8,R4),6(R5)       SET CCHH LOW AND CCHH HIGH                   
         MVC   10(2,R4),4(RE)      SET CHAN/UNIT FROM UCB                       
*                                                                               
         LA    RE,DEVCODE                                                       
ISOPEN22 CLI   0(RE),0                                                          
         JE    *+2                 DIE=UNKNOWN DEVICE                           
         CLC   0(1,R4),0(RE)       TEST MVS CODE WITH TABLE ENTRY               
         BE    *+12                                                             
         LA    RE,2(RE)                                                         
         B     ISOPEN22                                                         
         MVC   0(1,R4),1(RE)       SET INT DEVICE TYPE CODE FROM TABLE          
         CLI   1(RE),5                                                          
         BE    ISOPEN24                                                         
         DC    H'0'                DIE=DEVICE NOT 3390                          
*                                                                               
ISOPEN24 LLC   RF,1(RE)            SET DEVICE DATA IN DTF                       
         BCTR  RF,0                                                             
         SLL   RF,4                                                             
         L     RE,=A(DEVDISK)                                                   
         AR    RF,RE                                                            
         LTR   R6,R6                                                            
         BNZ   ISOPEN26                                                         
         MVC   ISFDEVF(2),0(RF)    SET INTERNAL DEV FLAG AND TYPE               
         MVI   ISFAVAIL,X'00'      SET DTF AVAIL (X'80' MEANS BUSY)             
         OI    ISFDEVF,X'40'                                                    
*                                                                               
ISOPEN26 MVC   DEVDATA,0(RF)                                                    
         LH    R3,DEVTRKS                                                       
         BCTR  R3,0                R3=TRKS/CYL-1                                
         OC    4(2,R4),4(R4)                                                    
         BNZ   *+12                                                             
         CH    R3,8(R4)                                                         
         BE    *+8                                                              
         OI    ISFDEVF,X'04'       SET EXTENTS NOT ON CYL BOUNDRYS              
*                                                                               
ISOPEN28 CLC   0(1,R4),ISFDEVT     TEST FOR MIXED EXTENTS                       
         BE    ISOPEN30                                                         
         OI    ISFDEVF,X'08'                                                    
*                                                                               
ISOPEN30 LA    R4,14(R4)           BUMP TO NEXT EXTENT                          
         LA    R5,16(R5)                                                        
         LA    R6,1(R6)                                                         
         BCT   R1,ISOPEN20                                                      
*                                                                               
         MVI   0(R4),X'FF'         SET END OF EXTENTS                           
*NOP*    MVI   DUB,C'O'            OPEN TRACE                                   
*NOP*    BRAS  R9,ISTRACE                                                       
ISOPENX  J     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* ISCLOSE INDIRECT ADDRESS ROUTINE                                    *         
***********************************************************************         
AISCLOSE NTR1  BASE=*,LABEL=*                                                   
*NOP*    MVI   DUB,C'C'            CLOSE TRACE                                  
*NOP*    BRAS  R9,ISTRACE                                                       
         SR    R4,R4                                                            
         ICM   R4,7,ISFADCB+1      CLOSE FILE                                   
         MVI   42(R4),X'28'        CHANGE MACRF BYTES BACK TO RI                
         MVI   43(R4),X'00'        IN OPENED FOUNDATION BLOCK                   
         CLOSE ((4))                                                            
         NI    ISFOPEN,255-ISFOOPN TURN OFF OPEN FLAG                           
         MVI   ISFAVAIL,X'00'      SET DTF AVAIL (X'80'=BUSY)                   
         OI    ISFDEVF,X'40'                                                    
         XC    ISCILAST,ISCILAST   SET NOT INITIALISED                          
         LA    R4,ISXTNT                                                        
         XC    0(15,R4),0(R4)      CLEAR FIRST EXTENT ENTRY                     
         XC    ISPDLAST,ISPDLAST                                                
         XC    ISOVLAST,ISOVLAST                                                
                                                                                
***********************************************************************         
* FREEMAIN ACQUIRED STORAGE                                           *         
* IF FILE OPENED BUT NOT ACCESSED, NO GETMAINS DONE - SO JUST EXIT    *         
***********************************************************************         
         TM    ISCMPRSW,X'20'      TEST BEEN THROUGH INIT                       
         BZ    ISCLOSEX            NO - NEVER ACCESSED FILE                     
         NI    ISCMPRSW,255-X'20'  RESET FLAG                                   
*                                                                               
         CLI   ONLINE,C'Y'                                                      
         BE    ISCLOSEX                                                         
*                                                                               
         L     R1,ISBUFF1                                                       
         LH    R0,ISPDLN                                                        
         TM    ISCMPRSW,X'40'      TEST 1 OR 2 BUFFERS                          
         BO    *+6                 FLAG IS ON IF ONLY 1                         
         AR    R0,R0                                                            
         BRAS  RE,FREEMAIN                                                      
*                                                                               
         XC    ISBUFF1(12),ISBUFF1 CLEAR BUFF1/BUFF1X/BUFF2                     
*                                                                               
         L     R1,ISPDKEY                                                       
         LH    R0,ISKEYLN                                                       
         MHI   R0,3                                                             
         BRAS  RE,FREEMAIN                                                      
*                                                                               
         XC    ISPDKEY,ISPDKEY                                                  
         XC    ISPDPRKY,ISPDPRKY                                                
         XC    ISTIHIKY,ISTIHIKY                                                
*                                                                               
         ICM   R1,15,ISTIBUFF                                                   
         BZ    ISCLOSE4                                                         
         LH    R0,ISTILN                                                        
         BRAS  RE,FREEMAIN                                                      
*                                                                               
         XC    ISTIBUFF,ISTIBUFF                                                
*                                                                               
ISCLOSE4 XR    R0,R0                                                            
         ICM   R0,1,ISFBUFFS       TEST EXTENDED IOAREAS REQUESTED              
         BZ    ISCLOSEX            NO                                           
         MH    R0,ISPDLN                                                        
         AHI   R0,((ISXMAX+1)*ISXTBLN)  PLUS ROOM FOR TABLE                     
         L     R1,ISFXTAB                                                       
         BRAS  RE,FREEMAIN                                                      
         XC    ISFXTAB,ISFXTAB     CLEAR ADDRESS                                
*                                                                               
ISCLOSEX B     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* GET CPU ID FROM RECORD ZERO OF TRACK ONE IN INDEX EXTENT            *         
* I/O IS DONE TO NMOD AREA IN 24 BIT ADDRESSABLE STORAGE, NO IDAL.    *         
* IF STORAGE PROTECT ON REC 0 READ INTO TCB FIELD (NO EXCP IN KEY 9)  *         
***********************************************************************         
AISCPUID NTR1  BASE=*,LABEL=*      POINT TO DUMMY D/A                           
         LA    R7,=F'-1'           POINT TO DUMMY D/A                           
         BRAS  RE,ISBLDCCW                                                      
*                                                                               
         XC    CCW4,CCW4           READ RECORD ZERO                             
         LA    RE,COUNT                                                         
*                                                                               
         ICM   RF,15,VSSB          FOR STORAGE PROTECT ONLINE                   
         BZ    ISCP02                                                           
         USING SSBD,RF                                                          
         TM    SSBPROT,SSBPONQ                                                  
         BZ    ISCP02                                                           
         ICM   RF,15,SSBTKADR                                                   
         BZ    ISCP02                                                           
*                                                                               
         USING TCBD,RF                                                          
         LA    RE,TCBCIOA                                                       
         DROP  RF                                                               
*                                                                               
ISCP02   ST    RE,AREC0                                                         
         ST    RE,CCW4                                                          
         MVI   CCW4,6                                                           
         LA    RE,8                                                             
         STH   RE,CCW4+6                                                        
*                                                                               
         BRAS  RE,INIEXCP          READ RECORD ZERO                             
         XR    R0,R0                                                            
         BRAS  RE,EXCPCHK                                                       
         BZ    ISCP04                                                           
         MVC   P3(2),ERRF          SET ERROR AND EXIT                           
         B     EXIT                                                             
*                                                                               
ISCP04   L     RE,AREC0                                                         
         L     R5,X'10'(,R0)       POINT TO CPU ID                              
         L     R5,X'C4'(,R5)                                                    
         LA    R5,X'10'(,R5)       R5=A(FOUR CHR CPU ID)                        
         MVC   DUB(2),2(R5)                                                     
*                                                                               
         MVC   P3+2(2),6(RE)       RETURN REC ZERO CPU ID                       
         CLC   6(1,RE),DUB         SAME AS RECORD ZERO VALUE                    
         BE    ISCP06              YES                                          
         OI    P3+1,X'80'          NO SET ERROR                                 
         B     EXIT                                                             
*                                                                               
ISCP06   CLI   7(RE),C' '          TEST FOR DSPACE CHR                          
         BNH   EXIT                                                             
         TM    ISFFLAG,ISFGLOB     IS IT GLOBAL                                 
         BZ    EXIT                                                             
*                                                                               
         USING SSOOFF,RF                                                        
         ICM   RF,15,VSSB                                                       
         BZ    EXIT                                                             
         OC    SSOCNTL,SSOCNTL                                                  
         BNZ   ISCP07              NO TEST IF ONLINE                            
*                                                                               
         CLI   SSODSPAC,C' '                                                    
         BH    *+10                                                             
         MVC   SSODSPAC(1),7(RE)                                                
*                                                                               
         CLC   SSODSPAC(1),7(RE)                                                
         BE    EXIT                                                             
         OI    P3+1,X'10'          NO SET ERROR                                 
         B     EXIT                DSPACE REQUIRED DOES NOT MATCH               
*                                                                               
         USING SSBD,RF                                                          
ISCP07   TM    ISFOPEN,X'C0'       TEST R/O OR NOP                              
         BNZ   EXIT                                                             
         TM    SSBSYSFL,X'80'      TEST SYSTEM                                  
         BZ    EXIT                                                             
         CLI   7(RE),C'A'          CHECK PROD FILE                              
         BNE   EXIT                                                             
         DROP  RF                                                               
*                                                                               
         OI    ISFOPEN,X'04'       WRONG STAMP SET TO QUIESCED                  
         LA    R4,MYWORK+8                                                      
         ST    R4,MYWORK                                                        
         OI    MYWORK+4,X'80'      HARDCOPY ONLY                                
         MVC   MYWORK+8(8),ISFDD                                                
         MVC   MYWORK+16(19),=C'QUIESCED DSPACE= //'                            
         MVC   MYWORK+32(1),7(RE)                                               
         GOTO1 =V(DDWTO),MYWORK                                                 
         B     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* THIS ROUTINE IS USED OFFLINE TO MAKE SURE WE HAVE RIGHT EOF ADDRESS *         
* I/O IS DONE IN NMOD AREA (24-BIT) SO NO IDAL REQUIRED               *         
***********************************************************************         
AISFNDEF NTR1  BASE=*,LABEL=*                                                   
ISFNDEF  MVC   DUB(4),ISOVLAST                                                  
         XR    RE,RE                                                            
         IC    RE,DUB+2                                                         
         N     RE,=XL4'0000000F'                                                
         CH    RE,ISHIPD           TEST LAST REC ON TRACK                       
         BL    ISEOF02             NO                                           
*                                                                               
         L     RE,DUB                                                           
         SRL   RE,32-12            RE=TTTTT                                     
         AHI   RE,1                                                             
         SLL   RE,32-12                                                         
         ST    RE,DUB                                                           
         XR    RE,RE                                                            
*                                                                               
ISEOF02  IC    RE,DUB+2            TB                                           
         AHI   RE,1                TB+1                                         
         STC   RE,DUB+2                                                         
*                                                                               
         LA    R7,DUB                                                           
         BRAS  RE,ISBLDCCW                                                      
*                                                                               
         XR    R0,R0                                                            
         IC    R0,CCW4                                                          
         LA    RE,COUNT                                                         
         ST    RE,CCW4             MODIFY DATA ADDRESS                          
         STC   R0,CCW4                                                          
         MVI   CCW4+4,X'10'        RESET FLAGS/ SET SUPPRESS DATA XFR           
*                                                                               
         BRAS  RE,INIEXCP                                                       
         XR    R0,R0                                                            
         BRAS  RE,EXCPCHK                                                       
         TM    ERRF+1,X'08'        TEST NOT FOUND                               
         BO    EXIT                                                             
*                                                                               
         MVC   ISOVLAST,DUB        ELSE SET LAST KNOWN REC                      
         B     ISFNDEF             AND TRY AGAIN                                
         EJECT                                                                  
***********************************************************************         
* ROUTINE TO DYNAMICALLY ALLOCATE A DD CARD FOR FILE                  *         
***********************************************************************         
ALLOC    NTR1  BASE=*,LABEL=*                                                   
*                                                                               
         USING SSOOFF,RE                                                        
ALLOC1   ICM   RE,15,=V(SSB)       EXTRACT FACPAK ID IF ONLINE                  
         BZ    ALLOC3                                                           
         OC    SSOCNTL,SSOCNTL     ON-LINE?                                     
         BNZ   ALLOC3              YES                                          
*                                                                               
         CLI   SSOXTND,X'FF'       OFFLINE EXTENDED SSB?                        
         BNE   ALLOC3              NO                                           
         TM    SSOFLAG2,SSO2DYNO   EXIT IF DYNAMIC ALLOCATION INACTIVE          
         BO    ALLOCXIT                                                         
         OI    BYTE,X'80'          SET OFFLINE/EXTENDED SSB FLAG                
         USING ISDTF,R2                                                         
*                                                                               
ALLOC3   LA    R1,RBLK             SET UP REQ BLK POINTER                       
         ST    R1,ARBLK                                                         
         OI    ARBLK,X'80'                                                      
         MVI   RBLKLEN,20          SET UP REQ BLK LEN                           
         MVI   RBLKVERB,1          SET ALLOCATE BY DSN VERB CODE                
         LA    R1,ATXT                                                          
         ST    R1,RBLKATXT         SET POINTER TO TEXT POINTER LIST             
*                                                                               
         LA    R1,TXTDD            SET UP POINTER TO DDNAME TEXT                
         ST    R1,ATXTDD                                                        
         MVC   0(2,R1),=X'0001'    SET DDNAME TEXT CODE                         
         MVC   2(2,R1),=X'0001'                                                 
         MVC   6(8,R1),ISFDD       SET DDNAME VALUE TO DCB VALUE                
         LA    RF,6(R1)            FIND LEN OF DD NAME                          
         LA    R0,8                                                             
         CLI   0(RF),C' '                                                       
         BE    *+12                                                             
         LA    RF,1(RF)                                                         
         BCT   R0,*-12                                                          
         LA    RE,6(R1)                                                         
         SR    RF,RE                                                            
         STH   RF,4(R1)            SET LEN IN DDNAME TEXT HEADER                
*                                                                               
         LA    R1,TXTDSN           SET UP POINTER TO DSN TEXT                   
         ST    R1,ATXTDSN                                                       
         MVC   TXTDSN(2),=X'0002'  SET DSN TEXT CODE                            
         MVC   TXTDSN+2(2),=X'0001'                                             
         ICM   RF,15,=V(DMDYNDD)   CALL DMDYNDD TO GET DSN TEXT                 
         BZ    ALLOCXIT                                                         
         GOTO1 (RF),MYWORK,0,ISFDD,(R2)                                         
         BNE   ALLOCXIT                                                         
         TM    8(R1),X'02'         TEST IF DID GLOBAL ALLOCATE                  
         BZ    *+8                                                              
         OI    BYTE,X'20'                                                       
         TM    8(R1),X'01'         TEST IF ALLOCATED FLASH COPY                 
         BZ    ALLOC10                                                          
         OI    BYTE,X'10'                                                       
         OI    ISFOPEN,ISFORO      SET FLASH COPY FILE READ-ONLY                
         TM    BYTE,X'80'                                                       
         B     ALLOC10             *NOP* BZ DONT SET WRITE=N OFFLINE            
         ICM   RE,15,=V(SSB)       GET A(OFFLINE SSB)                           
         USING SSOOFF,RE                                                        
         OI    SSOMTIND,SSOWRTN    SET WRITE=N IF FLASH COPY FILE               
ALLOC10  ICM   RE,15,0(R1)         P1=AL1(LENGTH OF DSN),AL3(NEW DSN)           
         JZ    *+2                 DIE=INV DSN LEN                              
         NILH  GRE,X'00FF'                                                      
         MVC   TXTDSN+6(20),0(RE)                                               
         LLC   RF,0(R1)                                                         
         STH   RF,TXTDSN+4         SET LEN IN DSN TEXT HEADER                   
*                                                                               
         LA    R1,TXTDISP          SET UP POINTER TO DISP TEXT                  
         ST    R1,ATXTDISP                                                      
         MVC   0(2,R1),=X'0004'    SET DISP TEXT CODE                           
         MVC   2(2,R1),=X'0001'                                                 
         MVC   4(2,R1),=X'0001'                                                 
         MVI   6(R1),X'08'         SET DISP=SHR CODE                            
*                                                                               
         TM    BYTE,X'01'          IS THIS AN ISOPOLD                           
         BZ    *+8                                                              
         MVI   6(R1),X'01'         SET DISP=OLD CODE                            
*                                                                               
         LA    R1,TXTUNAL          SET UP POINTER TO UNALLOCATE TEXT            
         ST    R1,ATXTUNAL                                                      
         MVC   0(2,R1),=X'001C'    SET UNALLOCATE TEXT CODE                     
         XC    2(4,R1),2(R1)                                                    
*                                                                               
         OI    ATXTLAST,X'80'      SET END OF TEXT POINTER LIST                 
         LA    R1,ARBLK                                                         
         LR    R5,R1               R5=A(REQ BLK IN DUMP)                        
         DYNALLOC                                                               
         LR    R6,RF               R6=RETURN CODE IN DUMP                       
         L     R7,RBLKERR          R7=RBLKERR/RBLKINFO IN DUMP                  
         LTR   RF,RF               TEST FOR ERRORS                              
         BZ    ALLOC30             NO                                           
*                                                                               
         CLC   RBLKERR,=X'1708'    FILE MAY NOT EXIST ERROR                     
         BNE   ALLOC16             YES                                          
         XC    MYWORK,MYWORK                                                    
         MVC   MYWORK,=X'0029'                                                  
         MVC   MYWORK+2(21),=C'FILE MAY NOT EXIST - '                           
         MVC   MYWORK+23(20),TXTDSN+6                                           
         LA    R4,MYWORK                                                        
         WTO   TEXT=(R4)                                                        
         ABEND 994                 FILE MAY NOT EXIST (SHR OR OLD)              
*                                                                               
ALLOC16  TM    BYTE,X'20'          YES TEST IF DID GLOBAL ALLOCATE              
         BO    ALLOC18                                                          
*                                                                               
         CLC   RBLKERR,=X'0410'    NORMAL - TEST IF DD CARD EXISTS              
         BE    ALLOCXIT            YES                                          
         XC    MYWORK,MYWORK                                                    
         MVC   MYWORK,=X'0033'                                                  
         MVC   MYWORK+2(32),=C'DISP=OLD ALLOCATION FAILURE FOR '                
         MVC   MYWORK+34(20),TXTDSN+6                                           
         TM    BYTE,X'01'                                                       
         BO    *+10                                                             
         MVC   MYWORK+7(3),=C'SHR'                                              
         LA    R4,MYWORK                                                        
         WTO   TEXT=(R4)                                                        
         TM    BYTE,X'01'          ASK OPERATOR IF DISP=OLD ALLOCATION          
         BZ    ALLOC20                                                          
         XC    ECBAD,ECBAD                                                      
         WTOR  'RETRY OR CANCEL',REPLY,1,ECBAD,ROUTCDE=(1)                      
         WAIT  ECB=ECBAD                                                        
         CLI   REPLY,C'R'                                                       
         BE    ALLOC1                                                           
         ABEND 990                 FILE IS IN USE - ABEND WITHOUT DUMP          
*                                                                               
ALLOC18  CLC   RBLKERR,=X'0410'    GLOBAL - TEST IF DD CARD EXISTS              
         BNE   ALLOC20                                                          
         XC    MYWORK,MYWORK       YES OUTPUT DD OVERRIDE MESSAGE               
         MVC   MYWORK(2),=X'001E'                                               
         MVC   MYWORK+2(21),=C'DD OVERRIDE USED FOR '                           
         MVC   MYWORK+23(8),TXTDD+6                                             
         LA    R4,MYWORK                                                        
         WTO   TEXT=(R4),MCSFLAG=HRDCPY                                         
         B     ALLOCXIT            ALLOW DD OVERRIDE                            
*                                                                               
ALLOC20  LA    R1,TXTDSN                                                        
         ICM   RF,15,=V(ISGQU)     CALL ISGQU FOR ALLOCATION DETAIL             
         JZ    *+10                                                             
         BASR  RE,RF                                                            
         J     ALLOC1                                                           
*                                                                               
         ABEND 990,DUMP            ALLOCATION FAILURE ABEND                     
*                                                                               
ALLOC30  OI    ISFOPEN,X'10'       SET DD CARD DYNAMICALLY GENERATED            
*                                                                               
ALLOCXIT J     EXIT                                                             
         DROP  R2,RE                                                            
*                                                                               
ECBAD    DC    F'0'                WTOR FIELDS                                  
REPLY    DC    CL4' '                                                           
         EJECT                                                                  
***********************************************************************         
* ROUTINE TO LOCK DTF                                                 *         
***********************************************************************         
LOCKDTF  NTR1  BASE=*,LABEL=*                                                   
         ICM   R4,15,ASSB                                                       
         BZ    LOCKDTFX                                                         
         USING SSBD,R4                                                          
         L     R3,P4               R3=DTF                                       
         USING ISDTF,R3                                                         
*                                                                               
LKD020   CLI   ISFSNUM,0           IGNORE LOCK IF NO SYSTEM                     
         BE    LOCKDTFX                                                         
         TM    ISFFLAG,ISFGLOB     TEST GLOBAL RESOURCE                         
         BZ    LKD100              NOT GLOBAL - DO LOCAL LOCK                   
         XC    DUB,DUB                                                          
         MVC   DUB+3(1),ISFSNUM                                                 
*                                                                               
         GOTO1 ALOCKSPC,DUB        LOCK THE SYSTEM                              
         MVI   LOCKFLG,C'Y'                                                     
*                                                                               
         L     R2,4(R1)            SET FULL TO A(SYSTEM)                        
         USING DMSPACED,R2                                                      
         MVC   FULL,DSPECB                                                      
         SAC   512                                                              
         LAM   AR2,AR2,SSBALET                                                  
         L     R2,FULL                                                          
         USING DMSYSHDR,R2                                                      
         LH    R1,DSYFILES         R1=NUMBER OF FILES                           
         LA    R2,DSYDATA          R2 POINTS TO FILES                           
         USING DSFILHDR,R2                                                      
*                                                                               
LKD030   CLC   ISFXNUM,DSFILNUM    TEST FILE NUMBER                             
         BE    LKD050                                                           
         LA    R2,32(,R2)                                                       
         BCT   R1,LKD030                                                        
         DC    H'0'                DIE=INV FILE NUM                             
*                                                                               
LKD050   OC    DSEOF1,DSEOF1       TEST DSPACE NOT ZERO                         
         BZ    LKDERR                                                           
         CLC   ISOVLAST,DSEOF1     TEST OUR EOF NOT GREATER                     
         BH    LKDERR                                                           
         MVC   ISOVLAST,DSEOF1                                                  
         MVC   ISPDLAST,DSEOF2                                                  
         CR    RB,RB                                                            
         B     LKD999                                                           
*                                                                               
LKD100   ICM   RF,15,VADWAIT                                                    
         BZ    LOCKDTFX                                                         
         TS    ISFAVAIL            DTF+2 =X'80' MEANS BUSY                      
         BNZ   LKD102              BUSY - GO WAIT                               
         NI    ISDTF,X'BF'         TURN OFF POST BIT (ISFAVAIL=X'FF')           
         B     LOCKDTFX                                                         
*                                                                               
LKD102   LA    R1,ISDTF            POINT TO DTF                                 
         O     R1,=X'FF000000'     SET 'DO NOT WAIT ON THIS ECB'                
         BASSM RE,RF               BRANCH AND SET 24-BIT MODE                   
         SAM31                                                                  
         B     LKD100              BACK TO 31 BIT MODE AND TRY AGAIN            
*                                                                               
LKDERR   LTR   RB,RB               FORCE EOF SEARCH                             
*                                                                               
LKD999   SAC   0                                                                
*                                                                               
LOCKDTFX B     EXIT                                                             
         DROP  R2,R3,R4                                                         
         EJECT                                                                  
***********************************************************************         
* ROUTINE TO UNLOCK SYSTEM                                            *         
***********************************************************************         
FREEDTF  NTR1  BASE=*,LABEL=*                                                   
         ICM   R4,15,ASSB                                                       
         BZ    FREEDTFX                                                         
         USING SSBD,R4                                                          
         L     R3,P4               R3=DTF                                       
         USING ISDTF,R3                                                         
*                                                                               
FRE020   CLI   ISFSNUM,0           IGNORE LOCK IF NO SYSTEM                     
         BE    FREEDTFX                                                         
         TM    ISFFLAG,ISFGLOB     TEST GLOBAL RESOURCE                         
         BZ    FRE100              NO - LOCAL  FREE100                          
         XC    DUB,DUB                                                          
         OI    DUB,X'20'                                                        
         MVC   DUB+3(1),ISFSNUM                                                 
*                                                                               
         GOTO1 ALOCKSPC,DUB        ENQUIRE ON SYSTEM                            
*                                                                               
         L     R2,4(R1)            SET FULL TO A(SYSTEM)                        
         USING DMSPACED,R2                                                      
         MVC   FULL,DSPECB                                                      
         NI    FULL,X'3F'                                                       
         SAC   512                                                              
         LAM   AR2,AR2,SSBALET                                                  
         L     R2,FULL                                                          
         USING DMSYSHDR,R2                                                      
         LH    R1,DSYFILES         R1=NUMBER OF FILES                           
         LA    R2,DSYDATA          R2 POINTS TO FILES                           
         USING DSFILHDR,R2                                                      
*                                                                               
FRE030   CLC   ISFXNUM,DSFILNUM    TEST FILE NUMBER                             
         BE    FRE050                                                           
         LA    R2,32(,R2)                                                       
         BCT   R1,FRE030                                                        
         DC    H'0'                DIE=INV FILE NUM                             
*                                                                               
FRE050   MVC   DSEOF1,ISOVLAST     SET NEW VALUES                               
         MVC   DSEOF2,ISPDLAST                                                  
*                                                                               
         SAC   0                                                                
         MVI   DUB,X'10'                                                        
         MVC   DUB+3(1),ISFSNUM                                                 
         GOTO1 ALOCKSPC,DUB        FREE THE SYSTEM                              
         B     FREEDTFX                                                         
*                                                                               
FRE100   MVI   ISFAVAIL,0          FREE LOCK FLAG                               
         OI    ISDTF,X'40'         POST ECB COMPLETE                            
*                                                                               
FREEDTFX B     EXIT                                                             
         DROP  R3                                                               
         EJECT                                                                  
***********************************************************************         
* ISCLEAR - CLEAR BUFFER CONTENTS TO FORCE I/OS NEXT TIME             *         
***********************************************************************         
         USING ISDTF,R2                                                         
AISCLEAR NTR1  BASE=*,LABEL=*                                                   
         XC    ISPDDA(12),ISPDDA   CLEAR INFO IN DTF                            
         BRAS  RE,AISCBUFF         EXIT IF NO EXTRA BUFFERS                     
         B     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* ISCLEAR - JUST CLEAR OUT BUFFERS                                    *         
***********************************************************************         
         USING ISDTF,R2                                                         
AISCBUFF NTR1  BASE=*,LABEL=*                                                   
         ICM   R1,15,ISFXTAB       EXIT IF NO EXTRA BUFFERS                     
         BZ    EXIT                                                             
         USING ISXTABD,R1                                                       
         SR    R0,R0                                                            
         ICM   R0,1,ISFBUFFS       NUMBER OF IOAREAS                            
         AHI   R0,1                                                             
*                                                                               
ISCLR1   XC    ISXTBSK,ISXTBSK     CLEAR SEEK ADDRESS                           
         LA    R1,ISXTBLN(R1)                                                   
         BCT   R0,ISCLR1                                                        
         B     EXIT                                                             
         DROP  R1                                                               
         EJECT                                                                  
***********************************************************************         
* ISERASE - ERASE RECORD IN ISPDKEY                                   *         
***********************************************************************         
AISERS   NTR1  BASE=*,LABEL=*                                                   
         OC    ISPDDA,ISPDDA       TEST BUFFER CONTENTS VALID                   
         JZ    *+2                 DIE=ZERO ISPDDA                              
         L     R3,P2               POINT TO RECORD AS KEYARG                    
         L     R4,ISPDKEY                                                       
         LH    R5,ISKEYLN1                                                      
         EX    R5,CLCR3R4          CLC  0(0,R3),0(R4)                           
         JNE   *+2                 DIE=KEYS NOT EQL                             
*                                                                               
         BRAS  R9,CHKBUFF          DO BUFFER SEARCH TO BUILD PRV KEY            
         DC    AL4(0)                                                           
         DC    AL4(0)                                                           
*                                                                               
         L     R4,ISPDPTR                                                       
         TM    ISCMPRSW,VARIABLE   TEST FIXED/VARIABLE LENGTH RECORDS           
         BZ    ISERS02                                                          
         LH    R6,ISKEYLN                                                       
         SR    RE,RE                                                            
         IC    RE,0(R4)            GET MISSING BYTES                            
         SR    R6,RE               GIVES KEY BYTES PRESENT                      
         LA    R6,1(R6,R4)         POINT TO REC LEN                             
         MVC   ISRECLN,0(R6)       SAVE REC LEN                                 
*                                                                               
ISERS02  LH    R6,ISRECLN                                                       
         SR    RE,RE                                                            
         IC    RE,0(R4)            GET MISSING BYTES                            
         BCTR  RE,0                ADJUST FOR CONTROL BYTE                      
         SR    R6,RE               GIVES BYTES PRESENT                          
         LA    R7,0(R6,R4)         POINT TO NEXT CONTROL BYTE                   
         STM   R6,R7,DUB           SAVE BYTES/NEXT ADDRESS                      
*                                                                               
         LH    R5,ISKEYLN1                                                      
         L     RF,ISPDPRKY                                                      
         EX    R5,OCRF             TEST NO PRV KEY  OC  0(0,RF),0(RF)           
         BNZ   ISERS18             REC IS NOT FIRST IN BLK                      
                                                                                
***********************************************************************         
* ERASING FIRST REC                                                   *         
***********************************************************************         
         CLI   0(R7),X'FF'         TEST NEXT IS EOB                             
         BE    ISERS06             YES - ONLY 1 REC IN BLK                      
*                                                                               
         LR    R3,R7               SAVE NEXT REC ADDRESS                        
         BRAS  R9,ISADDXC          XC   0(R6,R4),0(R4)                          
                                                                                
***********************************************************************         
* NOW EXPAND NEW FIRST KEY IN BUFFER AND SET NEW SLACK                *         
***********************************************************************         
         SR    R6,R6                                                            
         IC    R6,0(R3)            GET MISSING KEY BYTES                        
         LTR   R6,R6                                                            
         BZ    ISERS04                                                          
         SR    R3,R6                                                            
         LA    RF,1(R3)            SET TO ADDRESS                               
         L     R7,ISPDKEY                                                       
         BCTR  R6,0                                                             
         EX    R6,MVCRFR7          MVC  0(0,RF),0(R7)                           
*                                                                               
ISERS04  L     R4,ISBUFF1                                                       
         LA    RF,6(R4)                                                         
         SR    R3,RF                                                            
         STH   R3,0(R4)                                                         
         B     ISERS30                                                          
                                                                                
***********************************************************************         
* ERASING ONLY RECORD IN BLOCK                                        *         
***********************************************************************         
ISERS06  L     R0,ISBUFF2          SAVE DEAD BLOCK IN ISBUFF2                   
         LH    R1,ISPDLN           (NEEDED TO SAVE HIGH KEY)                    
         L     RE,ISBUFF1                                                       
         LR    RF,R1                                                            
         MVCL  R0,RE               MOVE BUFF1 TO BUFF2                          
*                                                                               
         L     R4,ISBUFF1                                                       
         LA    R4,6(R4)                                                         
         LH    R6,ISPDLN           LET IT CLEAR 6 EXTRA                         
         BRAS  R9,ISADDXC          XC   0(R6,R4),0(R4)                          
         L     R4,ISBUFF1                                                       
         XC    0(2,R4),0(R4)       CLEAR SPARE                                  
         MVI   6(R4),X'FF'                                                      
*                                                                               
         BRAS  RE,ISWRTPD          WRITE PRIME DATA BLOCK                       
*                                                                               
* NOW CLEAN UP THE FILE BY FINDING THE BLOCK THAT POINTS TO THIS                
* ONE AND RECHAINING IT WITH THE LINK CURRENTLY IN THIS BLOCK                   
*                                                                               
         OC    ISOVDA,ISOVDA       IF THIS IS NOT AN OVERFLOW BLOCK             
         BZ    ISERS16             THE DAMAGE WILL BE MASSIVE                   
*                                                                               
         MVC   DEADBLKA,ISOVDA     SAVE DISK ADDRESS OF THIS BLOCK              
         MVC   DEADBLKL,2(R4)      SAVE LINK ADDRESS FROM THIS BLOCK            
*                                                                               
         XC    ISOVDA,ISOVDA       START WITH THE PRIME DATA BLOCK              
         LA    R7,ISPDDA                                                        
*                                                                               
ISERS08  BRAS  RE,ISBLDCCW                                                      
         BRAS  RE,SETSCTR                                                       
         BRAS  RE,EXCP                                                          
*                                                                               
         L     R7,ISBUFF1                                                       
         CLC   2(4,R7),BLKINDEX    TEST FOR PD BLOCK INDEX LINK                 
         BNE   ISERS10             NO                                           
*                                                                               
         LH    RF,ISKEYLN                                                       
         AH    RF,0(R7)                                                         
         AR    RF,R7                                                            
         MVC   DUB(4),0(RF)        SAVE FIRST PD OVERFLOW BLOCK DA              
*                                                                               
         BRAS  RE,ERSBI            ERASE PD BLOCK INDEX ENTRY                   
         BRAS  RE,ISWRTPD          WRITE THE UPDATED PD BLOCK INDEX             
         MVC   ISOVDA,DUB                                                       
         CLC   DEADBLKA,DUB        IS THE DEAD BLOCK FIRST IN CHAIN             
         BE    ISERS16             YES - NOTHING LINKS TO IT                    
         B     ISERS12             PROCESS FIRST PD OVERFLOW BLOCK              
*                                                                               
ISERS10  CLC   DEADBLKA,2(R7)      DOES THIS BLOCK POINT TO DEAD ONE            
         BE    ISERS14                                                          
         OC    2(4,R7),2(R7)       MAKE SURE THERE IS A LINK                    
         JZ    *+2                 DIE=ZERO OFLOW PD                            
         MVC   ISOVDA,2(R7)        PROCESS NEXT PD OVERFLOW BLOCK               
*                                                                               
ISERS12  LA    R7,ISOVDA                                                        
         LA    R8,ISXTNT                                                        
         B     ISERS08                                                          
*                                                                               
ISERS14  MVC   2(4,R7),DEADBLKL    MOVE LINK FROM DEAD BLOCK                    
*&&DB                                                                           
         CLC   ISOVDA,DEADBLKL                                                  
         JE    *+2                 DIE=LOOP OFLOW PD                            
*&&                                                                             
         BRAS  RE,ISWRTPD          WRITE THIS UPDATED BLOCK                     
*                                                                               
ISERS16  XC    ISPDPTR,ISPDPTR     RESET SEQUENTIAL READ POINTER                
         B     EXIT                                                             
                                                                                
***********************************************************************         
* NOT ERASING FIRST REC IN BLK                                        *         
* R6 HAS BYTES THIS REC/R7 HAS NEXT REC ADDRESS                       *         
* R4 POINTS TO REC BEING ERASED                                       *         
***********************************************************************         
ISERS18  CLI   0(R7),X'FF'         TEST NEXT IS EOB                             
         BE    ISERS24                                                          
**NOP**  B     ISERS26                                                          
                                                                                
***********************************************************************         
* TEST IF NUMBER OF MISSING BYTES IN REC BEING ERASED                 *         
* IS LESS THAN MISSING FROM NEXT                                      *         
***********************************************************************         
         CLC   0(1,R4),0(R7)                                                    
         BNL   ISERS26                                                          
*                                                                               
         LLC   RE,0(R7)            GET MISSING BYTES FROM NEXT RECORD           
         L     RF,ISPDKEY                                                       
         AR    RF,RE               SET TO ADDR=ISPDKEY+MISSING                  
         LH    R5,ISKEYLN1                                                      
         SR    R5,RE               GIVES LEN-1 TO MOVE                          
         EX    R5,MVCRF1R7         MVC  0(0,RF),1(R7)                           
*                                                                               
         L     RE,ISPDPRKY         NOW FIND HOW MANY BYTES MATCH                
         L     RF,ISPDKEY                                                       
         SR    R0,R0               CLEAR COUNTER                                
*                                                                               
ISERS20  CLC   0(1,RE),0(RF)                                                    
         BNE   ISERS22                                                          
         LA    RE,1(RE)                                                         
         LA    RF,1(RF)                                                         
         BCT   R0,ISERS20                                                       
*                                                                               
ISERS22  LPR   R0,R0               GIVES CORRECTED MISSING BYTES                
         LLC   RE,0(R7)            GET CURRENT MISSING BYTES                    
         SR    RE,R0               GIVES NUMBER BYTES TO ADJUST                 
         SR    R7,RE               BACK UP NEXT RECORD POINTER                  
         SR    R6,RE               DECREMENT LENGTH TO MOVE                     
         STM   R6,R7,DUB           SAVE LENGTH AND POINTER                      
         STC   R0,0(R7)            SET MISSING BYTES                            
*                                                                               
         LH    RE,ISKEYLN1         MOVE CORRECTED KEY TO NEXT REC               
         SR    RE,R0               GIVES BYTES PRESENT                          
         EX    RE,*+8                                                           
         B     *+10                                                             
         MVC   1(0,R7),0(RF)                                                    
         B     ISERS26                                                          
                                                                                
***********************************************************************         
* ERASING LAST RECORD IN BLOCK                                        *         
***********************************************************************         
ISERS24  L     RF,ISBUFF1          MUST HAVE LINK                               
         OC    2(4,RF),2(RF)                                                    
         JZ    *+2                 DIE=MUST HAVE LINK                           
*                                                                               
* SET NEW HI KEY. R5 HAS KEYLEN-1                                               
*                                                                               
         L     R7,ISPDPRKY         GET FROM ADDRESS TO SET HI KEY               
         L     RF,ISBUFF1X                                                      
         SR    RF,R5               GET TO ADDRESS                               
         EX    R5,MVCRFR7          MVC  0(0,RF),0(R7)                           
*                                                                               
* NOW UPDATE BLKIND TO REFLECT THE NEW HIGH KEY IN THIS BLOCK                   
* ISPDKEY =A(OLD KEY)                                                           
* ISPDPRKY=A(NEW KEY)                                                           
* ISPDDA  =DA OF PD BLOCK (SHOULD BE A BLKIND)                                  
*                                                                               
         L     R7,DUB+4            NEXT CONTROL BYTE=FROM ADDRESS               
         L     RF,ISPDPTR          GET TO ADDRESS                               
         L     R6,ISBUFF1X                                                      
         SH    R6,ISKEYLN1         CAREFUL NOT TO CLOBBER HI KEY                
         SR    R6,R7               GIVES LEN TO MOVE                            
         BRAS  R9,MOVEIT           MVC  0(R6,RF),0(R7)                          
*                                                                               
         L     R4,ISBUFF1X                                                      
         SH    R4,ISKEYLN1                                                      
         L     R6,DUB              LEN TO CLEAR                                 
         SR    R4,R6               GIVE START ADDRESS FOR CLEAR                 
         BRAS  R9,ISADDXC          XC   0(R6,R4),0(R4)                          
         OC    ISOVDA,ISOVDA                                                    
         BZ    ISERS30                                                          
         BRAS  RE,ISWRTPD          WRITE OV DATA BLOCK                          
*                                                                               
         LA    R7,ISPDDA           READ PD BLOCK                                
         BRAS  RE,ISBLDCCW                                                      
         BRAS  RE,SETSCTR                                                       
         BRAS  RE,EXCP                                                          
*                                                                               
         L     R7,ISBUFF1                                                       
         CLC   2(4,R7),BLKINDEX    TEST FOR PD BLOCK INDEX LINK                 
         BNE   ISERS30A            NO                                           
*                                                                               
         BRAS  RE,UPDBI            UPDATE PD BLOCK INDEX ENTRY                  
         B     ISERS30             WRITE THE UPDATED PD BLOCK INDEX             
                                                                                
***********************************************************************         
* NOW MOVE DATA TO LEFT AND CLEAR                                     *         
***********************************************************************         
ISERS26  L     R7,DUB+4            NEXT CONTROL BYTE=FROM ADDRESS               
         L     RF,ISPDPTR          GET TO ADDRESS                               
         L     R6,ISBUFF1X                                                      
         SH    R6,ISKEYLN1         CAREFUL NOT TO CLOBBER HI KEY                
         SR    R6,R7               GIVES LEN TO MOVE                            
         BRAS  R9,MOVEIT           MVC  0(R6,RF),0(R7)                          
*                                                                               
ISERS28  L     R4,ISBUFF1X                                                      
         SH    R4,ISKEYLN1                                                      
         L     R6,DUB              LEN TO CLEAR                                 
         SR    R4,R6               GIVE START ADDRESS FOR CLEAR                 
         BRAS  R9,ISADDXC          XC   0(R6,R4),0(R4)                          
*                                                                               
ISERS30  BRAS  RE,ISWRTPD          WRITE PRIME DATA BLOCK                       
ISERS30A TM    ISCMPRSW,X'80'      TEST FIXED/VARIABLE LENGTH RECORDS           
         BO    ISERSX                                                           
         CLI   ISSWAPSW,0          TEST NEED TO UNSWAP                          
         BE    ISERSX              NO                                           
                                                                                
***********************************************************************         
* USERS RECORD IS AT TOP OF BUFFER - GIVE IT BACK                     *         
***********************************************************************         
         L     RF,P2               GET USER ADDRESS                             
         L     R7,ISBUFF1                                                       
         AH    R7,0(R7)                                                         
         LA    R7,7(R7)            POINT TO FIRST DATA BYTE                     
         LH    R6,ISRECLN                                                       
         BRAS  R9,MOVEIT           MVC  0(R6,RF),0(R7)                          
*                                                                               
ISERSX   XC    ISPDPTR,ISPDPTR     RESET SEQUENTIAL READ POINTER                
         B     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* ISREAD - READ RANDOM                                                *         
***********************************************************************         
AISREAD  NTR1  BASE=*,LABEL=*                                                   
         TM    READTYPE,FLUSH      SEE IF BLK IN CORE                           
         BO    ISRD6                                                            
         MVI   BUFFOK,X'80'                                                     
         BRAS  R9,CHKHILO          SEE IF BLK IN CORE                           
         B     ISRD6               KEY ARG LO                                   
         B     ISRD4               KEY ARG HI                                   
         B     ISRD10                                                           
                                                                                
***********************************************************************         
* KEY ARG HIGHER THAN PDBUFF IN CORE.                                 *         
* TEST FOR OVERFLOW THIS BLK                                          *         
***********************************************************************         
ISRD4    BRAS  R9,CHKHITI          SEE IF REC IN OVFLO BLK THIS PD BLK          
         BNH   ISRD8               KEY ARG LE - READ OVFLO BLK                  
                                                                                
***********************************************************************         
* KEY ARG UNRELATED TO ANYTHING IN CORE. SEARCH INDEX                 *         
***********************************************************************         
ISRD6    BRAS  R9,READIX                                                        
         B     EXIT                (FOR ISGETPD ONLY)                           
         B     ISRD8               KEYARG HI=READ OVERFLOW                      
         B     ISRD10                                                           
*                                                                               
ISRD8    L     R7,ISBUFF1          POINT TO PD BUFFER                           
         OC    2(4,R7),2(R7)       TEST FOR OVERFLOW PRESENT                    
         BZ    ISRD6               NO - SEARCH INDEX AGAIN                      
         BRAS  R9,READOV                                                        
         DC    AL4(0)                                                           
         B     ISRD8                                                            
*                                                                               
ISRD10   BRAS  R9,MOVEREC          NB - DOES NOT SET NOT FOUND IND              
         B     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* ISRDSEQ - READ SEQUENTIAL                                           *         
***********************************************************************         
AISRDSEQ NTR1  BASE=*,LABEL=*                                                   
         OC    ISPDDA,ISPDDA       TEST BUFFER CONTENTS VALID                   
         JZ    *+2                 DIE=ZERO ISPDDA                              
         L     R4,ISPDKEY                                                       
         CLI   0(R4),X'FF'         TEST FOR EOF REC                             
         BNE   ISRDSQ1             YES - SET EOF                                
*                                                                               
         MVI   P3+1,X'04'          SET EOF                                      
         XC    ISPDDA(8),ISPDDA    SET BUFF CONTENTS NOT VALID                  
         XC    ISPDPTR,ISPDPTR     CLEAR SEQ READ POINTER                       
         ICM   R1,15,ISFXTAB       TEST FOR EXTENDED BUFFERS                    
         BZ    EXIT                                                             
         XC    0(ISXTBLN,R1),0(R1)                                              
         B     EXIT                EXIT MODULE                                  
*                                                                               
ISRDSQ1  ICM   R7,15,ISPDPTR       GET LAST REC ADDRESS                         
         JZ    *+2                 DIE=ZERO ISPDPTR                             
         XR    RE,RE                                                            
         IC    RE,0(R7)            GET MISSING BYTES                            
         LH    R6,ISRECLN                                                       
         SR    R6,RE               GIVES RECORD BYTES PRESENT                   
         LA    R7,1(R7,R6)         LEN + CONTROL BYTE GIVES NEXT ADDR           
*                                                                               
ISRDSQ2  CLI   0(R7),X'FF'         TEST FOR EOB                                 
         BE    ISRDSQ4             YES                                          
*                                                                               
         ST    R7,ISPDPTR          SAVE NEW POINTER                             
         IC    RE,0(R7)            GET MISSING BYTES THIS REC                   
*                                                                               
         LA    RF,0(R4,RE)         GET TO ADDRESS (ISPDKEY+MISSING)             
         LH    R5,ISKEYLN1                                                      
         SR    R5,RE                                                            
         EX    R5,MVCRF1R7         MVC  0(0,RF),1(R7)                           
         BRAS  R9,MOVEREC          PASS REC TO USER                             
         B     EXIT                                                             
                                                                                
***********************************************************************         
* EOB ENCOUNTERED                                                     *         
***********************************************************************         
ISRDSQ4  L     R7,ISBUFF1                                                       
         OC    2(4,R7),2(R7)       IS LINK PRESENT                              
         BZ    ISRDSQ5             NO                                           
         CLC   2(4,R7),BLKINDEX    CHECK NOT PD BLOCK INDEX LINK                
         JE    *+2                 DIE=INV PD NDX LINK                          
         L     R7,ISBUFF1                                                       
         LA    R7,2(R7)            POINT TO DISK ADDRESS                        
         MVC   ISOVDA,0(R7)                                                     
         BRAS  RE,ISBLDCCW                                                      
         BRAS  RE,SETSCTR                                                       
         BRAS  RE,EXCP                                                          
         B     ISRDSQ6                                                          
                                                                                
***********************************************************************         
* NO LINK - GET NEXT PD REC ADDRESS                                   *         
***********************************************************************         
ISRDSQ5  XC    ISOVDA,ISOVDA       CLEAR OVERFLOW ADDRESS                       
         L     R4,ISTIHIKY         CLEAR TI HIGH KEY                            
         LH    R5,ISKEYLN1                                                      
         EX    R5,XCR4                                                          
*                                                                               
         XR    RE,RE                                                            
         IC    RE,ISPDDA+2                                                      
         LA    RE,1(RE)                                                         
         STC   RE,ISPDDA+2                                                      
         N     RE,=X'0000000F'                                                  
         CH    RE,ISHIPD           COMPARE TO HI REC ON PD TRACK                
         BNH   ISRDSQ5B                                                         
*                                                                               
ISRDSQ5A XR    RE,RE               BUMP TO NEXT TRACK                           
         ICM   RE,7,ISPDDA                                                      
         SRL   RE,4                                                             
         AHI   RE,1                NEXT TRACK                                   
         SLL   RE,32-20                                                         
         ST    RE,ISPDDA                                                        
         OI    ISPDDA+2,X'01'      BLOCK 1                                      
*                                                                               
ISRDSQ5B LA    R7,ISPDDA                                                        
         TM    READTYPE,DOLOCKER                                                
         BZ    *+8                                                              
         BRAS  RE,LOCKBLK                                                       
         BRAS  RE,ISBLDCCW                                                      
**NOP    CLI   P6,X'FF'            TEST IF TRACK BUFFER PASSED                  
**NOP    BE    ISRDSQ7                                                          
*                                                                               
ISRDSQ5C BRAS  RE,SETSCTR                                                       
         BRAS  RE,EXCP                                                          
*                                                                               
ISRDSQ6  L     R7,ISBUFF1                                                       
         CLC   2(4,R7),BLKINDEX    TEST FOR PD BLOCK INDEX LINK                 
         BE    ISRDSQ6A                                                         
         AH    R7,0(R7)            ADD SLACK                                    
         LA    R7,6(R7)            POINT TO FIRST CONTROL BYTE                  
         L     R4,ISPDKEY                                                       
         SR    RE,RE               RESET MISSING BYTE COUNT                     
         B     ISRDSQ2                                                          
*                                                                               
ISRDSQ6A AH    R7,0(R7)            POINT TO FIRST DISK ADDRESS                  
         AH    R7,ISKEYLN                                                       
         MVC   ISOVDA,0(R7)        READ AND PROCESS NEXT BLOCK                  
         BRAS  RE,ISBLDCCW                                                      
         BRAS  RE,SETSCTR                                                       
         BRAS  RE,EXCP                                                          
         B     ISRDSQ6                                                          
                                                                                
*&&DO                                                                           
***********************************************************************         
* FULL TRACK READ LOGIC - RETRY IF ERROR OCCURS                       *         
***********************************************************************         
ISRDSQ7  SR    R6,R6                                                            
         ICM   R6,7,P6+1           GET FULL TRACK BUFFER ADDRESS                
         BZ    ISRDSQ5C                                                         
         MVC   DUB(5),SRCH                                                      
*                                                                               
         CLC   0(7,R6),ISDTF+22    TEST FIRST TIME                              
         BE    *+16                                                             
         XC    0(16,R6),0(R6)                                                   
         MVC   0(7,R6),ISDTF+22                                                 
         CLC   8(2,R6),ISPDDA      TEST SAME TRACK                              
         BE    ISRDSQ9                                                          
*                                                                               
ISRDSQ8  MVI   SRCH+4,0            SET TO DO FULL TRK READ                      
*                                                                               
         MVC   CCW4+6(2),MAXIOL                                                 
         SR    R0,R0                                                            
         ICM   R0,3,CCW4+6                                                      
         LA    R1,16(R6)           IO ADDRESS=BUFF+16                           
         BRAS  RE,SETIDAWS                                                      
         LA    R0,IDAWS                                                         
         ST    R0,CCW4                                                          
         MVI   CCW4,X'5E'                                                       
         OI    CCW4+4,X'20'                                                     
*                                                                               
         BRAS  RE,SETSCTRZ                                                      
         BRAS  RE,EXCP                                                          
         BNE   ISRDSQ5B            IF ERROR, TRY WITHOUT TRACK BUFFER           
         MVC   8(2,R6),ISPDDA                                                   
*                                                                               
ISRDSQ9  LH    R1,ISPDLN           GET BLK LEN PLUS COUNT LEN                   
         LA    R1,8(R1)                                                         
         XR    R0,R0                                                            
         IC    R0,ISPDDA+2         GET BLK NUM MINUS ONE                        
         N     R0,=XL4'0000000F'                                                
         BCTR  R0,0                                                             
         MR    R0,R0                                                            
         LA    RE,16(R6,R1)        POINT TO BLK COUNT FIELD                     
         CLC   0(5,RE),DUB                                                      
         BE    ISRDSQ10                                                         
         LA    R7,ISPDDA           REISSUE NORMAL IO IF NO MATCH                
         BRAS  RE,ISBLDCCW                                                      
         XC    8(2,R6),8(R6)       RESET TRACK ADDRESS                          
         B     ISRDSQ5C                                                         
*                                                                               
ISRDSQ10 L     R0,ISBUFF1          SET TO ADDR                                  
         LH    R1,ISPDLN           SET TO LEN                                   
         LA    RE,8(RE)            SET FROM ADDR                                
         LR    RF,R1               FROM LEN=TO LEN                              
         MVCL  R0,RE                                                            
         B     ISRDSQ6                                                          
*&&                                                                             
         EJECT                                                                  
***********************************************************************         
* ROUTINE TO CALL LOCKER TO LOCK PD DATA RECORD                       *         
***********************************************************************         
LOCKBLK  NTR1  BASE=*,LABEL=*                                                   
*                                                                               
LOCKBLK0 ICM   RF,15,VSSB          TEST TO CALL DMLOCKER OFFLINE                
         BZ    EXIT                                                             
         OC    0(2,RF),0(RF)                                                    
         BNZ   LOCKBLK1                                                         
         TM    SSOSTAT2-SSOOFF(RF),SSOSLOCK                                     
         BZ    EXIT                                                             
*                                                                               
LOCKBLK1 ICM   R1,15,P7            TEST IF LOCKER PARAM LIST PASSED             
         BZ    EXIT                                                             
         MVC   1(3,R1),ISPDDA      SET PD D/A                                   
         LR    R0,R2               SAVE A(DTF) - FUCKING LOCKER                 
         L     R2,P8               DMGR CONTROL BLOCK                           
         MVC   LOCKBYTE,0(R2)      LOCKER IS FUSSY ABOUT BITS...                
         MVI   0(R2),X'80'                                                      
LOCKBLK2 GOTO1 ALOCKER,(R1)                                                     
         MVC   0(1,R2),LOCKBYTE                                                 
         LR    R2,R0               RESET A(DTF)                                 
*                                                                               
* THE NEXT INSTRUCTION ATTEMPTS TO STOP DOUBLE READS OF INDEX ON                
* READ HI FOR UPDATE BY NOT ALLOWING THE FLUSHME FLAG TO PERSIST.               
*                                                                               
         NI    READTYPE,255-FLUSHME                                             
*                                                                               
         TM    8(R1),X'01'         TEST ALREADY HAVE THE LOCK                   
         BO    EXIT                                                             
         OI    READTYPE,FLUSHME    IF DONT HAVE LOCK, FORCE READ                
         BRAS  RE,AISCBUFF         AND CLEAR BUFFERS                            
         B     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* CONSTRUCT AN IDAW LIST                                              *         
* R1=START DATA ADDRESS                                               *         
* R0=START DATA LENGTH                                                *         
*                                                                     *         
* NUMBER OF IDAWS NEEDED IS MAX 2K BOUNDARIES CROSSED +1              *         
* =((DATA LEN - 1)/2048 + 1)+ 1                                       *         
*                                                                     *         
* NOTE: MOST CALLING ROUTINES WILL NOT NEED TO SET THE IDAL FLAG IN   *         
* BIT 37 IF THEY ARE ONLY MODIFYING CCW4 BECAUSE ISBLDCCW SETS IT ON. *         
* CALLER ONLY NEEDS TO SET BIT IF HE IS BUILDING CCW HIMSELF.         *         
***********************************************************************         
SETIDAWS AHI   R0,-1               SUBTRACT 1                                   
         SRL   R0,11               DIVIDE BY 2048                               
         AHI   R0,2                PLUS 2 GIVES MAX BOUNDARIES + 1              
*                                                                               
         LA    RF,IDAWS            POINT TO IDAW LIST                           
SETIDAW2 ST    R1,0(RF)            SET START ADDRESS                            
         AHI   R1,2048             AND THEN GO IN 2048 MULTS                    
         SRL   R1,11                                                            
         SLL   R1,11                                                            
         LA    RF,4(RF)                                                         
         BRCT  R0,SETIDAW2                                                      
         BR    RE                                                               
         EJECT                                                                  
***********************************************************************         
* ROUTINE TO WRITE PD BLOCK                                           *         
***********************************************************************         
ISWRTPD  NTR1  BASE=*,LABEL=*                                                   
         LA    R7,ISOVDA                                                        
         OC    0(4,R7),0(R7)       TEST OVERFLOW ADDRESS PRESENT                
         BNZ   *+8                 YES                                          
         LA    R7,ISPDDA                                                        
*&&DB                                                                           
         L     RE,ISBUFF1          STOP SELF ABUSE - USEFUL IN DEBUG            
         CLC   2(4,RE),0(R7)                                                    
         JE    *+2                 DIE=INV PD NDX LINK                          
*&&                                                                             
         BRAS  RE,ISBLDCCW                                                      
         MVI   CCW4,5              SET OPCD=WRITE DATA                          
         BRAS  RE,SETSCTR                                                       
         BRAS  RE,EXCP                                                          
         B     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* ADD OVERFLOW RECORD IN ISBUFF2                                      *         
***********************************************************************         
ISADDOV  NTR1  BASE=*,LABEL=*                                                   
         BRAS  RE,LOCKDTF                                                       
*&&DB                              <==DEBUG CODE                                
         MVI   GMFLAG,C'Y'                                                      
         MVC   FULL,ISOVLAST                                                    
         XR    RE,RE                                                            
         IC    RE,FULL+2           RE=(TTTT)TB                                  
         AHI   RE,1                                                             
         STC   RE,FULL+2                                                        
         LA    R7,FULL                                                          
         BRAS  RE,ISBLDCCW                                                      
*                                                                               
         IC    R0,CCW4                                                          
         LA    RE,COUNT                                                         
         ST    RE,CCW4             MODIFY DATA ADDRESS                          
         STC   R0,CCW4                                                          
         MVI   CCW4+4,X'10'        RESET FLAGS/ SET SUPPRESS DATA XFR           
*                                                                               
         BRAS  RE,EXCP                                                          
         TM    ERRF+1,X'08'        TEST NOT FOUND                               
         JZ    *+2                 DIE=NOT FOUND ERR                            
         MVI   GMFLAG,C'N'                                                      
*&&                                                                             
         LA    R7,ISOVLAST                                                      
         BRAS  RE,ISBLDCCW         NOTE - BUILDS CORRECT SEEK ADDR              
         XC    CCW4,CCW4           MODIFY CCW4/CCW5                             
         LA    R0,COUNT                                                         
         ST    R0,CCW4                                                          
         MVI   CCW4,X'1D'          SET WTCKD                                    
         MVI   CCW4+4,X'80'        SET DATA CHAIN                               
         MVI   CCW4+7,8                                                         
*                                                                               
         LH    R0,ISPDLN           GET DATA LENGTH                              
         L     R1,ISBUFF2          GET DATA ADDRESS                             
         BRAS  RE,SETIDAWS         BUILD IDAL                                   
*                                                                               
         LA    R0,IDAWS                                                         
         ST    R0,CCW5                                                          
         MVI   CCW5,X'05'          SET WRITE DATA                               
         MVI   CCW5+4,X'04'        SET IDAL FLAG                                
         MVC   CCW5+6(2),ISPDLN                                                 
                                                                                
***********************************************************************         
* NOW BUILD COUNT FIELD. REC ID IS 1 HIGHER THAN SRCH REC.            *         
***********************************************************************         
         XC    COUNT,COUNT                                                      
         MVC   COUNT(4),SRCH                                                    
         MVC   COUNT+6(2),ISPDLN                                                
*                                                                               
         L     RE,ISOVLAST                                                      
         LR    RF,RE                                                            
         N     RF,=XL4'FFFFF000'   RF=TTTTT000                                  
         SRL   RE,8                                                             
         N     RE,=XL4'0000000F'   RE=0000000B                                  
         AHI   RE,1                                                             
         STC   RE,COUNT+4                                                       
*                                                                               
         SLL   RE,8                                                             
         OR    RF,RE               RF=TTTTTB00                                  
         ST    RF,ISOVLAST                                                      
         SRL   RE,8                FOR CH BELOW                                 
*                                                                               
         L     RF,ISBUFF1                                                       
         MVC   2(4,RF),ISOVLAST    SET LINK FIELD IN BUFF1                      
*&&DB                                                                           
         CLC   ISPDDA,ISOVLAST     HOW CAN THIS BE?                             
         JE    *+2                 DIE=INVALID LINK                             
*&&                                                                             
         CH    RE,ISHIPD           ADDING LAST BLOCK ON THIS TRACK?             
         BL    ISADOV04            NO                                           
*                                                                               
         L     RE,ISOVLAST                                                      
         SRL   RE,32-20            RE=000TTTTT                                  
         AHI   RE,1                                                             
         SLL   RE,32-20            RE=TTTTT000                                  
         ST    RE,ISOVLAST                                                      
*                                                                               
ISADOV04 BRAS  RE,SETSCTR                                                       
         BRAS  RE,EXCP                                                          
         BRAS  RE,FREEDTF                                                       
         B     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* COMMON PORTION OF ADD LOGIC                                         *         
***********************************************************************         
B1       USING SVBLKD,BLKK1                                                     
B2       USING SVBLKD,BLKK2                                                     
*                                                                               
AISADD18 NTR1  BASE=*,LABEL=*                                                   
         L     R4,ISPDPRKY         PRECEDING KEY SAVE AREA                      
         LH    R5,ISKEYLN1                                                      
*                                                                               
         TM    ISCMPRSW,X'80'      TEST FIXED/VARIABLE LENGTH RECORDS           
         BZ    *+14                                                             
         LR    RF,R4                                                            
         EX    R5,OCRF             CHECK FIRST IN BLK  OC 0(0,RF),0(RF)         
         BZ    *+12                SKIP COMPRESSION IF FIRST                    
         TM    ISCMPRSW,X'01'      ELSE TEST FILE USES COMPRESSION              
         BNZ   ISADD22             YES                                          
         SR    R5,R5               NO - SET MATCH LEN=-1                        
         BCTR  R5,0                                                             
         B     ISADD24                                                          
*                                                                               
ISADD20  EX    R5,CLCR3R4          CLC  0(0,R3),0(R4)                           
         BE    ISADD24                                                          
*                                                                               
ISADD22  AHI   R5,-1                                                            
         BNM   ISADD20                                                          
*                                                                               
ISADD24  LA    R5,1(R5)            SET NUMBER OF MATCHING BYTES                 
         ST    R5,DUB1             SAVE MATCHED BYTES INSERT REC                
                                                                                
***********************************************************************         
* RECORD WILL FIT IN BUFFER IF SPARE IS NOT LESS THAN COMPRESSED      *         
* LENGTH OF NEW RECORD                                                *         
***********************************************************************         
         TM    ISCMPRSW,X'80'      TEST FIXED/VARIABLE LENGTH RECORDS           
         BZ    *+16                                                             
         LH    RE,ISKEYLN                                                       
         AR    RE,R3               POINT TO RECLEN                              
         MVC   ISRECLN,0(RE)       SAVE RECLEN                                  
         LH    RE,ISRECLN                                                       
         BCTR  R5,0                ADJUST FOR CONTROL                           
         SR    RE,R5               GIVES TOTAL INSERT LENGTH                    
         ST    RE,DUB2             SAVE TOTAL INSERTION LENGTH                  
*                                                                               
         L     R7,ISBUFF1          GET BUFFER ADDRESS                           
         MVC   DUB(6),0(R7)        SAVE SPARE AND LINK                          
         LH    R0,0(R7)            GET SPARE                                    
         SR    R0,RE                                                            
         BM    ISADD28             NOT ENOUGH ROOM - SPLIT BUFFER               
*                                                                               
         STH   R0,0(R7)            SET REMAINING SPARE                          
         BRAS  R9,ISADDMV          MOVE BUFFER TO LEFT AND INSERT DATA          
         B     ISADD26                                                          
*                                                                               
ISADD26  BRAS  RE,ISWRTPD          WRITE PRIME DATA BLOCK                       
         TM    ISCMPRSW,X'80'      TEST FIXED/VARIABLE LENGTH RECORDS           
         BO    ISADDX                                                           
         CLI   ISSWAPSW,0          TEST NEED TO UNSWAP                          
         BE    ISADDX              NO                                           
                                                                                
***********************************************************************         
* USERS RECORD IS AT TOP OF BUFFER - GIVE IT BACK                     *         
***********************************************************************         
         L     RF,P2               GET USER ADDRESS                             
         L     R7,ISBUFF1                                                       
         AH    R7,0(R7)                                                         
         LA    R7,7(R7)            POINT TO FIRST DATA BYTE                     
         LH    R6,ISRECLN                                                       
         BRAS  R9,MOVEIT           MVC  0(R6,RF),0(R7)                          
         B     ISADDX                                                           
                                                                                
***********************************************************************         
* REC WILL NOT FIT - SPLIT BUFFER                                     *         
***********************************************************************         
ISADD28  OC    ISOVLAST,ISOVLAST   TEST IF EOF SET FOR OVERFLOW                 
         JZ    *+2                 DIE=ZERO ISOVLAST                            
         BRAS  RE,AISCBUFF         CLEAR ALL BUFFERS                            
*                                                                               
         L     R0,ISBUFF1          MOVE BUFF1 TO BUFF2                          
         L     RE,ISBUFF2                                                       
         LH    R1,ISPDLN                                                        
         LH    RF,ISPDLN                                                        
         MVCL  RE,R0                                                            
*                                                                               
         L     R0,ISBUFF1                                                       
         LH    R1,ISPDLN                                                        
         AHI   R1,6                                                             
         XR    RF,RF                                                            
         MVCL  R0,RE               CLEAR BUFF1 + FIRST 6 BYTES OF BUFF2         
*                                                                               
         L     R0,ISPDPTR          GET OLD INSERTION ADDRESS                    
         AH    R0,ISPDLN           NOW IN BUFF2                                 
         ST    R0,ISPDPTR          SET IT                                       
*                                                                               
         L     R7,ISBUFF2                                                       
         BRAS  R9,ISADDMV          MOVE BUFFER LEFT AND INSERT DATA             
                                                                                
***********************************************************************         
* NOW MOVE DATA TO TOP OF BUFF1 AND SET SLACK/LINK                    *         
***********************************************************************         
         L     R4,ISBUFF1                                                       
         L     R8,ISBUFF1X                                                      
         SH    R8,ISKEYLN          GIVES LAST AVAILABLE BYTE + 1                
*                                                                               
         LH    R0,ISPDLN                                                        
         SRL   R0,1                                                             
         TM    ISCMPRSW,X'80'      TEST FIXED/VARIABLE LENGTH RECORDS           
         BZ    *+8                                                              
         SRL   R0,1                FOR V/L MAX REC LE 3/4 BLK SIZE              
*                                                                               
         STH   R0,0(R4)            SET SLACK BYTES                              
         AR    R4,R0                                                            
         LA    R4,6(R4)            GET TO ADDRESS                               
         L     R3,DUB3             GET FROM ADDR (SET BY ISADDMV)               
*                                                                               
ISADD30  CLI   0(R3),X'FF'         CHECK FOR EOB FLAG                           
         BE    ISADD32                                                          
*                                                                               
         LH    R6,ISKEYLN                                                       
         TM    ISCMPRSW,X'80'      TEST FIXED/VARIABLE LENGTH RECORDS           
         BO    *+8                                                              
         LH    R6,ISRECLN                                                       
*                                                                               
         SR    RE,RE                                                            
         IC    RE,0(R3)            GET MISSING BYTES                            
         SR    R6,RE               GIVES KEY BYTES PRESENT                      
         TM    ISCMPRSW,X'80'      TEST FIXED/VARIABLE LENGTH RECORDS           
         BZ    *+20                                                             
         LA    R6,1(R3,R6)         POINT TO RECLEN                              
         MVC   DUB(2),0(R6)        ALIGN                                        
         LH    R6,DUB                                                           
         SR    R6,RE               GIVES ACTUAL REC BYTES PRESENT               
         LA    R6,1(R6)            ADJUST FOR CONTROL BYTE                      
         LA    R0,0(R4,R6)                                                      
         CR    R0,R8                                                            
         BH    ISADD32             NO MORE ROOM                                 
*                                                                               
         LH    R5,ISKEYLN1         CONSTRUCT THIS KEY                           
         SR    R5,RE               GIVES KEY LEN PRESENT - 1                    
         L     RF,ISPDKEY                                                       
         AR    RF,RE               GET TO ADDRESS                               
         LR    R7,R3               GET FROM ADDRESS                             
         EX    R5,MVCRF1R7         MVC  0(0,RF),1(R7)                           
*                                                                               
         LR    RF,R4               GET TO ADDRESS                               
         LR    R4,R0               SAVE NEXT TO ADDRESS                         
         AR    R3,R6               SAVE NEXT FROM ADDRESS                       
         BRAS  R9,MOVEIT           MVC  0(R6,RF),0(R7)                          
         B     ISADD30                                                          
*                                                                               
* REC WILL NOT FIT IN BUFF1                                                     
*                                                                               
ISADD32  MVI   0(R4),X'FF'         SET EOB FLAG                                 
*                                                                               
         LA    R0,1(R4)            NOW CLEAR TO END OF BLK                      
         L     R1,ISBUFF1X                                                      
         SR    R1,R0               GIVES LEN TO CLEAR                           
         XR    RF,RF                                                            
         MVCL  R0,RE                                                            
*                                                                               
         LH    R5,ISKEYLN1                                                      
         L     RF,ISBUFF1X                                                      
         SR    RF,R5               SET A(HI KEY AREA)                           
         L     R7,ISPDKEY                                                       
         EX    R5,MVCRFR7          MVC  0(0,RF),0(R7)                           
*                                                                               
* R3 POINTS TO REC IN BUFF2 THAT WONT FIT                                       
*                                                                               
         CLI   0(R3),X'FF'         TEST EOB FLAG                                
         BNE   ISADD34             NO                                           
*                                                                               
         L     R7,ISBUFF1                                                       
         MVC   2(4,R7),DUB+2       RESTORE OLD LINK FIELD                       
         B     ISADD26                                                          
*                                                                               
ISADD34  L     R0,ISBUFF2          CLEAR TOP OF BUFF2                           
         LR    R1,R3                                                            
         SR    R1,R0                                                            
         XR    RF,RF                                                            
         MVCL  R0,RE                                                            
                                                                                
***********************************************************************         
* NOW RESTORE MISSING BYTES OF FIRST KEY IN BUFF2                     *         
***********************************************************************         
         XR    R6,R6                                                            
         ICM   R6,1,0(R3)                                                       
         BZ    ISADD36                                                          
         SR    R3,R6                                                            
         LA    RF,1(R3)            SET TO ADDRESS                               
         L     R7,ISPDKEY          ISPDKEY HAS LAST KEY MOVED                   
         BCTR  R6,0                                                             
         EX    R6,MVCRFR7          MVC  0(0,RF),0(R7)                           
*                                                                               
ISADD36  L     R4,ISBUFF2                                                       
         LA    RF,6(R4)            CONTROL BYTES NOT INCLUDED                   
         SR    R3,RF                                                            
         STH   R3,0(R4)                                                         
         MVC   2(4,R4),DUB+2       RESTORE OLD LINK FIELD                       
*                                                                               
         BRAS  RE,ISADDOV          ADD ISBUFF2 TO OVERFLOW                      
*                                                                               
         TM    ISFFLAG,ISFBLKIX    BLOCK INDEX?                                 
         BZ    ISADD26             NO                                           
*                                                                               
         L     RE,ISBUFF1                                                       
         MVC   B2.SVLNK,2(RE)      SAVE OVERFLOW BLOCK D/A                      
         L     RE,ISBUFF2                                                       
         AH    RE,ISPDLN                                                        
         SH    RE,ISKEYLN          RE=(HIGH KEY IN PD BUFFER)                   
         LH    R1,ISKEYLN1                                                      
         EX    R1,*+8                                                           
         B     *+10                                                             
         MVC   B2.SVHIKEY(0),0(RE) SAVE OVERFLOW HIGH KEY ADDED                 
                                                                                
***********************************************************************         
* LOGIC TO PROCESS PD BLOCK INDEX AFTER SPLIT                         *         
***********************************************************************         
         TM    ISCMPRSW,X'80'      TEST FIXED/VARIABLE LENGTH RECORDS           
         BO    ISADD38                                                          
         CLI   ISSWAPSW,0          TEST NEED TO UNSWAP                          
         BE    ISADD38             NO                                           
                                                                                
***********************************************************************         
* USERS RECORD IS AT TOP OF BUFFER - GIVE IT BACK                     *         
***********************************************************************         
         L     RF,P2               GET USER ADDRESS                             
         L     R7,ISBUFF1                                                       
         AH    R7,0(R7)                                                         
         LA    R7,7(R7)            POINT TO FIRST DATA BYTE                     
         LH    R6,ISRECLN                                                       
         BRAS  R9,MOVEIT           MVC  0(R6,RF),0(R7)                          
         MVI   ISSWAPSW,0          CLEAR UNSWAP FLAG                            
*                                                                               
ISADD38  OC    ISOVDA,ISOVDA       BLKIND INDEX ALREADY PRESENT?                
         BNZ   ISADD40             YES                                          
*                                                                               
         L     R0,ISBUFF1          COPY ISBUFF1 TO ISBUFF2                      
         L     RE,ISBUFF2                                                       
         LH    R1,ISPDLN                                                        
         LH    RF,ISPDLN                                                        
         MVCL  RE,R0                                                            
*                                                                               
         L     RF,ISBUFF2          SAVE HIGH KEY                                
         AH    RF,ISPDLN                                                        
         SH    RF,ISKEYLN                                                       
         LH    R1,ISKEYLN1                                                      
         EX    R1,*+8                                                           
         B     *+10                                                             
         MVC   B1.SVHIKEY(0),0(RF)                                              
*                                                                               
         BRAS  RE,ISADDOV          ADD PD BLOCK TO OVERFLOW                     
         L     RE,ISBUFF1                                                       
         MVC   B1.SVLNK,2(RE)      SAVE LINK D/A                                
         B     ISADD42                                                          
*                                                                               
* IF BLKIND PD BLOCK EXISTS, WE ARE ALWAYS SPLITTING AN OV BLOCK                
* WE ADDED THE SECOND HALF OF THE OV BLOCK. NOW WE JUST NEED TO                 
* WRITE THIS PART BACK WHERE IT WAS IN THE OV CHAIN.                            
*                                                                               
ISADD40  MVC   B1.SVLNK,ISOVDA     SAVE LINK D/A                                
         L     RE,ISBUFF1                                                       
         AH    RE,ISPDLN                                                        
         SH    RE,ISKEYLN          RE=(HIGH KEY IN LOW OV BUFFER)               
         LH    R1,ISKEYLN1                                                      
         EX    R1,*+8                                                           
         B     *+10                                                             
         MVC   B1.SVHIKEY(0),0(RE) SAVE KEY                                     
*                                                                               
         BRAS  RE,ISWRTPD          WRITE BACK OV BLOCK INTO ISOVDA              
*                                                                               
ISADD42  LA    R7,ISPDDA           GET PD BLOCK INTO ISBUFF1                    
         TM    READTYPE,DOLOCKER                                                
         BZ    *+8                                                              
         BRAS  RE,LOCKBLK                                                       
         BRAS  RE,ISBLDCCW                                                      
         BRAS  RE,SETSCTR                                                       
         BRAS  RE,AISCBUFF         CLEAR ALL BUFFERS                            
         BRAS  RE,EXCP                                                          
*                                                                               
         XC    ISOVDA,ISOVDA       MAKE SURE INDEX GOES TO PD BUFFER            
*                                                                               
         L     RE,ISBUFF1                                                       
         CLC   BLKINDEX,2(RE)      ALREADY A BLKIND BLOCK IN PD?                
         BNE   ISADD44             NO - BUILD A NEW ONE                         
*                                                                               
         BRAS  RE,CHKPD                                                         
         LA    R1,B1.SVBLKD        UPDATE BLOCK INDEX WITH NEW DETAILS          
         BRAS  RE,INSBI                                                         
         BRAS  RE,CHKPD                                                         
         LA    R1,B2.SVBLKD                                                     
         BRAS  RE,INSBI                                                         
         BRAS  RE,CHKPD                                                         
         B     ISADD46                                                          
*                                                                               
ISADD44  BRAS  RE,BLDNBI           BUILD NEW INDEX BLOCK                        
*                                                                               
ISADD46  BRAS  RE,ISWRTPD          WRITE IT BACK AS NECESSARY                   
         BRAS  RE,AISCLEAR                                                      
         B     ISADDX                                                           
                                                                                
***********************************************************************         
* ADD EXIT LOGIC                                                      *         
***********************************************************************         
ISADDX   XC    ISPDPTR,ISPDPTR     RESET SEQUENTIAL READ POINTER                
         B     EXIT                                                             
         EJECT                                                                  
***********************************************************************         
* INSERT NEW PD BLOCK INDEX ENTRY                                     *         
* R1=A(ENTRY TO ADD)                                                  *         
***********************************************************************         
INSBI    NTR1  BASE=*,LABEL=*                                                   
         LR    R3,R1                                                            
         USING SVBLKD,R3                                                        
*                                                                               
INSB02   L     RF,ISBUFF1                                                       
         AH    RF,ISPDLN                                                        
         SH    RF,ISKEYLN4         POINT RF TO HIGHEST KEY IN BLOCK             
         LH    RE,ISKEYLN1                                                      
         EX    RE,*+8              ARE WE ADDING A HIGHER KEY?                  
         BNH   INSB04              NO - CARRY ON                                
         CLC   SVHIKEY(0),0(RF)                                                 
*                                                                               
         L     R7,ISBUFF1                                                       
         OC    6(4,R7),6(R7)       IS THERE AN OVERFLOW BLKIND BLOCK?           
         JZ    *+2                 DIE=ZERO BLKIND                              
*                                                                               
         LA    R7,6(R7)                                                         
         MVC   ISOVDA,0(R7)        SAVE DISK ADDRESS                            
         BRAS  RE,ISBLDCCW                                                      
         BRAS  RE,SETSCTR                                                       
         BRAS  RE,EXCP             AND READ THIS OVERFLOW BLOCK                 
         B     INSB02                                                           
*                                                                               
INSB04   OC    SVLNK,SVLNK         ENSURE WE HAVE A VALID D/A                   
         JZ    *+2                 DIE=ZERO LINK                                
         L     R1,ISBUFF1                                                       
         AH    R1,0(R1)            POINT TO FIRST (LOWEST) KEY                  
         ST    R1,FULL             OVERWRITE POINT IF EQUAL                     
*                                                                               
         LH    RF,ISKEYLN1                                                      
         EX    RF,CLCSVHR1                                                      
         BE    INSB08              EQUAL - OVERWRITE                            
         BH    INSB06              HIGH - INSERT INTO ARRAY                     
*                                                                               
         L     R1,FULL             LOW - ADD BEFORE FIRST                       
         SH    R1,ISKEYLN4                                                      
         ST    R1,FULL             SET INSERT POINT BEFORE FIRST                
*                                                                               
         BRAS  RE,INSFIT           MAKE SURE ENTRY WILL FIT                     
         BRAS  RE,INSFXLN          UPDATE LENGTH TO REFLECT INSERTION           
         B     INSB08              INSERT KEY+DA (USE OVERWRITE LOGIC)          
*                                                                               
INSB06   LA    R1,SVHIKEY                                                       
         BRAS  RE,BSRCH            FIND INSERTION POINT (RET IN FULL)           
*                                                                               
         L     RE,FULL                                                          
         LH    RF,ISKEYLN1                                                      
         EX    RF,*+8                                                           
         BE    INSB08              EXACT MATCH - JUST OVERWRITE                 
         CLC   SVHIKEY(0),0(RE)                                                 
*                                                                               
         BRAS  RE,INSFIT           MAKE SURE ENTRY WILL FIT                     
*                                                                               
         L     RE,ISBUFF1          MOVE ALL ENTRIES BACK 1 SLOT                 
         AH    RE,0(RE)            RE=MOVE FROM POINT                           
         LR    R0,RE                                                            
         SH    R0,ISKEYLN4         R0=MOVE TO POINT                             
         L     RF,FULL                                                          
         SR    RF,RE               RF=MOVE FROM LENGTH                          
         L     R1,FULL                                                          
         SR    R1,R0               R1=MOVE TO LENGTH                            
         MVCL  R0,RE                                                            
*                                                                               
         L     RF,FULL                                                          
         SH    RF,ISKEYLN4         GO BACK 1 ENTRY FOR INSERT POINT             
         ST    RF,FULL                                                          
         BRAS  RE,INSFXLN          UPDATE LENGTH TO REFLECT INSERTION           
*                                                                               
INSB08   L     RF,FULL             OVERWRITE ENTRY - ADDRESS IN FULL            
         LH    RE,ISKEYLN1                                                      
         EX    RE,*+8                                                           
         B     *+10                                                             
         MVC   0(0,RF),SVHIKEY     KEY                                          
         AH    RF,ISKEYLN                                                       
         MVC   0(4,RF),SVLNK       D/A                                          
         B     EXIT                                                             
         DROP  R3                                                               
*                                                                               
INSFIT   L     R1,ISBUFF1                                                       
         LH    R0,0(R1)            MAKE SURE ANOTHER ENTRY WILL FIT             
         AHI   R0,-10                                                           
         CH    R0,ISKEYLN4                                                      
         BNLR  RE                                                               
*                                                                               
         BRAS  RE,INSBSPLT         SPLIT THIS INDEX BLOCK                       
         B     INSB02              AND TRY AGAIN                                
*                                                                               
INSFXLN  L     RF,ISBUFF1                                                       
         LH    R0,0(RF)            UPDATE LENGTH TO REFLECT INSERTION           
         SH    R0,ISKEYLN4                                                      
         STH   R0,0(RF)                                                         
         BR    RE                                                               
         EJECT                                                                  
***********************************************************************         
* CASE WHERE BLOCK IS FULL - NEED TO SPLIT THIS BLKIND BLOCK          *         
***********************************************************************         
INSBSPLT NTR1  BASE=*,LABEL=*                                                   
         BRAS  RE,SPBWTO           WRITE OUT CONSOLE MESSAGE                    
*                                                                               
         L     R0,ISBUFF2          CLEAR BUFFER 2                               
         LH    R1,ISPDLN                                                        
         XR    RF,RF                                                            
         MVCL  R0,RE                                                            
*                                                                               
         L     R7,ISBUFF2                                                       
         MVC   2(4,R7),BLKINDEX    RESET PD AS BLOCK INDEX                      
         LH    RF,ISPDLN                                                        
         STH   RF,0(R7)            SET DISPLACEMENT TO BE END                   
*                                                                               
         L     R7,ISBUFF1                                                       
         LH    RE,ISPDLN                                                        
         LH    RF,0(R7)                                                         
         SR    RE,RF                                                            
         SRDL  RE,32               FIND NUMBER OF WHOLE ENTRIES                 
         LH    R0,ISKEYLN4                                                      
         DR    RE,R0                                                            
         LTR   RE,RE                                                            
         JNZ   *+2                 DIE=INV BLK SPLIT                            
*                                                                               
         SRL   RF,1                WE WANT ABOUT 1/2 OF THE NUMBER              
         MH    RF,ISKEYLN4         WHICH THEN GIVES US A LENGTH                 
         ST    RF,SPADDR           THAT WE WANT TO SAVE FOR LATER USE           
         LR    R1,RF                                                            
*                                                                               
         LH    RE,ISPDLN                                                        
         SR    RE,RF                                                            
         A     RE,ISBUFF2          THIS GIVES A TO ADDRESS                      
         LH    R0,ISPDLN                                                        
         SR    R0,RF                                                            
         A     R0,ISBUFF1          THENCE WE DEDUCE A FROM ADDRESS              
*                                                                               
         MVCL  RE,R0               COPY BOTTOM 1/2 FROM ISBUFF1 TO 2            
*                                                                               
         L     R7,ISBUFF2                                                       
         LH    RF,ISPDLN                                                        
         S     RF,SPADDR                                                        
         STH   RF,0(R7)            THEN SET CORRECT LENGTH IN BUFFER            
         L     RE,ISBUFF1                                                       
         MVC   6(4,R7),6(RE)       AND COPY THE LINKAGE DISK ADDRESS            
*                                                                               
         BRAS  RE,ISADDOV          ADD ISBUFF2 TO OVERFLOW                      
*                                                                               
         L     R7,ISBUFF1                                                       
         MVC   6(4,R7),2(R7)       SAVE DISK ADDRESS CHAINED INDEX REC          
         MVC   2(4,R7),BLKINDEX    MARK THIS AS PD BLOCK INDEX                  
*                                                                               
         L     R0,ISBUFF1                                                       
         L     RE,ISBUFF2                                                       
         LH    R1,ISPDLN                                                        
         LH    RF,ISPDLN                                                        
         MVCL  RE,R0               COPY 1 TO 2                                  
*                                                                               
         L     R0,ISBUFF1                                                       
         AHI   R0,10                                                            
         LH    R1,ISPDLN                                                        
         AHI   R1,-10                                                           
         XR    RF,RF                                                            
         MVCL  R0,RE               CLEAR BUFFER 1 EXCEPT TOP INFO               
*                                                                               
         L     R7,ISBUFF2                                                       
         LH    RE,0(R7)            DISPLACEMENT TO FIRST DATA                   
         A     RE,ISBUFF2          RE=MOVE FROM POINT                           
*                                                                               
         LH    R0,0(R7)                                                         
         A     R0,SPADDR                                                        
         L     RF,ISBUFF1                                                       
         STH   R0,0(RF)            SET DISPLACEMENT IN ISBUFF1                  
         A     R0,ISBUFF1          R0=MOVE TO POINT                             
*                                                                               
         LH    RF,ISPDLN                                                        
         SH    RF,0(R7)                                                         
         S     RF,SPADDR           MOVE LENGTH =SPADDR - SLACK - OTHER          
         LR    R1,RF                                                            
         MVCL  R0,RE                                                            
*                                                                               
         L     R7,ISBUFF1                                                       
         BRAS  RE,ISWRTPD          WRITE FIRST  HALF BACK IN SITU               
*                                                                               
         XC    ISOVDA,ISOVDA                                                    
         LA    R7,ISPDDA           GET REAL PD BLOCK BACK IN ISBUFF1            
         TM    READTYPE,DOLOCKER                                                
         BZ    *+8                                                              
         BRAS  RE,LOCKBLK                                                       
         BRAS  RE,ISBLDCCW                                                      
         BRAS  RE,SETSCTR                                                       
         OI    READTYPE,FLUSH                                                   
         BRAS  RE,EXCP                                                          
         B     EXIT                AND START OVER AGAIN                         
         EJECT                                                                  
***********************************************************************         
* COMMON ROUTINES - EVERYTHING FROM HERE IS ADDRESSED VIA RA          *         
***********************************************************************         
         DROP  RB                                                               
         DS    0D                                                               
COMMON   DC    CL8'COMMON'                                                      
         EJECT                                                                  
***********************************************************************         
* MOVE DATA AT TOP OF BUFFER TO LEFT FOR INSERT LENGTH.               *         
* LENGTH OF MOVE IS GIVEN BY (INSERT ADDR - FIRST CONTROL BYTE ADDR)  *         
* DUB HAS ORIGINAL SPARE BYTES.                                       *         
* THEN INSERT DATA IN AREA JUST CREATED.                              *         
***********************************************************************         
ISADDMV  ST    R9,SAVER                                                         
*                                                                               
         AH    R7,DUB              ADD SPARE TO BUFFER ADDRESS                  
         LA    R7,6(R7)            FIRST CONTROL BYTE IS FROM ADDR              
         LR    RF,R7                                                            
         S     RF,DUB2             LESS INSERT LEN=TO ADDR                      
         ST    RF,DUB3             SAVE IT                                      
         L     R6,ISPDPTR          GET POINT OF INSERT                          
         SR    R6,R7               GIVES LENGTH TO MOVE                         
         BZ    *+8                 0 IF NEW REC IS FIRST IN BLK                 
         BRAS  R9,MOVEIT           MVC  0(R6,RF),0(R7)                          
*                                                                               
         L     RF,ISPDPTR          GET INSERTION ADDRESS                        
         L     R6,DUB2             GET INSERT LEN                               
         SR    RF,R6               GIVES TO ADDR                                
         L     RE,DUB1             GET NUMBER MATCHED BYTES INSERT REC          
         STC   RE,0(RF)            SET IN BUFFER                                
         LA    RF,1(RF)            SET TO ADDRESS                               
         BCTR  R6,0                                                             
         LA    R7,0(RE,R3)         GET FROM ADDRESS                             
         BRAS  R9,MOVEIT           MVC  0(R6,RF),0(R7)                          
*                                                                               
         L     R9,SAVER                                                         
         BR    R9                                                               
         EJECT                                                                  
***********************************************************************         
* COMPUTE SECTOR NUMBER FOR SEARCH                                    *         
***********************************************************************         
SETSCTR  BR    RE                  WE DONT NEED THIS ANYMORE                    
*&&DO                                                                           
*ETSCTR  STM   RE,RC,12(RD)        SAVE ALL CALLING REGS                        
         MVI   RPSSW,0                                                          
         OC    DEVSCT,DEVSCT       EXIT IF RPS NOT SUPPORTED                    
         BZR   RE                                                               
*                                                                               
         MVI   RPSSW,C'Y'                                                       
         SR    R0,R0                                                            
         ICM   R0,12,CCW4+6        GET BLOCK SIZE PLUS IRG                      
         TM    CCW4+4,X'80'                                                     
         BZ    *+8                                                              
         ICM   R0,12,CCW5+6                                                     
         ICM   R0,1,SEEK+6         GET REC NUM FROM SEEK ADDRESS                
*                                                                               
         XR    RF,RF                                                            
         IC    RF,ISFUC            PICK UP INTERNAL DEVICE CODE                 
         BCTR  RF,0                                                             
         SLL   RF,1                                                             
         LA    RE,DEVCODE(RF)      POINT TO THIS ENTRY                          
*                                                                               
         LA    R2,SECTOR           POINT R2 TO OUTPUT FIELD                     
         ICM   R2,8,0(RE)          THEN PICK UP UCB DVC TYPE IN REG             
*                                                                               
         L     RF,X'10'(,R0)       CVT CORE LOCATION                            
         L     RF,X'E8'(,RF)       GET ROUTINE ADDRESS                          
         BASR  RE,RF               BRANCH TO SECTOR COMP ROUTINE                
*                                                                               
         LM    RE,RC,12(RD)        RESTORE REGS                                 
         BR    RE                                                               
*&&                                                                             
SETSCTRZ MVI   RPSSW,0             EXIT IF RPS NOT AVAILABLE                    
         OC    DEVSCT,DEVSCT                                                    
         BZR   RE                                                               
         MVI   SECTOR,0            SET SECTOR TO ZERO                           
         MVI   RPSSW,C'Y'                                                       
         BR    RE                                                               
         EJECT                                                                  
***********************************************************************         
* READ INDEX RECORD - R3=A(KEYARG)                                    *         
***********************************************************************         
READIX   XC    ISPDDA(12),ISPDDA   INCLUDES ISOVDA,ISPDPTR                      
         LH    RF,ISKEYLN1                                                      
         L     R4,ISPDPRKY                                                      
         EX    RF,XCR4                                                          
         L     R4,ISPDKEY                                                       
         EX    RF,XCR4                                                          
         L     R4,ISTIHIKY                                                      
         EX    RF,XCR4                                                          
*                                                                               
         L     R5,ISINDX           R5=A(START OF DATA)                          
         L     R0,0(R5)            A(END)                                       
         AHI   R5,16               FIRST 16 BYTES RESERVED                      
         SR    R0,R5               R0/1=LENGTH OF DATA IN BUFFER                
         SRDL  R0,32                                                            
         LH    RF,ISKEYLN4         RF=LENGTH OF SINGLE ENTRY                    
         DR    R0,RF                                                            
         XR    R0,R0               R0=LOW                                       
         BCTR  R1,0                R1=HIGH                                      
         LH    RE,ISKEYLN1         RE=L'KEY-1                                   
*                                                                               
RDIX02   CR    R0,R1               WHILE LOW <= HIGH                            
         BH    RDIX04              R0 POINTS TO INSERTION POINT                 
*                                                                               
         LR    R4,R0               R4=MID                                       
         AR    R4,R1                                                            
         SRL   R4,1                MID=(HIGH+LOW)/2                             
         LR    RF,R4                                                            
         MH    RF,ISKEYLN4                                                      
         AR    RF,R5               RF=A(TEST ENTRY)                             
*                                                                               
         EX    RE,CLCR3RF          TRY TO MATCH KEY                             
         BE    RDIX06              KEY == K(MID)                                
         BL    *+12                                                             
         LA    R0,1(R4)            IF CC HIGH : LOW=MID+1                       
         B     RDIX02                                                           
         LR    R1,R4               IF CC LOW : HIGH=MID-1;                      
         BCTR  R1,0                                                             
         B     RDIX02                                                           
*                                                                               
RDIX04   LR    RF,R0                                                            
         MH    RF,ISKEYLN4                                                      
         AR    RF,R5                                                            
*                                                                               
RDIX06   AH    RF,ISKEYLN                                                       
         ICM   R0,15,0(RF)                                                      
         JZ    *+2                 DIE=INDEX IS BAD                             
         ST    R0,FULL             FULL NOW HAS A(THIS TI BLOCK)                
         EJECT                                                                  
***********************************************************************         
* READ TRACK INDEX RECORD                                             *         
***********************************************************************         
READTI   ICM   R4,15,ISTIBUFF      USE TIBUFF IF AVAILABLE                      
         BZ    RDTI02                                                           
         CLC   ISTITRKL,FULL       IS IT THE TRK WE HAVE SAVED                  
         BE    RDTI07              YES                                          
*                                                                               
RDTI02   LA    R7,FULL                                                          
         BRAS  RE,ISBLDCCW                                                      
         ICM   R1,15,ISTIBUFF      USE TIBUFF IF AVAILABLE                      
         BZ    RDTI04                                                           
         MVC   ISTITRKL,FULL       SAVE TRACK NUMBER                            
         LH    R0,ISPDLN           GET DATA LENGTH                              
         BRAS  RE,SETIDAWS         SET IDAW LIST TO POINT TO TI BUFFER          
         LA    R0,IDAWS                                                         
         STCM  R0,7,CCW4+1                                                      
*                                                                               
RDTI04   MVI   ISTI,C'Y'                                                        
         BRAS  RE,EXCP                                                          
         MVI   ISTI,C'N'                                                        
         OC    ERRF,ERRF           TEST FOR ERROR READING TRACK INDEX           
         BZ    RDTI06                                                           
         MVI   ISTI,C'Y'                                                        
         BRAS  RE,EXCP             HAVE ANOTHER GO                              
         MVI   ISTI,C'N'                                                        
         OC    ERRF,ERRF                                                        
         BZ    RDTI06                                                           
         DC    H'0'                DIE=INDEX IS BAD                             
*                                                                               
RDTI06   L     R4,IDAWS            PICK UP I/O AREA ADDRESS                     
         AH    R4,ISPDLN                                                        
         SH    R4,ISKEYLN          GET HIGH KEY THIS TI                         
         LH    R5,ISKEYLN1                                                      
         EX    R5,CLCR3R4          MAKE DFS THIS KEY IS IN THIS TI              
         JH    *+2                 DIE=INDEX IS BAD                             
         L     R4,IDAWS            NOW SEARCH TI FOR OUR PD BLOCK               
*                                                                               
RDTI07   LR    R1,R4               POINT TO HIGH KEY IN TI BLOCK                
         AH    R1,ISPDLN                                                        
         SH    R1,ISKEYLN                                                       
         CLI   0(R1),X'FF'         TEST IF LAST TI BLOCK                        
         BNE   RDTI10              NO - WE CAN DO A BINARY SEARCH               
         LH    R5,ISKEYLN1                                                      
*                                                                               
RDTI08   EX    R5,CLCR3R4          CLC 0(0,R3),0(R4)                            
         BNH   READPD                                                           
         AH    R4,ISKEYLN4                                                      
         CR    R4,R1                                                            
         BL    RDTI08                                                           
         DC    H'0'                DIE=INDEX IS BAD                             
*                                                                               
RDTI10   LR    R0,R1               BINARY SEARCH - GET NUM OF ENTRIES           
         AHI   R0,-1                                                            
         SR    R0,R4                                                            
         SRDL  R0,32                                                            
         LH    RF,ISKEYLN4                                                      
         DR    R0,RF                                                            
         XR    R0,R0               R0=LOW                                       
         AHI   R1,-1               R1=HIGH                                      
         LH    R5,ISKEYLN1         R5=L'KEY-1                                   
*                                                                               
RDTI12   CR    R0,R1               WHILE LOW <= HIGH                            
         BH    RDTI14              R0 POINTS TO INSERTION POINT                 
*                                                                               
         LR    RE,R0               RE=MID                                       
         AR    RE,R1                                                            
         SRL   RE,1                MID=(HIGH+LOW)/2                             
         LR    RF,RE                                                            
         MH    RF,ISKEYLN4                                                      
         AR    RF,R4               RF=A(ENTRY TO BE TESTED)                     
*                                                                               
         EX    R5,CLCR3RF          COMPARE KEY TO ENTRY                         
         BE    RDTI16              IF KEY EQL WE HAVE A MATCH                   
         BL    *+12                                                             
         LA    R0,1(RE)            IF KEY HIGH : LOW=MID+1                      
         B     RDTI12                                                           
         LR    R1,RE               IF KEY LOW : HIGH=MID-1                      
         AHI   R1,-1                                                            
         B     RDTI12                                                           
*                                                                               
RDTI14   LR    RF,R0               R0=ENTRY NUMBER                              
         MH    RF,ISKEYLN4                                                      
         AR    RF,R4               RF=ENTRY ADDRESS                             
*                                                                               
RDTI16   LR    R4,RF               R4=A(ENTRY)                                  
         EJECT                                                                  
***********************************************************************         
* READ PRIME DATA RECORD                                              *         
***********************************************************************         
READPD   L     R1,ISTIHIKY         SAVE TI ENTRY                                
         EX    R5,MVCR1R4          MVC  0(0,R1),0(R4)                           
*                                                                               
         LR    RF,R4                                                            
         AH    RF,ISKEYLN                                                       
         ICM   RE,15,0(RF)                                                      
         BCTR  RE,0                                                             
         SRDL  RE,32                                                            
         LH    R0,ISHIPD                                                        
         DR    RE,R0               RF=TRACK, RE=BLOCK                           
         AHI   RE,1                ONES BASE BLOCK NUMBER                       
         AHI   RF,2                PD STARTS ON TRACK 2 FOR PDIXOV              
         SLL   RF,4                                                             
         OR    RF,RE                                                            
         SLL   RF,8                                                             
         STCM  RF,15,ISPDDA                                                     
*                                                                               
         LA    R7,ISPDDA                                                        
         TM    READTYPE,DOLOCKER                                                
         BZ    *+8                                                              
         BRAS  RE,LOCKBLK                                                       
         BRAS  RE,ISBLDCCW                                                      
         BRAS  RE,SETSCTR                                                       
         BRAS  RE,EXCP                                                          
*                                                                               
         L     RF,ISBUFF1                                                       
         CLC   BLKINDEX,2(RF)      CHECK PD BLOCK INDEX STRUCTURE FOUND         
         BNE   *+8                 IF SO SET ISDTF FLAG ON FLY FOR              
         OI    ISFFLAG,ISFBLKIX    BACKWARD COMPATABILITY OF ISDDS              
*                                                                               
         TM    ISFFLAG,ISFBLKIX    TEST BLOCK INDEX ON SPLIT BLOCKS             
         BZ    CHKHI               NO - CHECK HIGH KEY IN BUFFER                
         CLC   BLKINDEX,2(RF)      PD IS BLKIND?                                
         BE    SRCHBI              YES                                          
         B     CHKHI               GO AND CHECK HIGH IN BUFFER                  
         EJECT                                                                  
***********************************************************************         
* READ OVERFLOW RECORD                                                *         
***********************************************************************         
READOV   L     R7,ISBUFF1                                                       
         LA    R7,2(R7)                                                         
         MVC   ISOVDA,0(R7)        SAVE DISK ADDRESS                            
         CLC   ISOVDA,BLKINDEX                                                  
         BNE   *+14                                                             
         LA    R7,4(R7)                                                         
         MVC   ISOVDA,0(R7)        SAVE BLKIND DISK ADDRESS                     
*                                                                               
         BRAS  RE,ISBLDCCW                                                      
         BRAS  RE,SETSCTR                                                       
         BRAS  RE,EXCP                                                          
         B     CHKHI                                                            
         EJECT                                                                  
***********************************************************************         
* SEARCH PD BLOCK INDEX FOR A(FIRST PD) AND ITS HIGH KEY              *         
***********************************************************************         
SRCHBI   MVC   ISPDPTR,=X'FFFFFFFE' SET THIS IS A BLKIND REC                    
         L     RF,ISBUFF1                                                       
         CLC   ISPDLN,0(RF)        IS THIS BLOCK EMPTY?                         
         BE    SRCHB02             YES (CAUSED BY SPLIT THEN BACKOUT)           
*                                                                               
         AH    RF,ISPDLN                                                        
         SH    RF,ISKEYLN4         POINT RF TO HIGHEST KEY IN BLOCK             
         LH    RE,ISKEYLN1                                                      
         EX    RE,*+8              ARE WE ADDING A HIGHER KEY?                  
         BNH   SRCHB04             NO - CARRY ON                                
         CLC   0(0,R3),0(RF)                                                    
*                                                                               
SRCHB02  L     R7,ISBUFF1                                                       
         OC    6(4,R7),6(R7)       IS THERE AN OVERFLOW BLKIND BLOCK?           
         JZ    *+2                 DIE=INV OFLOW INDEX                          
         LA    R7,6(R7)                                                         
         MVC   ISOVDA,0(R7)        SAVE DISK ADDRESS                            
         BRAS  RE,ISBLDCCW                                                      
         BRAS  RE,SETSCTR                                                       
         BRAS  RE,EXCP             AND READ THIS OVERFLOW BLOCK                 
         B     SRCHBI                                                           
*                                                                               
SRCHB04  LR    R1,R3                                                            
         BRAS  RE,BSRCH            FIND NEXT HIGH KEY                           
         L     R7,FULL                                                          
         AH    R7,ISKEYLN                                                       
         MVC   ISOVDA,0(R7)        SAVE DISK ADDRESS                            
*                                                                               
         BRAS  RE,ISBLDCCW                                                      
         BRAS  RE,SETSCTR                                                       
         BRAS  RE,EXCP                                                          
         B     CHKHI                                                            
         EJECT                                                                  
***********************************************************************         
* TEST IF RECORD IS IN PD BUFFER                                      *         
***********************************************************************         
CHKHILO  OC    ISPDDA,ISPDDA       TEST BUFFER CONTENTS VALID                   
         BZR   R9                                                               
*                                                                               
         L     R4,ISBUFF1          GET A(LO KEY THIS PD BUFFER)                 
         CLI   6(R4),X'FF'         TEST NULL BLOCK                              
         BER   R9                                                               
*                                                                               
         CLC   BLKINDEX,2(R4)      PD BLOCK INDEX LINK?                         
         BER   R9                                                               
*                                                                               
CHKLO    NI    BUFFOK,255-X'01'    TEST IF KEY LOWER THAN LOW IN BLOCK          
         AH    R4,0(R4)                                                         
         LA    R4,7(R4)            POINT TO START OF FIRST KEY                  
         LH    R5,ISKEYLN1                                                      
         EX    R5,CLCR3R4          CLC  0(0,R3),0(R4)                           
         BLR   R9                                                               
         OI    BUFFOK,X'01'        SET BUFFER CHECKED FOR LOW KEY               
*                                                                               
CHKHI    NI    BUFFOK,255-X'02'    TEST IF KEY HIGHER THAN MAX IN BLOCK         
         LH    R5,ISKEYLN1                                                      
         L     R4,ISBUFF1X         GET BUFFER END ADDRESS                       
         SR    R4,R5               BACK UP TO START OF HI KEY                   
         EX    R5,CLCR3R4          CLC  0(0,R3),0(R4)                           
         BH    4(R9)                                                            
         OI    BUFFOK,X'02'        SET BUFFER CHECKED FOR HIGH KEY              
         B     CHKBUFF                                                          
                                                                                
***********************************************************************         
* SEE IF KEYARG LESS THAN OR EQUAL TO TRACK INDEX ENTRY               *         
* FOR THIS PRIME DATA BLOCK.                                          *         
***********************************************************************         
CHKHITI  L     R4,ISTIHIKY                                                      
         LH    R5,ISKEYLN1                                                      
         EX    R5,CLCR3R4          CLC  0(0,R3),0(R4)                           
         BR    R9                  RETURN WILL TEST CC                          
         EJECT                                                                  
***********************************************************************         
* SEARCH CORE BUFFER                                                  *         
***********************************************************************         
CHKBUFF  TM    READTYPE,DOLOCKER   CHECK IF NEED TO LOCK                        
         BZ    *+8                                                              
         BRAS  RE,LOCKBLK                                                       
         TM    READTYPE,FLUSHME                                                 
         BNO   CHKBUFF2                                                         
         NI    READTYPE,255-FLUSHME                                             
         OI    READTYPE,FLUSH                                                   
         B     READIX                                                           
*                                                                               
CHKBUFF2 OC    ISPDPTR,ISPDPTR                                                  
         BZ    CHKBUFF3                                                         
         TM    BUFFOK,X'83'        TEST ISREAD/LOWKEY/HIGHKEY                   
         BNO   CHKBUFF3            NO - BEGIN AT START OF BLOCK                 
         NI    BUFFOK,255-X'83'                                                 
*                                                                               
         L     R4,ISBUFF1          START OF BUFFER                              
         AH    R4,0(R4)            SKIP OVER SPARE                              
         LA    R4,6(R4)            POINT TO FIRST CONTROL BYTE                  
         C     R4,ISPDPTR          TEST START OF BLOCK                          
         BE    CHKBUFF3                                                         
*                                                                               
         L     R4,ISPDKEY                                                       
         LH    R5,ISKEYLN1                                                      
         EX    R5,CLCR3R4          TEST PREVIOUS KEY TO THIS                    
         BE    8(R9)               EXIT IF THIS KEY SAME AS LAST KEY            
         BNH   CHKBUFF3            IF KEY LOW BEGIN AT START OF BLOCK           
         L     R1,ISPDPRKY                                                      
         L     R7,ISPDPTR                                                       
         B     CHKBUFF4            SET ISPDPRKY FROM ISPDKEY                    
*                                                                               
CHKBUFF3 XC    ISPDPTR,ISPDPTR     START FROM BEGINNING OF BUFFER               
         L     R4,ISPDPRKY                                                      
         LH    R5,ISKEYLN1                                                      
         EX    R5,XCR4                                                          
*                                                                               
         L     R4,ISPDKEY                                                       
         L     R7,ISBUFF1                                                       
         AH    R7,0(R7)                                                         
         LA    R7,6(R7)            POINT TO FIRST CONTROL BYTE                  
*                                                                               
         CLI   0(R7),X'FF'         CHECK EOB                                    
         BE    4(R9)               NULL BLK - FORCE OVFLO READ                  
*                                                                               
         L     R1,ISPDPRKY                                                      
         B     *+8                                                              
CHKBUFF4 EX    R5,MVCR1R4          SAVE THIS KEY MVC ISPDPRKY,ISPDKEY           
*                                                                               
         SR    RE,RE                                                            
         IC    RE,0(R7)            GET MISSING BYTES                            
         LA    RF,0(RE,R4)         GET TO ADDRESS                               
         SR    RE,R5               GET KEY LEN TO MOVE -1.                      
         LPR   RE,RE                                                            
         EX    RE,MVCRF1R7         MOVE TO WORK                                 
*                                                                               
         TM    ISCMPRSW,VARIABLE   TEST FIXED/VARIABLE LENGTH RECORDS           
         BZ    *+14                                                             
         LA    RE,2(R7,RE)         POINT TO LENGTH                              
         MVC   ISRECLN,0(RE)       ALIGN AND SAVE                               
         EX    R5,CLCR3R4          TEST RIGHT KEY                               
         BE    CHKBUFF8                                                         
         BL    CHKBUFF6            KEYARG LO                                    
         SR    RE,RE                                                            
         IC    RE,0(R7)            KEYARG HI=NEXT RECORD                        
         SH    RE,ISRECLN                                                       
         LPR   RE,RE               GET NUMBER OF BYTES PRESENT -1.              
         LA    R7,1(RE,R7)                                                      
         B     CHKBUFF4                                                         
*                                                                               
CHKBUFF6 LTR   R7,R7               SET CC NOT EQUAL                             
*                                                                               
CHKBUFF8 ST    R7,ISPDPTR          SAVE BUFFER POINTER                          
         B     8(R9)               TAKE NORMAL EXIT                             
         EJECT                                                                  
***********************************************************************         
* MOVE RECORD FROM BUFFER TO CALLER'S I/O AREA                        *         
***********************************************************************         
MOVEREC  L     R7,ISPDKEY          GET KEY ADDRESS                              
         LH    R5,ISKEYLN1                                                      
         L     RF,P2               GET USERS ADDRESS                            
         EX    R5,MVCRFR7          MVC  0(0,RF),0(R7)                           
*                                                                               
         OC    ISFXTAB,ISFXTAB     TEST EXTENDED BUFFERS IN USE                 
         BZ    MOVEREC1                                                         
         L     RE,ISFXTAB          POINT TO FIRST TABLE ENTRY                   
         L     RF,ISPDKEY                                                       
         MVC   ISXTBKEY-ISXTABD(L'ISXTBKEY,RE),0(RF) AND SAVE KEY               
*                                                                               
         L     R7,ISXTBADR-ISXTABD(RE) GET IOAREA ADDRESS                       
         ICM   R0,15,ISPDPTR       POINTER TO LAST KEY READ                     
         BZ    *+6                                                              
         SR    R0,R7               GET DISPLACEMENT TO KEY AND SAVE IT          
         ST    R0,ISXTBPTR-ISXTABD(RE)                                          
*                                                                               
MOVEREC1 L     RF,P2               USERS IOA                                    
         L     R7,ISPDPTR          GET BUFFER POINTER                           
         LLC   RE,0(R7)            GET MISSING BYTES                            
         LH    R5,ISKEYLN                                                       
         AR    RF,R5               GET TO ADDRESS                               
         SR    R5,RE               GET NUMBER OF KEY BYTES PRESENT              
         LA    R7,1(R5,R7)         GET NEXT FROM ADDRESS                        
         TM    ISCMPRSW,VARIABLE   TEST FIXED/VARIABLE LENGTH RECORDS           
         BZ    *+10                                                             
         MVC   ISRECLN,0(R7)       SAVE LENGTH OF THIS REC                      
         LH    R6,ISRECLN                                                       
         SH    R6,ISKEYLN          MUST MOVE DATA LEN =RECLN-KEYLN              
                                                                                
***********************************************************************         
* MOVE RECORD TO RF FROM R7 FOR A LENGTH IN R6                        *         
***********************************************************************         
MOVEIT   CHI   R6,256              LOOP TO MOVE 256 BYTE CHUNKS                 
         BNH   MOVEIT1                                                          
         MVC   0(256,RF),0(R7)                                                  
         AHI   R6,-256                                                          
         LA    R7,256(R7)                                                       
         LA    RF,256(RF)                                                       
         B     MOVEIT                                                           
*                                                                               
MOVEIT1  BCTR  R6,0                LAST EXECUTED MOVE                           
         EX    R6,MVCRFR7                                                       
         TM    ISCMPRSW,VARIABLE   TEST FIXED/VARIABLE LENGTH RECORDS           
         BZR   R9                                                               
         LA    R7,1(R6,R7)         BUMP POINTERS                                
         LA    RF,1(R6,RF)                                                      
         BR    R9                                                               
         EJECT                                                                  
***********************************************************************         
* CLEAR 0(R4) FOR LENGTH IN R6                                        *         
***********************************************************************         
ISADDXC  LR    R0,R4               SET TO ADDRESS                               
         LR    R1,R6               SET TO LENGTH                                
         XR    RF,RF               SET FROM LENGTH                              
         MVCL  R0,RE                                                            
         BR    R9                                                               
         EJECT                                                                  
***********************************************************************         
* ROUTINE TO TRACE OPEN/CLOSE COMMANDS - DUB(1) HAS TRACE TYPE        *         
***********************************************************************         
ISTRACE  ICM   RF,15,=V(DDTRACE)                                                
         BZR   R9                                                               
         LA    RF,MYWORK                                                        
         MVC   MYWORK(2),=AL2(23)                                               
         MVC   MYWORK+2(1),DUB                                                  
         MVC   MYWORK+3(1),ISFSNUM                                              
         MVC   MYWORK+4(1),ISFFLAG                                              
         MVC   MYWORK+5(1),ISFTYPE                                              
         MVC   MYWORK+6(1),ISFOPEN                                              
         MVC   MYWORK+7(8),ISFDD                                                
         MVC   MYWORK+15(4),ISPDLAST                                            
         MVC   MYWORK+19(4),ISOVLAST                                            
         GOTO1 (RF),DUB,X'00000006',MYWORK                                      
         BR    R9                                                               
         EJECT                                                                  
***********************************************************************         
* EXIT POINTS                                                         *         
***********************************************************************         
EXIT     XIT1                                                                   
*                                                                               
XMOD     L     R1,SAVER1           RETURN VALUES TO CALLERS PARAM LIST          
         MVC   8(4,R1),P3                                                       
         L     RD,SAVERD                                                        
         XMOD1 1                                                                
         EJECT                                                                  
***********************************************************************         
* LITERAL POOL                                                        *         
***********************************************************************         
         LTORG                                                                  
         EJECT                                                                  
***********************************************************************         
* EQUATES                                                             *         
***********************************************************************         
VARIABLE EQU   X'80'               ISCMPRSW FLAG FOR V/L RECORDS                
MAXXTNTS EQU   16                  MAX NUM OF EXTENTS                           
                                                                                
***********************************************************************         
* CONSTANTS                                                           *         
***********************************************************************         
VSSB     DC    V(SSB)                                                           
VTICTOC  DC    V(TICTOC)                                                        
VADWAIT  DC    V(ADWAIT)                                                        
ALOCKER  DC    V(LOCKER)                                                        
ALOCKSPC DC    V(LOCKSPC)                                                       
ASSB     DC    V(SSB)                                                           
VHEXOUT  DC    V(HEXOUT)                                                        
                                                                                
***********************************************************************         
* IBM RECOMENDED CODE                                                 *         
***********************************************************************         
         USING SVBLKD,R3                                                        
CLCSVHR1 CLC   SVHIKEY(0),0(R1)                                                 
         DROP  R3                                                               
CLCR3R4  CLC   0(0,R3),0(R4)                                                    
CLCR5R4  CLC   0(0,R5),0(R4)                                                    
CLCR3RF  CLC   0(0,R3),0(RF)                                                    
MVCRFR7  MVC   0(0,RF),0(R7)                                                    
MVCRF1R7 MVC   0(0,RF),1(R7)                                                    
MVCR1R4  MVC   0(0,R1),0(R4)                                                    
MVCRFR3  MVC   0(0,RF),0(R3)                                                    
MVCR3RF  MVC   0(0,R3),0(RF)                                                    
MVCR4R1  MVC   0(0,R4),0(R1)                                                    
XCR4     XC    0(0,R4),0(R4)                                                    
XCR3R7   XC    0(0,R3),0(R7)                                                    
XCR7R3   XC    0(0,R7),0(R3)                                                    
OCRF     OC    0(0,RF),0(RF)                                                    
XCRF     XC    0(0,RF),0(RF)                                                    
MVCRFXR1 MVC   0(0,RF),ISXTBKEY-ISXTABD(R1)                                     
         EJECT                                                                  
***********************************************************************         
* INDEX SEQUENTIAL ROUTINES TABLE                                     *         
***********************************************************************         
ISROUTS  DC    A(0)                00                                           
         DC    A(ISREAD)           01                                           
         DC    A(ISRDSEQ)          02                                           
         DC    A(ISADD)            03                                           
         DC    A(ISERASE)          04                                           
         DC    A(ISWRITE)          05                                           
         DC    A(ISCPUID)          06                                           
         DC    A(ISFNDEOF)         07                                           
         DC    A(ISOPEN)           08                                           
         DC    A(ISCLOSE)          09                                           
         DC    A(ISOPOLD)          0A                                           
         DC    A(ISRDFLS)          0B                                           
         DC    A(ISRSFLS)          0C                                           
         DC    A(ISCLEAR)          0D                                           
         DC    19A(0)              0E-1F                                        
*                                                                               
ONLINE   DC    C' '                SET TO C'Y' IF ONLINE                        
         DC    X'00'               N/D                                          
MAXIOL   DC    AL2(56664)          MAX 3390 RECORD LENGTH                       
BLKINDEX DC    XL4'FFFFFFFF'       PD BLOCK INDEX INDICATOR IN LINK             
         EJECT                                                                  
***********************************************************************         
* DEVICE PHYSICAL CHARACTERISTICS                                     *         
***********************************************************************         
* X DEVICE TYPE - 1=CKD,2=RBA                                                   
* X DEVICE SUB TYPE - 1=3340,2=3350,3=3375,4=3380,5=3390                        
* H DEVICE TRACKS PER CYLINDER                                                  
* H DEVICE INTER RECORD GAP                                                     
* H DEVICE TRACK CAPACITY LOGICAL                                               
* H DEVICE TRACK CAPACITY PHYSICAL                                              
* H DEVICE RECORD ZERO OVERHEAD                                                 
* H DEVICE SECTORS PER TRACK                                                    
* H DEVICE MODULUS FACTOR                                                       
*                                                                               
DEVCODE  DS    0H                  XL1=MVS,XL1=INTERNAL                         
         DC    X'0A01'             3340                                         
         DC    X'0B02'             3350                                         
         DC    X'0C03'             3375                                         
         DC    X'0E04'             3380                                         
         DC    X'0F05'             3390                                         
         DC    X'0000'                                                          
*                                                                               
DEVDISK  DS    0XL16                                                            
DEV3340  DC    X'0101',AL2(12,167,08535,08960,0293,064,000)                     
DEV3350  DC    X'0102',AL2(30,185,19254,19964,0389,128,000)                     
DEV3375  DC    X'0103',AL2(12,384,36000,36992,0992,196,031)                     
DEV3380  DC    X'0104',AL2(15,480,47968,49056,1088,221,043)                     
DEV3390  DC    X'0105',AL2(15,000,58786,58786,0000,224,000)                     
DEV3370  DC    X'0201',AL2(32,000,16384,16384,0000,000,000)                     
         EJECT                                                                  
***********************************************************************         
* WORKING STORAGE DSECTS                                              *         
***********************************************************************         
       ++INCLUDE DMISDDSWRK                                                     
         EJECT                                                                  
***********************************************************************         
* OTHER INCLUDED DSECTS                                               *         
***********************************************************************         
*FASSB                                                                          
         PRINT OFF                                                              
       ++INCLUDE FASSB                                                          
         PRINT ON                                                               
*FASSBOFF                                                                       
SSBOFFD  DSECT                                                                  
         PRINT OFF                                                              
       ++INCLUDE FASSBOFF                                                       
         PRINT ON                                                               
*FATCB                                                                          
         PRINT OFF                                                              
       ++INCLUDE FATCB                                                          
         PRINT ON                                                               
*DMDYNDDD                                                                       
         PRINT OFF                                                              
       ++INCLUDE DMDYNDDD                                                       
         PRINT ON                                                               
*DMSPACED                                                                       
         PRINT OFF                                                              
       ++INCLUDE DMSPACED                                                       
         PRINT ON                                                               
*DMDSYSHDR                                                                      
         PRINT OFF                                                              
       ++INCLUDE DMDSYSHDR                                                      
         PRINT ON                                                               
*DMDSHDR                                                                        
         PRINT OFF                                                              
       ++INCLUDE DMDSHDR                                                        
         PRINT ON                                                               
**PAN#1  CSECT                                                                  
**PAN#1  DC    CL21'011DMISDDS20 04/25/19'                                      
         END                                                                    
