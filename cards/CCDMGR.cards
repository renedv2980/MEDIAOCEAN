/*                                                                              
*CATALP CCDMGR                                                                  
                                                                                
  This is the C library for datamgr calls. It allows a C program to             
  call datamgr simply by using the command name. It fills the dmcb              
  with the appropriate information including the command name and issues        
  the call to datamgr through calldatamgr(). The application must               
  initially call dmopen() which opens the file to be worked on and              
  passes back a pointer to a structure containing the key, keysave,             
  and ioareas, as well as a dmcb. This pointer must be passed to all            
  of these routines in order for the work to be done.                           
*/                                                                              
                                                                                
#include <standard.h>                                                           
#include <stdio.h>                                                              
#include <dds.h>                                                                
                                                                                
readhi(bptr)                                                                    
struct dmblock *bptr;                                                           
{                                                                               
    struct dmcb *dptr;                                                          
    dptr = &bptr->dmdmcb;                                                       
    memcpy(bptr->keysave,bptr->key,bptr->keylen);                               
    dptr->p1.address = "DMRDHI";                                                
    dptr->p2.address = bptr->dir;                                               
    dptr->p3.address = bptr->key;                                               
    dptr->p4.address = bptr->key;                                               
    calldatamgr(bptr);                                                          
}                                                                               
                                                                                
readseq(bptr)                                                                   
struct dmblock *bptr;                                                           
{                                                                               
    struct dmcb *dptr;                                                          
    dptr = &bptr->dmdmcb;                                                       
    dptr->p1.address = "DMRSEQ";                                                
    dptr->p2.address = bptr->dir;                                               
    dptr->p4.address = bptr->key;                                               
    calldatamgr(bptr);                                                          
}                                                                               
                                                                                
dmread(bptr)                                                                    
struct dmblock *bptr;                                                           
{                                                                               
    struct dmcb *dptr;                                                          
    dptr = &bptr->dmdmcb;                                                       
    memcpy(bptr->keysave,bptr->key,bptr->keylen);                               
    dptr->p1.address = "DMREAD";                                                
    dptr->p2.address = bptr->dir;                                               
    dptr->p3.address = bptr->key;                                               
    dptr->p4.address = bptr->key;                                               
    calldatamgr(bptr);                                                          
}                                                                               
                                                                                
dmwrite(bptr)                                                                   
struct dmblock *bptr;                                                           
{                                                                               
    struct dmcb *dptr;                                                          
    dptr = &bptr->dmdmcb;                                                       
    dptr->p1.address = "DMWRT ";                                                
    dptr->p2.address = bptr->dir;                                               
    dptr->p3.address = bptr->key;                                               
    dptr->p4.address = bptr->key;                                               
    calldatamgr(bptr);                                                          
}                                                                               
                                                                                
getrec(bptr)                                                                    
struct dmblock *bptr;                                                           
{                                                                               
    struct dmcb *dptr;                                                          
    dptr = &bptr->dmdmcb;                                                       
    dptr->p1.address = "GETREC";                                                
    dptr->p2.address = bptr->fil;                                               
    dptr->p3.address = bptr->key + bptr->diskadisp;                             
    dptr->p4.address = bptr->ioarea;                                            
    dptr->p5.address = bptr->workarea;                                          
    calldatamgr(bptr);                                                          
}                                                                               
                                                                                
putrec(bptr)                                                                    
struct dmblock *bptr;                                                           
{                                                                               
    struct dmcb *dptr;                                                          
    dptr = &bptr->dmdmcb;                                                       
    dptr->p1.address = "PUTREC";                                                
    dptr->p2.address = bptr->fil;                                               
    dptr->p3.address = bptr->key + bptr->diskadisp;                             
    dptr->p4.address = bptr->ioarea;                                            
    dptr->p5.address = bptr->workarea;                                          
    calldatamgr(bptr);                                                          
}                                                                               
                                                                                
addrec(bptr)                                                                    
struct dmblock *bptr;                                                           
/*                                                                              
  This routine first checks to see if record already exists. If it does,        
  it does a PUTREC, otherwise it does an ADDREC.                                
*/                                                                              
{                                                                               
    struct dmcb *dptr;                                                          
    char key(:42:),keysave(:42:),*ioarea2,bakflag;                              
    int reclen;                                                                 
                                                                                
    /* these are backed up since they will change in this routine */            
    memcpy(key,bptr->key,bptr->keylen);                                         
    memcpy(keysave,bptr->keysave,bptr->keylen);                                 
                                                                                
    /* this looks for the same key in the directory */                          
    memcpy(bptr->key,bptr->ioarea,bptr->keylen);                                
    bakflag = bptr->getflag;                                                    
    bptr->getflag ยบ= 0x08;                                                      
    readhi(bptr);                                                               
    bptr->getflag = bakflag;                                                    
                                                                                
    /* if it finds the same key it does a PUTREC instead of an ADDREC */        
    if(memcmp(bptr->key,bptr->keysave,bptr->keylen) == 0){                      
        reclen = 256*bptr->ioarea(:bptr->keylen:) +                             
                 bptr->ioarea(:bptr->keylen+1:);                                
        /* back up new ioarea */                                                
        ioarea2 = malloc(bptr->maxreclen);                                      
        memcpy(ioarea2,bptr->ioarea,reclen);                                    
        getrec(bptr);                                                           
        /* if record marked for deletion then undelete */                       
        if(bptr->key(:bptr->keylen:) & 0x80){                                   
            bptr->key(:bptr->keylen:) &= 0x7f;                                  
            bptr->ioarea(:bptr->keylen+2:) &= 0x7f;                             
            dmwrite(bptr);                                                      
        }                                                                       
        /* move back new elements */                                            
        memcpy(bptr->ioarea + bptr->firsteldisp,                                
               ioarea2 + bptr->firsteldisp,                                     
               reclen - bptr->firsteldisp);                                     
        /* move back new record length */                                       
        memcpy(bptr->ioarea+bptr->keylen,ioarea2+bptr->keylen,2);               
        putrec(bptr);                                                           
        free(ioarea2);                                                          
    }                                                                           
                                                                                
    else{     /* it does an ADDREC */                                           
        dptr = &bptr->dmdmcb;                                                   
        dptr->p1.address = "ADDREC";                                            
        dptr->p2.address = bptr->fil;                                           
        dptr->p4.address = bptr->ioarea;                                        
        dptr->p5.address = bptr->workarea;                                      
        calldatamgr(bptr);                                                      
    }                                                                           
                                                                                
    /* restores key and keysave */                                              
    memcpy(bptr->key,key,bptr->keylen);                                         
    memcpy(bptr->keysave,keysave,bptr->keylen);                                 
                                                                                
}                                                                               
                                                                                
delrec(bptr)                                                                    
struct dmblock *bptr;                                                           
{                                                                               
    struct dmcb *dptr;                                                          
    getrec(bptr);                                                               
    bptr->ioarea(:bptr->keylen+2:) ยบ= 0x80;                                     
    bptr->key(:bptr->keylen:) ยบ= 0x80;                                          
    putrec(bptr);                                                               
    dmwrite(bptr);                                                              
}                                                                               
                                                                                
undelrec(bptr)                                                                  
struct dmblock *bptr;                                                           
{                                                                               
    struct dmcb *dptr;                                                          
    getrec(bptr);                                                               
    bptr->ioarea(:bptr->keylen+2:) &= 0x7f;                                     
    bptr->key(:bptr->keylen:) &= 0x7f;                                          
    putrec(bptr);                                                               
    dmwrite(bptr);                                                              
}                                                                               
