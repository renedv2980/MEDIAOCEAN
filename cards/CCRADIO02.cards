/**                                                                     00000001
MODULE     : BUILD_STN_LIST                                             00000002
FUNCTION   : BUILD STATION LIST FOR MARKET REACH CALCULATION            00000003
PARAMETERS : NUMBER OF STATION REACHES (IN)                             00000004
             STATION REACHES (IN)                                       00000005
             STATION NUMBERS IN ORDER (OUT)                             00000006
RETURNS    : # OF STATIONS IN LIST, -1 IF ANY ERRORS                    00000007
**/                                                                     00000008
                                                                        00000009
/**                                                                     00000010
        BUILD A LIST OF ALL STATIONS WITH REACH                         00000011
        SORT STATION REACHES INTO DESCENDING ORDER                      00000012
**/                                                                     00000013
                                                                        00000014
#INCLUDE "US_CONST.H"                                                   00000015
                                                                        00000016
INT BUILD_STN_LIST(NUM_REACHES,REACHES,STN_NUMBERS)                     00000017
  INT   NUM_REACHES;                                                    00000018
  FLOAT REACHESMAX_STNS|;                                              00000019
  INT   STN_NUMBERSMAX_STNS|;                                          00000020
  {                                                                     00000021
    INT   STN;                                                          00000022
    FLOAT STNRCHMAX_STNS|;                                             00000023
    INT   NSTNS = 0;                                                    00000024
                                                                        00000025
    INT   SORT_REACH();                                                 00000026
                                                                        00000027
/*  BUILD A LIST OF ALL STATIONS REACHED AND CORRESPONDING STATION NUMBE00000028
R  */                                                                   00000029
                                                                        00000030
    FOR ( STN = 0 ; STN < NUM_REACHES ; ++STN )                         00000031
      IF (REACHESSTN| > 0)                                             00000032
        {                                                               00000033
          STNRCHNSTNS| = REACHESSTN|;                                 00000034
          STN_NUMBERSNSTNS| = STN;                                     00000035
          ++NSTNS;                                                      00000036
        }                                                               00000037
                                                                        00000038
/*  NOW, SORT THIS LIST BY DESCENDING REACH  */                         00000039
                                                                        00000040
    IF (SORT_REACH(NSTNS,STNRCH,STN_NUMBERS) == ERROR)                  00000041
      RETURN(-1);                                                       00000042
                                                                        00000043
    RETURN(NSTNS);                                                      00000044
  }                                                                     00000045
/**                                                                     00000046
MODULE      : BUILD_TB_LIST                                             00000047
FUNCTION    : BUILD TIMEBLOCK LIST FOR STATION REACH CALCULATION        00000048
PARAMETERS  : TIMEBLOCK REACHES (IN)                                    00000049
              TIMEBLOCK INDICIES IN ORDER (OUT)                         00000050
RETURNS     : # OF TIMEBLOCKS IN LIST, -1 IF ANY ERRORS                 00000051
**/                                                                     00000052
                                                                        00000053
/**                                                                     00000054
        FOR BR THRU SU                                                  00000055
          IF TIMEBLOCK REACH > 0                                        00000056
            ADD TIMEBLOCK REACH TO LIST                                 00000057
            ADD TIMEBLOCK INDEX TO LIST                                 00000058
                                                                        00000059
        SORT LIST IN DESCENDING ORDER                                   00000060
                                                                        00000061
        IF RO HAS REACH                                                 00000062
          ADD RO TO END OF LIST                                         00000063
                                                                        00000064
        IF MS HAS REACH                                                 00000065
          ADD MS TO END OF LIST                                         00000066
**/                                                                     00000067
                                                                        00000068
#INCLUDE "US_CONST.H"                                                   00000069
                                                                        00000070
INT BUILD_TB_LIST(REACHES,INDICIES)                                     00000071
  FLOAT REACHESMAX_TBS|;                                               00000072
  INT   INDICIESMAX_TBS|;                                              00000073
  {                                                                     00000074
    INT   TB;                                                           00000075
    FLOAT TBRCHMAX_TBS|;                                               00000076
    INT   NTBS = 0;                                                     00000077
                                                                        00000078
    INT SORT_REACH();                                                   00000079
                                                                        00000080
/*  BUILD UP A LIST OF ALL NON-ZERO TIMEBLOCK REACHES  */               00000081
                                                                        00000082
    FOR ( TB = 0 ; TB < RO_INDEX ; ++TB )                               00000083
      IF (REACHESTB| > 0.0)                                            00000084
        {                                                               00000085
          TBRCHNTBS| = REACHESTB|;                                    00000086
          INDICIESNTBS| = TB;                                          00000087
          ++NTBS;                                                       00000088
        }                                                               00000089
                                                                        00000090
/*  SORT THESE REACHES INTO ASCENDING ORDER  */                         00000091
                                                                        00000092
    IF (NTBS > 0)                                                       00000093
      IF (SORT_REACH(NTBS,TBRCH,INDICIES) == ERROR)                     00000094
        RETURN(-1);                                                     00000095
                                                                        00000096
/*  ADD RO IF NECESSARY  */                                             00000097
                                                                        00000098
    IF (REACHESRO_INDEX| > 0.0)                                        00000099
      INDICIESNTBS++| = RO_INDEX;                                      00000100
                                                                        00000101
/*  ADD MS IF NECESSARY  */                                             00000102
                                                                        00000103
    IF (REACHESMS_INDEX| > 0.0)                                        00000104
      INDICIESNTBS++| = MS_INDEX;                                      00000105
                                                                        00000106
    RETURN(NTBS);                                                       00000107
  }                                                                     00000108
/********************************************************\              00000109
**  MODULE      : CALC_CUMES                            **              00000110
**  FUNCTION    : CALCULATES ALL UNKNOWN STATION CUMES  **              00000111
**  PARAMETERS  : STATION CUME AREA (I/O)               **              00000112
**              : STATION CUME      (IN)                **              00000113
**  RETURNS     : OK                                    **              00000114
\********************************************************/              00000115
                                                                        00000116
/*****************************************************************\     00000117
**  AT THIS POINT, WE ARE GOING TO CALCULATE ALL UNKNOWN CUMES.  **     00000118
**  FIRST, WE WILL CALCULATE ALL MISSING 2-TB CUMES, THEN 3-TB   **     00000119
**  CUMES, ETC., UNTIL WE FINISH WITH THE 6-TB CUME.             **     00000120
\*****************************************************************/     00000121
                                                                        00000122
STATIC INT TB_ORDER| = {  3,  5,  6,  9, 10, 12,                       00000123
                          17, 18, 20, 24, 33, 34, 36, 40, 48,           00000124
                           7, 11, 13, 14, 19, 21, 22, 25, 26, 28,       00000125
                          35, 37, 38, 41, 42, 44, 49, 50, 52, 56,       00000126
                          15, 23, 27, 29, 30, 39, 43, 45, 46,           00000127
                          51, 53, 54, 57, 58, 60,                       00000128
                          31, 47, 55, 59, 61, 62, 63, -1 } ;            00000129
                                                                        00000130
#INCLUDE "US_CONST.H"                                                   00000131
                                                                        00000132
INT CALC_CUMES(CUMES,STNCUME)                                           00000133
  FLOAT CUMES|;                                                        00000134
  FLOAT STNCUME;                                                        00000135
  {                                                                     00000136
    INT TB;                                                             00000137
    INT CUR_TB;                                                         00000138
    INT CALC_A_CUME();                                                  00000139
                                                                        00000140
    FOR ( TB = 0 ; ((CUR_TB = TB_ORDERTB|) > 0) ; ++TB )               00000141
      IF (CUMESCUR_TB-1| < 0.0)                                        00000142
        IF (CALC_A_CUME(CUMES,STNCUME,CUR_TB) == ERROR)                 00000143
          RETURN(ERROR);                                                00000144
                                                                        00000145
    RETURN(OK);                                                         00000146
  }                                                                     00000147
                                                                        00000148
/******************************************************\                00000149
**  MODULE      : CALC_A_CUME                         **                00000150
**  FUNCTION    : CALCULATES AN UNKNOWN STATION CUME  **                00000151
**  PARAMETERS  : STATION CUME AREA    (I/O)          **                00000152
**                STATION CUME         (IN)           **                00000153
**                TIMEBLOCK NUMBER     (IN)           **                00000154
**  RETURNS     : OK                                  **                00000155
\******************************************************/                00000156
                                                                        00000157
/********************************************************\              00000158
**  FIRST, CALCULATE LOWER BOUND AND UPPER BOUND        **              00000159
**  FROM ALL (N-1) TIMEBLOCKS INCLUDING TB.             **              00000160
**                                                      **              00000161
**  THEN, CALCULATE LOWER BOUND AND UPPER BOUND         **              00000162
**  FROM ALL (N+1), (N+2), ... TIMEBLOCKS INCLUDING TB. **              00000163
**                                                      **              00000164
**  CUME = AVERAGE OF UPPER AND LOWER BOUNDS            **              00000165
\********************************************************/              00000166
                                                                        00000167
INT CALC_A_CUME(CUMES,STNCUME,TB)                                       00000168
  FLOAT CUMES|;                                                        00000169
  FLOAT STNCUME;                                                        00000170
  INT   TB;                                                             00000171
  {                                                                     00000172
    FLOAT LOWER;        /*  CURRENT LOWER BOUND FOR CUME  */            00000173
    FLOAT UPPER;        /*  CURRENT UPPER BOUND FOR CUME  */            00000174
                                                                        00000175
    INT   NTBS;             /*  # OF COMPONENT TIMEBLOCKS  */           00000176
    CHAR  TBSMAX_TBS|;     /*  1 = COMPONENT IN TB        */           00000177
                                                                        00000178
    INT BREAK_TB();                                                     00000179
    INT SMALL_TBS();                                                    00000180
    INT LARGE_TBS();                                                    00000181
                                                                        00000182
    LOWER = 0.0;                                                        00000183
    UPPER = STNCUME;                                                    00000184
                                                                        00000185
/*  FIRST, BREAK TIMEBLOCK INTO INDIVIDUAL COMPONENTS  */               00000186
                                                                        00000187
    NTBS = BREAK_TB(TB,TBS);                                            00000188
                                                                        00000189
/*  NOW, ADJUST LOWER AND UPPER BASED ON THE (N-1)-TB CUMES  */         00000190
                                                                        00000191
    IF (SMALL_TBS(CUMES,TB,NTBS,TBS,&LOWER,&UPPER) == ERROR)            00000192
      RETURN(ERROR);                                                    00000193
                                                                        00000194
/*  NOW, ADJUST LOWER AND UPPER BASED ON THEN (N+I)-TB CUMES  */        00000195
                                                                        00000196
    IF (LARGE_TBS(CUMES,TB,&LOWER,&UPPER) == ERROR)                     00000197
      RETURN(ERROR);                                                    00000198
                                                                        00000199
/*  FINALLY, CALCULATE THE CUME FROM THE AVERAGE AND STORE IT  */       00000200
                                                                        00000201
    CUMESTB-1| = (LOWER + UPPER) / 2.0;                                00000202
                                                                        00000203
    RETURN(OK);                                                         00000204
  }                                                                     00000205
                                                                        00000206
                                                                        00000207
/******************************************************\                00000208
**  MODULE      : BREAK_TB                            **                00000209
**  FUNCTION    : BREAK A TIMEBLOCK INTO COMPONENTS   **                00000210
**  PARAMETERS  : TIMEBLOCK NUMBER (IN)               **                00000211
**                COMPONENT FLAGS  (OUT)              **                00000212
**  RETURNS     : # OF COMPONENTS                     **                00000213
\******************************************************/                00000214
                                                                        00000215
INT BREAK_TB(TB,TBS)                                                    00000216
  INT  TB;                                                              00000217
  CHAR TBS|;                                                           00000218
  {                                                                     00000219
    INT I;                                                              00000220
    INT NTBS;                                                           00000221
                                                                        00000222
/*  SET ALL FLAGS TO ZERO  */                                           00000223
                                                                        00000224
    FOR ( I = 0 ; I < MAX_TBS ; ++I )                                   00000225
      TBSI| = 0;                                                       00000226
                                                                        00000227
    NTBS = 0;                                                           00000228
                                                                        00000229
/*  LOOP UNTIL ALL BITS HAVE BEEN SHIFTED OUT TO THE RIGHT  */          00000230
                                                                        00000231
    I = 0;                                                              00000232
    WHILE (TB != 0)                                                     00000233
      {                                                                 00000234
        IF (TBSI| = (TB % 2))                                          00000235
          ++NTBS;                                                       00000236
                                                                        00000237
        TB /= 2;                                                        00000238
        ++I;                                                            00000239
      }                                                                 00000240
                                                                        00000241
    RETURN(NTBS);                                                       00000242
  }                                                                     00000243
                                                                        00000244
                                                                        00000245
/******************************************************\                00000246
**  MODULE      : SMALL_TBS                           **                00000247
**  FUNCTION    : ADJUST UPPER AND LOWER BOUND BASED  **                00000248
**                ON (N-1)-TB CUMES.                  **                00000249
**  PARAMETERS  : STATION CUMES    (IN)               **                00000250
**                TIMEBLOCK NUMBER (IN)               **                00000251
**                # OF COMPONENTS  (IN)               **                00000252
**                COMPONENT FLAGS  (IN)               **                00000253
**                LOWER BOUND      (I/O)              **                00000254
**                UPPER BOUND      (I/O)              **                00000255
**  RETURNS     : OK                                  **                00000256
\******************************************************/                00000257
                                                                        00000258
INT SMALL_TBS(CUMES,TB,NTBS,TBS,LOWER,UPPER)                            00000259
  FLOAT CUMES|;                                                        00000260
  INT   TB;                                                             00000261
  INT   NTBS;                                                           00000262
  CHAR  TBS|;                                                          00000263
  FLOAT *LOWER;                                                         00000264
  FLOAT *UPPER;                                                         00000265
  {                                                                     00000266
    INT   I;                                                            00000267
    INT   SINGLE_TB;                                                    00000268
    INT   OTHER_TB;                                                     00000269
    FLOAT SINGLE_CUME;                                                  00000270
    FLOAT OTHER_CUME;                                                   00000271
                                                                        00000272
    INT TB_NUMBER();                                                    00000273
                                                                        00000274
/*  DETERMINE ALL (N-1)-TBS BY REMOVING EACH COMPONENT TIMEBLOCK  */    00000275
                                                                        00000276
    FOR ( I = 0 ; I < MAX_TBS ; ++I )                                   00000277
      IF (TBSI|)                                                       00000278
        {                                                               00000279
          SINGLE_TB = TB_NUMBER(I);                                     00000280
          OTHER_TB  = TB - SINGLE_TB;                                   00000281
          SINGLE_CUME = CUMESSINGLE_TB-1|;                             00000282
          OTHER_CUME  = CUMESOTHER_TB-1|;                              00000283
                                                                        00000284
/*  NOW, IF COMPONENT CUME IS LARGER THAN LOWER BOUND, USE IT  */       00000285
                                                                        00000286
          IF (OTHER_CUME > *LOWER)                                      00000287
            *LOWER = OTHER_CUME;                                        00000288
                                                                        00000289
/*  IF COMPONENT CUME + SINGLE CUME IS SMALLER THAN UPPER BOUND, USE IT 00000290
 */                                                                     00000291
                                                                        00000292
          IF ((OTHER_CUME + SINGLE_CUME) < *UPPER)                      00000293
            *UPPER = (OTHER_CUME + SINGLE_CUME);                        00000294
        }                                                               00000295
                                                                        00000296
    RETURN(OK);                                                         00000297
  }                                                                     00000298
                                                                        00000299
                                                                        00000300
/******************************************************\                00000301
**  MODULE      : LARGE_TBS                           **                00000302
**  FUNCTION    : ADJUST UPPER AND LOWER BOUND BASED  **                00000303
**                ON (N+I)-TB CUMES.                  **                00000304
**  PARAMETERS  : STATION CUMES    (IN)               **                00000305
**                TIMEBLOCK NUMBER (IN)               **                00000306
**                LOWER BOUND      (I/O)              **                00000307
**                UPPER BOUND      (I/O)              **                00000308
**  RETURNS     : OK                                  **                00000309
\******************************************************/                00000310
                                                                        00000311
INT LARGE_TBS(CUMES,TB,LOWER,UPPER)                                     00000312
  FLOAT CUMES|;                                                        00000313
  INT   TB;                                                             00000314
  FLOAT *LOWER;                                                         00000315
  FLOAT *UPPER;                                                         00000316
  {                                                                     00000317
    INT I;                                                              00000318
                                                                        00000319
    INT NUM_OTHER;               /*  LIST OF TIMEBLOCKS  */             00000320
    INT OTHER_TBSMAX_CUMES|;                                           00000321
                                                                        00000322
    INT   NEXT_TB;                                                      00000323
    FLOAT NEXT_CUME;                                                    00000324
    INT   OTHER_TB;                                                     00000325
    FLOAT OTHER_CUME;                                                   00000326
                                                                        00000327
    INT LARGE_TB_LIST();                                                00000328
                                                                        00000329
/***********************************************\                       00000330
**  FIRST, CONSTRUCT A LIST OF ALL TIMEBLOCKS  **                       00000331
**  WITH TARGET TB AS A COMPONENT.             **                       00000332
\***********************************************/                       00000333
                                                                        00000334
    NUM_OTHER = LARGE_TB_LIST(TB,OTHER_TBS);                            00000335
                                                                        00000336
/******************************************************\                00000337
**  NOW, LOOP THRU THIS LIST ADJUSTING THE            **                00000338
**  UPPER AND LOWER BOUNDS AS APPROPRIATE.            **                00000339
**  WE BREAK (TB+I) INTO (TB) AND (I).                **                00000340
**  CUME(TB+I) IS A POTENTIAL UPPER BOUND.            **                00000341
**  CUME(TB+I) - CUME(I) IS A POTENTIAL LOWER BOUND.  **                00000342
\******************************************************/                00000343
                                                                        00000344
    FOR ( I = 0 ; I < NUM_OTHER ; ++I )                                 00000345
      {                                                                 00000346
        NEXT_TB = OTHER_TBSI|;                                         00000347
        IF (CUMESNEXT_TB-1| >= 0.0)                                    00000348
          {                                                             00000349
            OTHER_TB  = NEXT_TB - TB;                                   00000350
            NEXT_CUME = CUMESNEXT_TB-1|;                               00000351
            OTHER_CUME = CUMESOTHER_TB-1|;                             00000352
                                                                        00000353
/*  NOW, IF LARGER CUME IS SMALLER THAN UPPER BOUND, USE IT  */         00000354
                                                                        00000355
            IF ((NEXT_CUME >= 0.0) && (NEXT_CUME < *UPPER))             00000356
              *UPPER = NEXT_CUME;                                       00000357
                                                                        00000358
/*  IF LARGER CUME - COMPONENT CUME IS LARGER THAN LOWER BOUND, USE IT  00000359
*/                                                                      00000360
                                                                        00000361
            IF ((NEXT_CUME >= 0.0)  &&                                  00000362
                (OTHER_CUME >= 0.0) &&                                  00000363
                ((NEXT_CUME - OTHER_CUME) > *LOWER))                    00000364
              *LOWER = (NEXT_CUME - OTHER_CUME);                        00000365
          }                                                             00000366
      }                                                                 00000367
                                                                        00000368
    RETURN(OK);                                                         00000369
  }                                                                     00000370
                                                                        00000371
                                                                        00000372
/***********************************************************************00000373
****/                                                                   00000374
INT LARGE_TB_LIST(TB, TB_LIST)                                          00000375
                                                                        00000376
   /*                                                                   00000377
   *  THIS FUNCTION BUILDS A LIST OF ALL TIMEBLOCKS WITH TB AS A COMPONE00000378
NT.                                                                     00000379
   *                                                                    00000380
   *  RETURNS:  # OF TIMEBLOCKS IN LIST                                 00000381
   */                                                                   00000382
                                                                        00000383
   INT TB;          /* TIMEBLOCK NUMBER   (IN) */                       00000384
   INT TB_LIST|;   /* LIST OF TIMEBLOCKS (OUT) */                      00000385
   {                                                                    00000386
                                                                        00000387
   INT NUM_LIST;                                                        00000388
   INT NEXT_TB;                                                         00000389
                                                                        00000390
   NUM_LIST = 0;                                                        00000391
                                                                        00000392
   /*                                                                   00000393
   *  IDEA : NEED TO FIND ALL TIMEBLOCKS WITH TB AS A COMPONENT.        00000394
   *  SO, WE LOOK AT ALL TIMEBLOCKS FROM TB+1 TO THE LAST ONE.          00000395
   *  AT EACH POINT, WE AND (TB+I) WITH (TB).                           00000396
   *  IF THE RESULT IS (TB), THEN TB IS A COMPONENT OF (TB+I).          00000397
   */                                                                   00000398
                                                                        00000399
   FOR ( NEXT_TB = TB + 1 ; NEXT_TB <= MAX_COMB_TB ; ++NEXT_TB )        00000400
      IF ((NEXT_TB & TB) == TB)                                         00000401
         TB_LISTNUM_LIST++| = NEXT_TB;                                 00000402
                                                                        00000403
    RETURN(NUM_LIST);                                                   00000404
                                                                        00000405
   } /* END LARGE_TB_LIST() */                                          00000406
                                                                        00000407
/***********************************************************************00000408
****/                                                                   00000409
/**                                                                     00000410
MODULE      : CALC_RESULTS                                              00000411
FUNCTION    : CALCULATE OUTPUT RESULTS                                  00000412
PARAMETERS  : OUTPUT AREA (I/O)                                         00000413
RETURNS     : OK                                                        00000414
**/                                                                     00000415
                                                                        00000416
/**                                                                     00000417
        CALCULATE FREQUENCY                                             00000418
        CALCULATE CPM                                                   00000419
        CALCULATE CPP                                                   00000420
**/                                                                     00000421
                                                                        00000422
#INCLUDE "US_CONST.H"                                                   00000423
#INCLUDE "US_OUTPUT.H"                                                  00000424
                                                                        00000425
INT CALC_RESULTS(OUT_AREA)                                              00000426
  OUTPUT_AREA *OUT_AREA;                                                00000427
  {                                                                     00000428
    IF (OUT_AREA->REACH == 0.0)                                         00000429
      OUT_AREA->FREQ = 0.0;                                             00000430
    ELSE IF (OUT_AREA->OCCS == 1.0)                                     00000431
      OUT_AREA->FREQ = 1.0;                                             00000432
    ELSE                                                                00000433
      OUT_AREA->FREQ = OUT_AREA->GRPS / OUT_AREA->REACH;                00000434
                                                                        00000435
    IF (OUT_AREA->AUD == 0.0)                                           00000436
      OUT_AREA->CPM = 0.0;                                              00000437
    ELSE                                                                00000438
      OUT_AREA->CPM = (OUT_AREA->COST * 1000.0 / OUT_AREA->AUD);        00000439
                                                                        00000440
    IF (OUT_AREA->GRPS == 0.0)                                          00000441
      OUT_AREA->CPP = 0.0;                                              00000442
    ELSE                                                                00000443
      OUT_AREA->CPP = (OUT_AREA->COST / OUT_AREA->GRPS);                00000444
                                                                        00000445
   RETURN(OK);                                                          00000446
 }                                                                      00000447
/**                                                                     00000448
MODULE      : INIT_CAN_MDL                                              00000449
FUNCTION    : INITIALIZE CANADIAN MODEL PARAMETERS                      00000450
PARAMETERS  : MODEL PARAMETER AREA (I/O)                                00000451
RETURNS     : OK                                                        00000452
**/                                                                     00000453
                                                                        00000454
#INCLUDE "US_CONST.H"                                                   00000455
#INCLUDE "US_PARAM.H"                                                   00000456
                                                                        00000457
INT INIT_CAN_MDL(PARAMETERS)                                            00000458
  MODEL_PARAMETERS *PARAMETERS;                                         00000459
  {                                                                     00000460
    INT FMT;                                                            00000461
                                                                        00000462
/*  FIRST, SET UP TIMEBLOCK F_FACTORS  */                               00000463
                                                                        00000464
    PARAMETERS->F_FACTORSBR_INDEX| =  5.0;                             00000465
    PARAMETERS->F_FACTORSDA_INDEX| = 24.0;                             00000466
    PARAMETERS->F_FACTORSDR_INDEX| =  7.0;                             00000467
    PARAMETERS->F_FACTORSEV_INDEX| =  7.0;                             00000468
    PARAMETERS->F_FACTORSSA_INDEX| =  4.0;                             00000469
    PARAMETERS->F_FACTORSSU_INDEX| =  0.0;                             00000470
    PARAMETERS->F_FACTORSRO_INDEX| = 10.0;                             00000471
    PARAMETERS->F_FACTORSMS_INDEX| = 16.0;                             00000472
                                                                        00000473
/*  NEXT, SET UP DUPLICATION FACTOR BY STATION FORMAT  */               00000474
                                                                        00000475
    FOR ( FMT = 0 ; FMT < MAX_FORMATS ; ++FMT )                         00000476
      PARAMETERS->D_FACTORSFMT| = 1.0;                                 00000477
                                                                        00000478
/*  NEXT, SET UP TIMEBLOCK DUPLICATION VALUES  */                       00000479
                                                                        00000480
    PARAMETERS->TB_DUPS 0| = .31;   /*  BR,DA  */                      00000481
    PARAMETERS->TB_DUPS 1| = .32;   /*  BR,DR  */                      00000482
    PARAMETERS->TB_DUPS 2| = .30;   /*  BR,EV  */                      00000483
    PARAMETERS->TB_DUPS 3| = .36;   /*  BR,SA  */                      00000484
    PARAMETERS->TB_DUPS 4| = .35;   /*  BR,SU  */                      00000485
    PARAMETERS->TB_DUPS 5| = .37;   /*  BR,RO  */                      00000486
    PARAMETERS->TB_DUPS 6| = .37;   /*  BR,MS  */                      00000487
                                                                        00000488
    PARAMETERS->TB_DUPS 7| = .32;   /*  DA,DR  */                      00000489
    PARAMETERS->TB_DUPS 8| = .28;   /*  DA,EV  */                      00000490
    PARAMETERS->TB_DUPS 9| = .35;   /*  DA,SA  */                      00000491
    PARAMETERS->TB_DUPS10| = .34;   /*  DA,SU  */                      00000492
    PARAMETERS->TB_DUPS11| = .35;   /*  DA,RO  */                      00000493
    PARAMETERS->TB_DUPS12| = .35;   /*  DA,MS  */                      00000494
                                                                        00000495
    PARAMETERS->TB_DUPS13| = .29;   /*  DR,EV  */                      00000496
    PARAMETERS->TB_DUPS14| = .34;   /*  DR,SA  */                      00000497
    PARAMETERS->TB_DUPS15| = .33;   /*  DR,SU  */                      00000498
    PARAMETERS->TB_DUPS16| = .36;   /*  DR,RO  */                      00000499
    PARAMETERS->TB_DUPS17| = .36;   /*  DR,MS  */                      00000500
                                                                        00000501
    PARAMETERS->TB_DUPS18| = .33;   /*  EV,SA  */                      00000502
    PARAMETERS->TB_DUPS19| = .32;   /*  EV,SU  */                      00000503
    PARAMETERS->TB_DUPS20| = .34;   /*  EV,RO  */                      00000504
    PARAMETERS->TB_DUPS21| = .34;   /*  EV,MS  */                      00000505
                                                                        00000506
    PARAMETERS->TB_DUPS22| = .27;   /*  SA,SU  */                      00000507
    PARAMETERS->TB_DUPS23| = .33;   /*  SA,RO  */                      00000508
    PARAMETERS->TB_DUPS24| = .33;   /*  SA,MS  */                      00000509
                                                                        00000510
    PARAMETERS->TB_DUPS25| = .32;   /*  SU,RO  */                      00000511
    PARAMETERS->TB_DUPS26| = .32;   /*  SU,MS  */                      00000512
                                                                        00000513
    PARAMETERS->TB_DUPS27| = .38;   /*  RO,MS  */                      00000514
                                                                        00000515
/*  FINALLY, SET UP STATION FORMAT DUPLICATION VALUES  */               00000516
                                                                        00000517
    PARAMETERS->STN_DUPS 0| = .28;   /*  FORMAT 0  */                  00000518
    PARAMETERS->STN_DUPS 1| = .25;                                     00000519
    PARAMETERS->STN_DUPS 2| = .27;                                     00000520
    PARAMETERS->STN_DUPS 3| = .26;                                     00000521
    PARAMETERS->STN_DUPS 4| = .25;                                     00000522
    PARAMETERS->STN_DUPS 5| = .25;                                     00000523
    PARAMETERS->STN_DUPS 6| = .26;                                     00000524
    PARAMETERS->STN_DUPS 7| = .27;                                     00000525
                                                                        00000526
    PARAMETERS->STN_DUPS 8| = .29;   /*  FORMAT 1  */                  00000527
    PARAMETERS->STN_DUPS 9| = .27;                                     00000528
    PARAMETERS->STN_DUPS10| = .24;                                     00000529
    PARAMETERS->STN_DUPS11| = .24;                                     00000530
    PARAMETERS->STN_DUPS12| = .24;                                     00000531
    PARAMETERS->STN_DUPS13| = .25;                                     00000532
    PARAMETERS->STN_DUPS14| = .27;                                     00000533
                                                                        00000534
    PARAMETERS->STN_DUPS15| = .28;   /*  FORMAT 2  */                  00000535
    PARAMETERS->STN_DUPS16| = .26;                                     00000536
    PARAMETERS->STN_DUPS17| = .25;                                     00000537
    PARAMETERS->STN_DUPS18| = .24;                                     00000538
    PARAMETERS->STN_DUPS19| = .25;                                     00000539
    PARAMETERS->STN_DUPS20| = .27;                                     00000540
                                                                        00000541
    PARAMETERS->STN_DUPS21| = .29;   /*  FORMAT 3  */                  00000542
    PARAMETERS->STN_DUPS22| = .24;                                     00000543
    PARAMETERS->STN_DUPS23| = .27;                                     00000544
    PARAMETERS->STN_DUPS24| = .28;                                     00000545
    PARAMETERS->STN_DUPS25| = .27;                                     00000546
                                                                        00000547
    PARAMETERS->STN_DUPS26| = .29;   /*  FORMAT 4  */                  00000548
    PARAMETERS->STN_DUPS27| = .24;                                     00000549
    PARAMETERS->STN_DUPS28| = .25;                                     00000550
    PARAMETERS->STN_DUPS29| = .27;                                     00000551
                                                                        00000552
    PARAMETERS->STN_DUPS30| = .30;   /*  FORMAT 5  */                  00000553
    PARAMETERS->STN_DUPS31| = .28;                                     00000554
    PARAMETERS->STN_DUPS32| = .27;                                     00000555
                                                                        00000556
    PARAMETERS->STN_DUPS33| = .28;   /*  FORMAT 6  */                  00000557
    PARAMETERS->STN_DUPS34| = .27;                                     00000558
                                                                        00000559
    PARAMETERS->STN_DUPS35| = .27;   /*  FORMAT 7  */                  00000560
                                                                        00000561
    RETURN(OK);                                                         00000562
  }                                                                     00000563
/**                                                                     00000564
MODULE      : INIT_INTERNAL                                             00000565
FUNCTION    : INITIALIZE INTERNAL DATA AREA                             00000566
PARAMETERS  : INTERNAL MODEL AREA (I/O)                                 00000567
RETURNS     : OK                                                        00000568
**/                                                                     00000569
                                                                        00000570
#INCLUDE "US_CONST.H"                                                   00000571
#INCLUDE "US_INTER.H"                                                   00000572
                                                                        00000573
INT INIT_INTERNAL(INTERNAL)                                             00000574
  MODEL_INTERNAL *INTERNAL;                                             00000575
  {                                                                     00000576
    INT STN;                                                            00000577
    INT TB;                                                             00000578
                                                                        00000579
    FOR ( STN = 0 ; STN < MAX_STNS ; ++STN )                            00000580
      FOR ( TB = 0 ; TB < MAX_TBS ; ++TB )                              00000581
        INTERNAL->STATIONSTN|.STATUSTB| = NOT_READY;                  00000582
                                                                        00000583
    RETURN(OK);                                                         00000584
  }                                                                     00000585
                                                                        00000586
/**                                                                     00000587
MODULE      : INIT_OUTPUT                                               00000588
FUNCTION    : INITIALIZE AN OUTPUT_AREA STRUCTURE                       00000589
PARAMETERS  : OUTPUT AREA (I/O)                                         00000590
RETURNS     : OK                                                        00000591
**/                                                                     00000592
                                                                        00000593
/**                                                                     00000594
    SET EACH STRUCTURE MEMBER TO ZERO                                   00000595
**/                                                                     00000596
                                                                        00000597
#INCLUDE "US_CONST.H"                                                   00000598
#INCLUDE "US_OUTPUT.H"                                                  00000599
                                                                        00000600
INT INIT_OUTPUT(OUT_PTR)                                                00000601
  OUTPUT_AREA *OUT_PTR;                                                 00000602
  {                                                                     00000603
    OUT_PTR->OCCS  = 0.0;                                               00000604
    OUT_PTR->COST  = 0.0;                                               00000605
    OUT_PTR->AUD   = 0.0;                                               00000606
    OUT_PTR->CPM   = 0.0;                                               00000607
    OUT_PTR->GRPS  = 0.0;                                               00000608
    OUT_PTR->CPP   = 0.0;                                               00000609
    OUT_PTR->REACH = 0.0;                                               00000610
    OUT_PTR->FREQ  = 0.0;                                               00000611
                                                                        00000612
    RETURN(OK);                                                         00000613
  }                                                                     00000614
/**                                                                     00000615
MODULE      : INIT_TB                                                   00000616
FUNCTION    : INITIALIZE TIMEBLOCK STATUS AND PARAMETERS                00000617
PARAMETERS  : TIMEBLOCK INDEX (IN)                                      00000618
              STATION INPUT AREA (IN)                                   00000619
              MODEL PARAMETER AREA (IN)                                 00000620
              STATION INTERNAL AREA (I/O)                               00000621
RETURNS     : OK                                                        00000622
**/                                                                     00000623
                                                                        00000624
/**                                                                     00000625
        IF RATING OR CUME ARE ZERO                                      00000626
          STATUS = ZERO_AUD                                             00000627
        IF RATING = CUME                                                00000628
          STATUS = TOTAL_DUP                                            00000629
        IF RATING * NQHRS = CUME                                        00000630
          STATUS = NO_DUP                                               00000631
        ELSE                                                            00000632
          STATUS = ABC                                                  00000633
          CALCULATE C PARAMETER                                         00000634
          CALCULATE B PARAMETER                                         00000635
          CALCULATE A PARAMETER                                         00000636
**/                                                                     00000637
                                                                        00000638
#INCLUDE "US_CONST.H"                                                   00000639
#INCLUDE "US_INPUT.H"                                                   00000640
#INCLUDE "US_INTER.H"                                                   00000641
#INCLUDE "US_PARAM.H"                                                   00000642
                                                                        00000643
INT INIT_TB(TB,STN_INPUT,PARAMETERS,STN_INTERNAL)                       00000644
  INT              TB;                                                  00000645
  STATION_INPUT    *STN_INPUT;                                          00000646
  MODEL_PARAMETERS *PARAMETERS;                                         00000647
  STATION_INTERNAL *STN_INTERNAL;                                       00000648
  {                                                                     00000649
    INT   TB_NUMBER();                                                  00000650
    FLOAT TB_CUME();                                                    00000651
    FLOAT SQRT_CUME();                                                  00000652
                                                                        00000653
    FLOAT RATING;                                                       00000654
    FLOAT CUME;                                                         00000655
    FLOAT NQHRS;                                                        00000656
    FLOAT B,C;                                                          00000657
                                                                        00000658
    RATING = STN_INPUT->RATINGTB|;                                     00000659
    CUME   = TB_CUME(STN_INPUT,TB);                                     00000660
    NQHRS  = (FLOAT) STN_INPUT->NUM_QHRSTB|;                           00000661
                                                                        00000662
    IF ((RATING == 0.0) ºº (CUME == 0.0))                               00000663
      STN_INTERNAL->STATUSTB| = ZERO_AUD;                              00000664
    ELSE IF (RATING == CUME)                                            00000665
      STN_INTERNAL->STATUSTB| = TOTAL_DUP;                             00000666
    ELSE IF ((NQHRS * RATING) <= CUME)                                  00000667
      STN_INTERNAL->STATUSTB| = NO_DUP;                                00000668
    ELSE                                                                00000669
      {                                                                 00000670
        STN_INTERNAL->STATUSTB| = ABC;                                 00000671
                                                                        00000672
        C = STN_INTERNAL->C_MDLTB|                                     00000673
          = PARAMETERS->F_FACTORSTB| / 10.0 * SQRT_CUME(CUME);         00000674
                                                                        00000675
        B = STN_INTERNAL->B_MDLTB|                                     00000676
          = (NQHRS * (CUME + C - RATING) - C) / (NQHRS * RATING - CUME);00000677
                                                                        00000678
        STN_INTERNAL->A_MDLTB| = (RATING * (B + 1) - C);               00000679
      }                                                                 00000680
                                                                        00000681
    RETURN(OK);                                                         00000682
  }                                                                     00000683
/**                                                                     00000684
MODULE      : INIT_US_MDL                                               00000685
FUNCTION    : INITIALIZE U.S. MODEL PARAMETERS                          00000686
PARAMETERS  : MODEL PARAMETER AREA (I/O)                                00000687
RETURNS     : OK                                                        00000688
**/                                                                     00000689
                                                                        00000690
#INCLUDE "US_CONST.H"                                                   00000691
#INCLUDE "US_PARAM.H"                                                   00000692
                                                                        00000693
INT INIT_US_MDL(PARAMETERS)                                             00000694
  MODEL_PARAMETERS *PARAMETERS;                                         00000695
  {                                                                     00000696
    INT FMT;                                                            00000697
                                                                        00000698
/*  FIRST, SET UP TIMEBLOCK F_FACTORS  */                               00000699
                                                                        00000700
    PARAMETERS->F_FACTORSBR_INDEX| =  5.0;                             00000701
    PARAMETERS->F_FACTORSDA_INDEX| = 24.0;                             00000702
    PARAMETERS->F_FACTORSDR_INDEX| =  7.0;                             00000703
    PARAMETERS->F_FACTORSEV_INDEX| =  7.0;                             00000704
    PARAMETERS->F_FACTORSSA_INDEX| =  4.0;                             00000705
    PARAMETERS->F_FACTORSSU_INDEX| =  0.0;                             00000706
    PARAMETERS->F_FACTORSRO_INDEX| = 10.0;                             00000707
    PARAMETERS->F_FACTORSMS_INDEX| = 16.0;                             00000708
                                                                        00000709
/*  NEXT, SET UP DUPLICATION FACTOR BY STATION FORMAT  */               00000710
                                                                        00000711
    FOR ( FMT = 0 ; FMT < MAX_FORMATS ; ++FMT )                         00000712
      PARAMETERS->D_FACTORSFMT| = 1.0;                                 00000713
                                                                        00000714
/*  NEXT, SET UP TIMEBLOCK DUPLICATION VALUES  */                       00000715
                                                                        00000716
    PARAMETERS->TB_DUPS 0| = .31;   /*  BR,DA  */                      00000717
    PARAMETERS->TB_DUPS 1| = .32;   /*  BR,DR  */                      00000718
    PARAMETERS->TB_DUPS 2| = .30;   /*  BR,EV  */                      00000719
    PARAMETERS->TB_DUPS 3| = .36;   /*  BR,SA  */                      00000720
    PARAMETERS->TB_DUPS 4| = .35;   /*  BR,SU  */                      00000721
    PARAMETERS->TB_DUPS 5| = .37;   /*  BR,RO  */                      00000722
    PARAMETERS->TB_DUPS 6| = .37;   /*  BR,MS  */                      00000723
                                                                        00000724
    PARAMETERS->TB_DUPS 7| = .32;   /*  DA,DR  */                      00000725
    PARAMETERS->TB_DUPS 8| = .28;   /*  DA,EV  */                      00000726
    PARAMETERS->TB_DUPS 9| = .35;   /*  DA,SA  */                      00000727
    PARAMETERS->TB_DUPS10| = .34;   /*  DA,SU  */                      00000728
    PARAMETERS->TB_DUPS11| = .35;   /*  DA,RO  */                      00000729
    PARAMETERS->TB_DUPS12| = .35;   /*  DA,MS  */                      00000730
                                                                        00000731
    PARAMETERS->TB_DUPS13| = .29;   /*  DR,EV  */                      00000732
    PARAMETERS->TB_DUPS14| = .34;   /*  DR,SA  */                      00000733
    PARAMETERS->TB_DUPS15| = .33;   /*  DR,SU  */                      00000734
    PARAMETERS->TB_DUPS16| = .36;   /*  DR,RO  */                      00000735
    PARAMETERS->TB_DUPS17| = .36;   /*  DR,MS  */                      00000736
                                                                        00000737
    PARAMETERS->TB_DUPS18| = .33;   /*  EV,SA  */                      00000738
    PARAMETERS->TB_DUPS19| = .32;   /*  EV,SU  */                      00000739
    PARAMETERS->TB_DUPS20| = .34;   /*  EV,RO  */                      00000740
    PARAMETERS->TB_DUPS21| = .34;   /*  EV,MS  */                      00000741
                                                                        00000742
    PARAMETERS->TB_DUPS22| = .27;   /*  SA,SU  */                      00000743
    PARAMETERS->TB_DUPS23| = .33;   /*  SA,RO  */                      00000744
    PARAMETERS->TB_DUPS24| = .33;   /*  SA,MS  */                      00000745
                                                                        00000746
    PARAMETERS->TB_DUPS25| = .32;   /*  SU,RO  */                      00000747
    PARAMETERS->TB_DUPS26| = .32;   /*  SU,MS  */                      00000748
                                                                        00000749
    PARAMETERS->TB_DUPS27| = .38;   /*  RO,MS  */                      00000750
                                                                        00000751
/*  FINALLY, SET UP STATION FORMAT DUPLICATION VALUES  */               00000752
                                                                        00000753
    PARAMETERS->STN_DUPS 0| = .27;   /*  FORMAT 0  */                  00000754
    PARAMETERS->STN_DUPS 1| = .27;                                     00000755
    PARAMETERS->STN_DUPS 2| = .27;                                     00000756
    PARAMETERS->STN_DUPS 3| = .27;                                     00000757
    PARAMETERS->STN_DUPS 4| = .27;                                     00000758
    PARAMETERS->STN_DUPS 5| = .27;                                     00000759
    PARAMETERS->STN_DUPS 6| = .27;                                     00000760
    PARAMETERS->STN_DUPS 7| = .27;                                     00000761
                                                                        00000762
    PARAMETERS->STN_DUPS 8| = .27;   /*  FORMAT 1  */                  00000763
    PARAMETERS->STN_DUPS 9| = .27;                                     00000764
    PARAMETERS->STN_DUPS10| = .27;                                     00000765
    PARAMETERS->STN_DUPS11| = .27;                                     00000766
    PARAMETERS->STN_DUPS12| = .27;                                     00000767
    PARAMETERS->STN_DUPS13| = .27;                                     00000768
    PARAMETERS->STN_DUPS14| = .27;                                     00000769
                                                                        00000770
    PARAMETERS->STN_DUPS15| = .27;   /*  FORMAT 2  */                  00000771
    PARAMETERS->STN_DUPS16| = .27;                                     00000772
    PARAMETERS->STN_DUPS17| = .27;                                     00000773
    PARAMETERS->STN_DUPS18| = .27;                                     00000774
    PARAMETERS->STN_DUPS19| = .27;                                     00000775
    PARAMETERS->STN_DUPS20| = .27;                                     00000776
                                                                        00000777
    PARAMETERS->STN_DUPS21| = .27;   /*  FORMAT 3  */                  00000778
    PARAMETERS->STN_DUPS22| = .27;                                     00000779
    PARAMETERS->STN_DUPS23| = .27;                                     00000780
    PARAMETERS->STN_DUPS24| = .27;                                     00000781
    PARAMETERS->STN_DUPS25| = .27;                                     00000782
                                                                        00000783
    PARAMETERS->STN_DUPS26| = .27;   /*  FORMAT 4  */                  00000784
    PARAMETERS->STN_DUPS27| = .27;                                     00000785
    PARAMETERS->STN_DUPS28| = .27;                                     00000786
    PARAMETERS->STN_DUPS29| = .27;                                     00000787
                                                                        00000788
    PARAMETERS->STN_DUPS30| = .27;   /*  FORMAT 5  */                  00000789
    PARAMETERS->STN_DUPS31| = .27;                                     00000790
    PARAMETERS->STN_DUPS32| = .27;                                     00000791
                                                                        00000792
    PARAMETERS->STN_DUPS33| = .27;   /*  FORMAT 6  */                  00000793
    PARAMETERS->STN_DUPS34| = .27;                                     00000794
                                                                        00000795
    PARAMETERS->STN_DUPS35| = .27;   /*  FORMAT 7  */                  00000796
                                                                        00000797
    RETURN(OK);                                                         00000798
  }                                                                     00000799
/**                                                                     00000800
MODULE     : MATRIX5                                                    00000801
FUNCTION   : DETERMINE THE JOINT PROBABILITY OF TWO EVENTS              00000802
PARAMETERS : LIMIT (IN)                                                 00000803
             DUPLICATION (IN)                                           00000804
             PROBABILITY OF A (IN)                                      00000805
             PROBABILITY OF B (IN)                                      00000806
RETURNS    : PROBABILITY OF A AND B, -1 IF ANY ERRORS                   00000807
**/                                                                     00000808
                                                                        00000809
TYPEDEF STRUCT                                                          00000810
  {                                                                     00000811
    FLOAT   P_A;            /* PROBABILITY OF P(A)    */                00000812
    FLOAT   P_NOTA;         /* PROBABILITY OF P(~A)    */               00000813
    FLOAT   P_B;            /* PROBABILITY OF P(B)    */                00000814
    FLOAT   P_NOTB;         /* PROBABILITY OF P(~B)    */               00000815
    FLOAT   P_A_B;          /* PROBABILITY OF P(A,B)  */                00000816
    FLOAT   P_A_NOTB;       /* PROBABILITY OF P(A,~B) */                00000817
    FLOAT   P_NOTA_B;       /* PROBABILITY OF P(~A,B) */                00000818
    FLOAT   P_NOTA_NOTB;    /* PROBABILITY OF P(~A,~B) */               00000819
                                                                        00000820
    FLOAT   NEW_P_A;        /* PROBABILITY OF NEW P(A) (SCALED) */      00000821
    FLOAT   NEW_P_B;        /* PROBABILITY OF NEW P(B) (SCALED) */      00000822
    FLOAT   NEW_P_NOTA;     /* PROBABILITY OF NEW P(~A) */              00000823
    FLOAT   NEW_P_NOTB;     /* PROBABILITY OF NEW P(~B) */              00000824
                                                                        00000825
    INT     LDUMP;          /* DUMP INDICATOR */                        00000826
    FLOAT   P_U;            /* ALLOWS GLOBAL PASSING */                 00000827
  } MATRIX;                                                             00000828
                                                                        00000829
MATRIX  MX;                                                             00000830
                                                                        00000831
FLOAT MATRIX5 (PU, BASEDUP, RA, RB)                                     00000832
  FLOAT     PU;                 /* PROBABILITY OF THE UNIVERSE */       00000833
  FLOAT     BASEDUP;            /* PROBABILITY OF EVENT A & B */        00000834
  FLOAT     RA;                 /* PROBABILITY OF EVENT A' */           00000835
  FLOAT     RB;                 /* PROBABILITY OF EVENT B' */           00000836
  {                                                                     00000837
    FLOAT   EPSILO5 = .0001;    /* LOOP TERMINATION VARIABLE */         00000838
    FLOAT   OLDPAB;             /* OLD VALUE OF PAB - LOOPING FACTOR */ 00000839
    FLOAT   DIFF;                                                       00000840
                                                                        00000841
/*  ALL PROBABILITIES MUST BE BETWEEN 0 AND 1 */                        00000842
                                                                        00000843
    IF ( RA <= 0.0  ºº RB <= 0.0 )                                      00000844
      RETURN(-1.0);                                                     00000845
                                                                        00000846
    IF ( RA >  1.0  ºº RB >  1.0 )                                      00000847
      RETURN(-1.0);                                                     00000848
                                                                        00000849
    IF ( (PU <= 0) ºº (PU > 1) )                                        00000850
      RETURN(-1.0);                                                     00000851
                                                                        00000852
    IF ( BASEDUP <= 0 )                                                 00000853
      RETURN(-1.0);                                                     00000854
                                                                        00000855
/*  EVENT PROBABILITIES MUST BE LESS THAN UNIVERSE PROBABILITIES */     00000856
                                                                        00000857
    IF ( RA > PU  ºº RB > PU )                                          00000858
      RETURN(-1.0);                                                     00000859
                                                                        00000860
/*  SET UP THE INITIAL MATRIX.  NOTE THAT EVENT PROBABILITIES ARE SCALED00000861
    INTO THE TERMS OF THE UNIVERSE FOR CALCULATION, THEN SCALED BACK OUT00000862
    TO THE "REAL WORLD" AT TERMINATION. */                              00000863
                                                                        00000864
    MX.P_U = PU;                                                        00000865
    MX.P_A = .5;                                                        00000866
    MX.P_B = .5;                                                        00000867
    MX.P_NOTA = .5;                                                     00000868
    MX.P_NOTB = .5;                                                     00000869
                                                                        00000870
    MX.P_A_B = BASEDUP;                                                 00000871
                                                                        00000872
    MX.P_A_NOTB = MX.P_A - MX.P_A_B;                                    00000873
    MX.P_NOTA_B = MX.P_B - MX.P_A_B;                                    00000874
                                                                        00000875
    MX.P_NOTA_NOTB = MX.P_NOTA - MX.P_NOTA_B;                           00000876
                                                                        00000877
    MX.NEW_P_A = RA / PU;                                               00000878
    MX.NEW_P_B = RB / PU;                                               00000879
                                                                        00000880
    MX.NEW_P_NOTA = 1.0 - MX.NEW_P_A;                                   00000881
    MX.NEW_P_NOTB = 1.0 - MX.NEW_P_B;                                   00000882
                                                                        00000883
/*  PERFORM RESCALING */                                                00000884
                                                                        00000885
    DO                                                                  00000886
      {                                                                 00000887
        OLDPAB = MX.P_A_B;                                              00000888
                                                                        00000889
/*      RESCALE HORIZONTALLY (ADJUST FOR NEW PA)                        00000890
        RESET INTERIOR POINTS                               */          00000891
                                                                        00000892
        IF (MX.P_A > 0.0)                                               00000893
          {                                                             00000894
            MX.P_A_NOTB    *= MX.NEW_P_A / MX.P_A;                      00000895
            MX.P_A_B       *= MX.NEW_P_A / MX.P_A;                      00000896
          }                                                             00000897
                                                                        00000898
        IF (MX.P_NOTA > 0.0)                                            00000899
          {                                                             00000900
            MX.P_NOTA_NOTB *= MX.NEW_P_NOTA / MX.P_NOTA;                00000901
            MX.P_NOTA_B    *= MX.NEW_P_NOTA / MX.P_NOTA;                00000902
          }                                                             00000903
                                                                        00000904
/*      DETERMINE NEW EXTERIOR POINTS                       */          00000905
                                                                        00000906
        MX.P_B    = MX.P_A_B + MX.P_NOTA_B;                             00000907
        MX.P_NOTB = MX.P_A_NOTB + MX.P_NOTA_NOTB;                       00000908
        MX.P_A    = MX.P_A_B + MX.P_A_NOTB;                             00000909
        MX.P_NOTA = MX.P_NOTA_B + MX.P_NOTA_NOTB;                       00000910
                                                                        00000911
/*      RESCALE VERTICALLY (ADJUST FOR NEW PB)                          00000912
        RESET INTERIOR POINTS                               */          00000913
                                                                        00000914
        IF (MX.P_NOTB > 0)                                              00000915
          {                                                             00000916
            MX.P_NOTA_NOTB *= MX.NEW_P_NOTB / MX.P_NOTB;                00000917
            MX.P_A_NOTB    *= MX.NEW_P_NOTB / MX.P_NOTB;                00000918
          }                                                             00000919
                                                                        00000920
        IF (MX.P_B > 0)                                                 00000921
          {                                                             00000922
            MX.P_A_B       *= MX.NEW_P_B / MX.P_B;                      00000923
            MX.P_NOTA_B    *= MX.NEW_P_B / MX.P_B;                      00000924
          }                                                             00000925
                                                                        00000926
/*      DETERMINE NEW EXTERIOR POINTS                       */          00000927
                                                                        00000928
        MX.P_A    = MX.P_A_B + MX.P_A_NOTB;                             00000929
        MX.P_NOTA = MX.P_NOTA_B + MX.P_NOTA_NOTB;                       00000930
        MX.P_B    = MX.P_A_B + MX.P_NOTA_B;                             00000931
        MX.P_NOTB = MX.P_A_NOTB + MX.P_NOTA_NOTB;                       00000932
                                                                        00000933
/*      CHECK TERMINATION */                                            00000934
                                                                        00000935
        DIFF = OLDPAB - MX.P_A_B;                                       00000936
        IF (DIFF < 0.0)                                                 00000937
          DIFF = -DIFF;                                                 00000938
      }                                                                 00000939
    WHILE ( DIFF  > EPSILO5 );                                          00000940
                                                                        00000941
  RETURN(MX.P_A_B * PU);                                                00000942
}                                                                       00000943
                                                                        00000944
/**                                                                     00000945
MODULE      : MKT_CALC                                                  00000946
FUNCTION    : PERFORM MARKET CALCULATIONS                               00000947
PARAMETERS  : # OF STATIONS (IN)                                        00000948
              STATIONS TO RE-CALCULATE (IN)                             00000949
              INPUT AREA (IN)                                           00000950
              INTERNAL DATA AREA (IN)                                   00000951
              MODEL PARAMETER AREA (IN)                                 00000952
              OUTPUT AREA (I/O)                                         00000953
RETURNS     : OK/ERROR                                                  00000954
**/                                                                     00000955
                                                                        00000956
/**                                                                     00000957
    FOR EACH STATION REQUESTED                                          00000958
      PERFORM STATION CALCULATIONS (STN_CALC)                           00000959
                                                                        00000960
    INITIALIZE MARKET OUTPUT AREA  (INIT_OUTPUT)                        00000961
                                                                        00000962
    CALCULATE MARKET REACH         (MKT_REACH)                          00000963
    CALCULATE MARKET RESULTS       (CALC_RESULTS)                       00000964
**/                                                                     00000965
                                                                        00000966
#INCLUDE "US_CONST.H"                                                   00000967
#INCLUDE "US_INPUT.H"                                                   00000968
#INCLUDE "US_INTER.H"                                                   00000969
#INCLUDE "US_PARAM.H"                                                   00000970
#INCLUDE "US_OUTPUT.H"                                                  00000971
                                                                        00000972
INT MKT_CALC(NSTNS,STNS,INPUT,INTERNAL,PARAMETERS,OUTPUT)               00000973
  INT              NSTNS;                                               00000974
  INT              STNSMAX_STNS|;                                      00000975
  MODEL_INPUT      *INPUT;                                              00000976
  MODEL_INTERNAL   *INTERNAL;                                           00000977
  MODEL_PARAMETERS *PARAMETERS;                                         00000978
  MODEL_OUTPUT     *OUTPUT;                                             00000979
  {                                                                     00000980
    INT   STN;                                                          00000981
    FLOAT REACHESMAX_STNS|;                                            00000982
    INT   FORMATSMAX_STNS|;                                            00000983
                                                                        00000984
    OUTPUT_AREA *MKT_OUTPUT = &(OUTPUT->MARKET);                        00000985
    OUTPUT_AREA *STN_OUTPUT;                                            00000986
                                                                        00000987
    INT   STN_CALC();                                                   00000988
    INT   INIT_OUTPUT();                                                00000989
    FLOAT MKT_REACH();                                                  00000990
    INT   CALC_RESULTS();                                               00000991
                                                                        00000992
/*  CALCULATE EACH STATION REQUESTED.  */                               00000993
                                                                        00000994
    FOR ( STN = 0 ; STN < NSTNS ; ++STN )                               00000995
      IF (STNSSTN| == 1)                                               00000996
        IF (STN_CALC(INPUT->FORMATSTN|,&(INPUT->STATIONSTN|),         00000997
                 &(INTERNAL->STATIONSTN|),&(OUTPUT->STATIONSTN|),     00000998
                 PARAMETERS) == ERROR)                                  00000999
          RETURN(ERROR);                                                00001000
                                                                        00001001
/*  INITIALIZE MARKET OUTPUT AREA  */                                   00001002
                                                                        00001003
    IF (INIT_OUTPUT(MKT_OUTPUT) == ERROR)                               00001004
      RETURN(ERROR);                                                    00001005
                                                                        00001006
/*  ACCUMULATE STATION RESULTS  */                                      00001007
                                                                        00001008
    FOR ( STN = 0 ; STN < NSTNS ; ++STN )                               00001009
      {                                                                 00001010
        STN_OUTPUT = &(OUTPUT->STATIONSTN|);                           00001011
        IF (STN_OUTPUT->OCCS > 0.0)                                     00001012
          {                                                             00001013
            MKT_OUTPUT->OCCS += (STN_OUTPUT->OCCS);                     00001014
            MKT_OUTPUT->COST += (STN_OUTPUT->COST);                     00001015
            MKT_OUTPUT->AUD  += (STN_OUTPUT->AUD);                      00001016
            MKT_OUTPUT->GRPS += (STN_OUTPUT->GRPS);                     00001017
                                                                        00001018
            REACHESSTN| = (STN_OUTPUT->REACH);                         00001019
          }                                                             00001020
        ELSE                                                            00001021
          REACHESSTN| = 0.0;                                           00001022
                                                                        00001023
        FORMATSSTN| = INPUT->FORMATSTN|;                              00001024
      }                                                                 00001025
                                                                        00001026
/*  CALCULATE MARKET REACH  */                                          00001027
                                                                        00001028
    IF ((MKT_OUTPUT->REACH = MKT_REACH(NSTNS,REACHES,FORMATS,PARAMETERS)00001029
) < 0.0)                                                                00001030
      RETURN(ERROR);                                                    00001031
                                                                        00001032
/*  SET UP MARKET RESULTS  */                                           00001033
                                                                        00001034
    IF (CALC_RESULTS(MKT_OUTPUT) == ERROR)                              00001035
      RETURN(ERROR);                                                    00001036
                                                                        00001037
    RETURN(OK);                                                         00001038
  }                                                                     00001039
                                                                        00001040
                                                                        00001041
/**                                                                     00001042
MODULE      : MKT_DUP                                                   00001043
FUNCTION    : CALCULATE MARKET DUPLICATION                              00001044
PARAMETERS  : STATION REACHES (IN)                                      00001045
              STATION FORMATS (IN)                                      00001046
              STATION LIST    (IN)                                      00001047
              NUMBER OF STATIONS (IN)                                   00001048
              MODEL PARAMETERS (IN)                                     00001049
RETURNS     : DUPLICATION VALUE                                         00001050
**/                                                                     00001051
                                                                        00001052
/**                                                                     00001053
      IF ONLY 2 STATIONS                                                00001054
        RETURN(DUPLICATION VALUE IN TABLE)                              00001055
                                                                        00001056
      SET TOTAL_DUP, TOTAL_REACH TO 0                                   00001057
                                                                        00001058
      FOR EACH STATION FORMAT PAIRED WITH THE LAST ONE                  00001059
        ADD STATION REACH TO TOTAL REACH                                00001060
        LOOK UP DUPLICATION FOR PAIR FROM TABLE                         00001061
        ADD (DUP * STATION REACH) TO TOTAL_DUP                          00001062
                                                                        00001063
      RETURN(TOTAL_DUP/TOTAL_REACH)                                     00001064
**/                                                                     00001065
                                                                        00001066
#INCLUDE "US_CONST.H"                                                   00001067
#INCLUDE "US_PARAM.H"                                                   00001068
                                                                        00001069
FLOAT MKT_DUP(REACHES,FORMATS,STN_LIST,NSTNS,PARAMETERS)                00001070
  FLOAT REACHESMAX_STNS|;                                              00001071
  INT   FORMATSMAX_STNS|;                                              00001072
  INT   STN_LISTMAX_STNS|;                                             00001073
  INT   NSTNS;                                                          00001074
  MODEL_PARAMETERS *PARAMETERS;                                         00001075
  {                                                                     00001076
    FLOAT TOT_DUP;                                                      00001077
    FLOAT TOT_REACH;                                                    00001078
    INT   STN;                                                          00001079
    INT   NEXT_STN;                                                     00001080
    INT   LAST_STN;                                                     00001081
    INT   INDEX;                                                        00001082
                                                                        00001083
    INT MAP_STN();                                                      00001084
                                                                        00001085
/*  HANDLE SPECIAL CASES FIRST  */                                      00001086
                                                                        00001087
    IF (NSTNS <= 1)                                                     00001088
      RETURN(-1.0);                                                     00001089
                                                                        00001090
    IF (NSTNS == 2)                                                     00001091
      {                                                                 00001092
        INDEX = MAP_STN(FORMATSSTN_LIST0||,FORMATSSTN_LIST1||);     00001093
        RETURN(PARAMETERS->STN_DUPSINDEX|);                            00001094
      }                                                                 00001095
                                                                        00001096
/*  INITIALIZE ACCUMULATORS  */                                         00001097
                                                                        00001098
    TOT_DUP = 0.0;                                                      00001099
    TOT_REACH = 0.0;                                                    00001100
                                                                        00001101
/*  BUILD UP TOTAL REACH AND WEIGHTED DUP  */                           00001102
                                                                        00001103
    LAST_STN = STN_LISTNSTNS-1|;                                       00001104
                                                                        00001105
    FOR ( STN = 0 ; STN < (NSTNS-1) ; ++STN )                           00001106
      {                                                                 00001107
        NEXT_STN   = STN_LISTSTN|;                                     00001108
        INDEX      = MAP_STN(FORMATSNEXT_STN|,FORMATSLAST_STN|);      00001109
                                                                        00001110
        TOT_REACH += REACHESNEXT_STN|;                                 00001111
        TOT_DUP   += (REACHESNEXT_STN| * PARAMETERS->STN_DUPSINDEX|); 00001112
      }                                                                 00001113
                                                                        00001114
    RETURN(TOT_DUP / TOT_REACH);                                        00001115
  }                                                                     00001116
                                                                        00001117
/**                                                                     00001118
MODULE     : MAP_STN                                                    00001119
FUNCTION   : CALCULATE THE POSITION OF DUPLICATION VALUE (FMT1,FMT2) IN 00001120
A                                                                       00001121
             VECTOR REPRESENTING A LOWER-TRIANGULAR SQUARE MATRIX OF    00001122
             SIZE MAX_FORMATS (INCLUDING THE DIAGONAL).                 00001123
PARAMETERS : FMT1, FMT2                                                 00001124
RETURNS    : INDEX IN ARRAY                                             00001125
**/                                                                     00001126
                                                                        00001127
/**                                                                     00001128
        DETERMINE HI FMT, LOW FMT                                       00001129
        LOOK UP START VALUE FROM TABLE USING LOW FMT                    00001130
        ADD OFFSET OF (HI FMT - LOW FMT)                                00001131
**/                                                                     00001132
                                                                        00001133
INT MAP_STN(FMT1,FMT2)                                                  00001134
  INT FMT1;                                                             00001135
  INT FMT2;                                                             00001136
  {                                                                     00001137
    INT HI, LOW;                                                        00001138
                                                                        00001139
    STATIC INT STARTMAX_FORMATS| = { 0, 8, 15, 21, 26, 30, 33, 35 };   00001140
                                                                        00001141
    IF (FMT1 > FMT2)                                                    00001142
      {                                                                 00001143
        HI  = FMT1;                                                     00001144
        LOW = FMT2;                                                     00001145
      }                                                                 00001146
    ELSE                                                                00001147
      {                                                                 00001148
        HI  = FMT2;                                                     00001149
        LOW = FMT1;                                                     00001150
      }                                                                 00001151
                                                                        00001152
    RETURN(STARTLOW| + (HI - LOW));                                    00001153
  }                                                                     00001154
                                                                        00001155
/**                                                                     00001156
MODULE      : MKT_REACH                                                 00001157
FUNCTION    : CALCULATE MARKET REACH                                    00001158
PARAMETERS  : NUMBER OF STATIONS                                        00001159
              STATION REACHES                                           00001160
              STATION FORMATS                                           00001161
              MODEL PARAMETERS                                          00001162
RETURNS     : MARKET REACH IN PERCENT, -1 IF ANY ERRORS                 00001163
**/                                                                     00001164
                                                                        00001165
/**                                                                     00001166
    SORT REACHES IN DESCENDING ORDER    (BUILD_STN_LIST)                00001167
    SET MARKET REACH TO FIRST VALUE                                     00001168
                                                                        00001169
    FOR EACH REMAINING VALUE                                            00001170
      CALCULATE MARKET DUPLICATION      (MKT_DUP)                       00001171
      RESCALE WITH NEXT REACH           (MATRIX5)                       00001172
      CALCULATE NEW REACH VALUE                                         00001173
                                                                        00001174
    RETURN(REACH)                                                       00001175
**/                                                                     00001176
                                                                        00001177
#INCLUDE "US_CONST.H"                                                   00001178
#INCLUDE "US_PARAM.H"                                                   00001179
                                                                        00001180
FLOAT MKT_REACH(NSTNS,REACHES,FORMATS,PARAMETERS)                       00001181
  INT              NSTNS;                                               00001182
  FLOAT            REACHESMAX_STNS|;                                   00001183
  INT              FORMATSMAX_STNS|;                                   00001184
  MODEL_PARAMETERS *PARAMETERS;                                         00001185
  {                                                                     00001186
    FLOAT LIMIT = 1.0;                                                  00001187
    FLOAT DUP;                                                          00001188
    FLOAT NEW_DUP;                                                      00001189
    FLOAT REACH;                                                        00001190
    FLOAT STNRCH;                                                       00001191
                                                                        00001192
    INT STN;                                                            00001193
    INT NUM_STNS;                                                       00001194
    INT STN_LISTMAX_STNS|;                                             00001195
                                                                        00001196
    INT   BUILD_STN_LIST();                                             00001197
    FLOAT MKT_DUP();                                                    00001198
    FLOAT MATRIX5();                                                    00001199
                                                                        00001200
/*  HANDLE SPECIAL CASES  */                                            00001201
                                                                        00001202
    IF (NSTNS == 0)                                                     00001203
      RETURN(0.0);                                                      00001204
                                                                        00001205
    IF (NSTNS == 1)                                                     00001206
      RETURN(REACHES0|);                                               00001207
                                                                        00001208
/*  NOW, BUILD A LIST OF SORTED REACHES AND CORRESPONDING FORMATS  */   00001209
                                                                        00001210
    IF ((NUM_STNS = BUILD_STN_LIST(NSTNS,REACHES,STN_LIST)) == -1)      00001211
      RETURN(-1.0);                                                     00001212
                                                                        00001213
    IF (NUM_STNS == 0)                                                  00001214
      RETURN(0.0);                                                      00001215
                                                                        00001216
/*  INITIALIZE START VALUE FOR REACH  */                                00001217
                                                                        00001218
    REACH = REACHESSTN_LIST0|| / 100.0;                               00001219
                                                                        00001220
/*  NOW, COMBINE EACH REMAINING STATION TO BUILD MARKET REACH  */       00001221
                                                                        00001222
    FOR ( STN = 1 ; STN < NUM_STNS ; ++STN )                            00001223
      {                                                                 00001224
        DUP = MKT_DUP(REACHES,FORMATS,STN_LIST,STN+1,PARAMETERS);       00001225
        STNRCH = REACHESSTN_LISTSTN|| / 100.0;                        00001226
                                                                        00001227
/*  CALCULATE DUPLICATION.  */                                          00001228
                                                                        00001229
        IF ((NEW_DUP = MATRIX5(LIMIT,DUP,REACH,STNRCH)) == -1.0)        00001230
          RETURN(-1.0);                                                 00001231
                                                                        00001232
/*  CALCULATE REACH FROM DUPLICATION.  CUTOFF AT LIMIT.  */             00001233
                                                                        00001234
        REACH += (STNRCH - NEW_DUP);                                    00001235
        IF (REACH > LIMIT)                                              00001236
          REACH = LIMIT;                                                00001237
      }                                                                 00001238
                                                                        00001239
    RETURN(REACH * 100.0);                                              00001240
  }                                                                     00001241
/*****************************************************\                 00001242
**  MODULE     : SASU_CUME                           **                 00001243
**  FUNCTION   : CALCULATE SA AND SU TIMEBLOCK CUME  **                 00001244
**  PARAMETERS : SA INDIVIDUAL CUMES  (IN)           **                 00001245
**               SU INDIVIDUAL CUMES  (IN)           **                 00001246
**               SA+SU CUME           (IN)           **                 00001247
**               SA CUME              (OUT)          **                 00001248
**               SU CUME              (OUT)          **                 00001249
**  RETURNS    : OK/ERROR                            **                 00001250
\*****************************************************/                 00001251
                                                                        00001252
/**                                                                     00001253
        CALCULATE RATIO OF SA TO SU (K)                                 00001254
        CALCULATE LIMIT EXTENSION   (T)                                 00001255
        CALCULATE SU CUME                                               00001256
        CALCULATE SA CUME                                               00001257
**/                                                                     00001258
                                                                        00001259
#INCLUDE "US_CONST.H"                                                   00001260
                                                                        00001261
INT SASU_CUME(SA_CUMES,SU_CUMES,SA_SU,SA,SU)                            00001262
  FLOAT SA_CUMES|;                                                     00001263
  FLOAT SU_CUMES|;                                                     00001264
  FLOAT SA_SU;                                                          00001265
  FLOAT *SA;                                                            00001266
  FLOAT *SU;                                                            00001267
  {                                                                     00001268
    FLOAT SA_SUM, SU_SUM;                                               00001269
    FLOAT K, T;                                                         00001270
    INT   TB;                                                           00001271
                                                                        00001272
    FLOAT SU_CUME();                                                    00001273
                                                                        00001274
    SA_SUM = 0;                                                         00001275
    SU_SUM = 0;                                                         00001276
                                                                        00001277
    FOR ( TB = 0 ; TB < MAX_SASU_TBS ; ++TB )                           00001278
      {                                                                 00001279
        SA_SUM += SA_CUMESTB|;                                         00001280
        SU_SUM += SU_CUMESTB|;                                         00001281
      }                                                                 00001282
                                                                        00001283
/*  CHECK SPECIAL CASES  */                                             00001284
                                                                        00001285
    IF (SA_SUM == 0.0)                                                  00001286
      {                                                                 00001287
        *SA = 0.0;                                                      00001288
        *SU = SA_SU;                                                    00001289
        RETURN(OK);                                                     00001290
      }                                                                 00001291
                                                                        00001292
    IF (SU_SUM == 0.0)                                                  00001293
      {                                                                 00001294
        *SU = 0.0;                                                      00001295
        *SA = SA_SU;                                                    00001296
        RETURN(OK);                                                     00001297
      }                                                                 00001298
                                                                        00001299
    K = SA_SUM / SU_SUM;                                                00001300
    T = 1.1 * SA_SU;                                                    00001301
                                                                        00001302
    *SU = SU_CUME(K,T,SA_SU);                                           00001303
    *SA = K * (*SU);                                                    00001304
                                                                        00001305
    RETURN(OK);                                                         00001306
  }                                                                     00001307
/**                                                                     00001308
MODULE      : SASU_INPUT                                                00001309
FUNCTION    : DETERMINE INPUT FOR SA/SU U.S. TIMEBLOCK                  00001310
PARAMETERS  : STATION NUMBER    (IN)                                    00001311
              TIMEBLOCK INDEX   (IN)                                    00001312
              COMPONENT INPUT   (IN)                                    00001313
              INPUT AREA        (I/O)                                   00001314
              INTERNAL AREA     (I/O)                                   00001315
RETURNS     : OK/ERROR                                                  00001316
**/                                                                     00001317
                                                                        00001318
#INCLUDE "US_CONST.H"                                                   00001319
#INCLUDE "US_INPUT.H"                                                   00001320
#INCLUDE "US_INTER.H"                                                   00001321
                                                                        00001322
INT SASU_INPUT(STN,TB,SASU_DATA,INPUT,INTERNAL)                         00001323
  INT            STN;                                                   00001324
  INT            TB;                                                    00001325
  SASU_INPUT     *SASU_DATA;                                            00001326
  MODEL_INPUT    *INPUT;                                                00001327
  MODEL_INTERNAL *INTERNAL;                                             00001328
  {                                                                     00001329
    FLOAT O;                                                            00001330
    FLOAT RTG = 0.0;                                                    00001331
    FLOAT AUD = 0.0;                                                    00001332
    FLOAT CST = 0.0;                                                    00001333
    FLOAT OCC = 0.0;                                                    00001334
                                                                        00001335
    STATION_INPUT *STN_INPUT;                                           00001336
                                                                        00001337
/*  FIRST, CHECK THAT PARAMETERS ARE OK.  */                            00001338
                                                                        00001339
    IF ((TB != SA_INDEX) && (TB != SU_INDEX))                           00001340
      RETURN(ERROR);                                                    00001341
                                                                        00001342
    STN_INPUT = &INPUT->STATIONSTN|;                                   00001343
                                                                        00001344
/*  ACCUMULATE TOTALS  */                                               00001345
                                                                        00001346
    FOR ( TB = 0 ; TB < MAX_SASU_TBS ; ++TB )                           00001347
      IF ((O = SASU_DATA->OCCASIONSTB|) > 0.0)                         00001348
        {                                                               00001349
          RTG += (SASU_DATA->RATINGTB| * O);                           00001350
          AUD += (SASU_DATA->AUDIENCETB| * O);                         00001351
          CST += (SASU_DATA->COSTTB| * O);                             00001352
          OCC += O;                                                     00001353
        }                                                               00001354
                                                                        00001355
/*  NOW STORE AVERAGE RATING, AUDIENCE, RATE AND TOTAL OCCASIONS  */    00001356
                                                                        00001357
    IF (OCC > 0.0)                                                      00001358
      {                                                                 00001359
        STN_INPUT->RATINGTB|   = (RTG / OCC);                          00001360
        STN_INPUT->AUDIENCETB| = (AUD / OCC);                          00001361
        STN_INPUT->COSTTB|     = (CST / OCC);                          00001362
      }                                                                 00001363
    ELSE                                                                00001364
      {                                                                 00001365
        STN_INPUT->RATINGTB|   = 0.0;                                  00001366
        STN_INPUT->AUDIENCETB| = 0.0;                                  00001367
        STN_INPUT->COSTTB|     = 0.0;                                  00001368
      }                                                                 00001369
                                                                        00001370
    STN_INPUT->OCCASIONSTB| = OCC;                                     00001371
                                                                        00001372
                                                                        00001373
/*  FINALLY, SET INTERNAL STATE TO FORCE RE-CALCULATION OF TB PARAMETERS00001374
  */                                                                    00001375
                                                                        00001376
    INTERNAL->STATIONSTN|.STATUSTB| = NOT_READY;                      00001377
                                                                        00001378
    RETURN(OK);                                                         00001379
  }                                                                     00001380
                                                                        00001381
/**                                                                     00001382
MODULE      : SORT_REACH                                                00001383
FUNCTION    : SORT REACHES AND CORRESPONDING INDEX IN DESCENDING ORDER  00001384
PARAMETERS  : NUMBER OF REACHES (IN)                                    00001385
              REACHES           (I/O)                                   00001386
              INDICIES          (I/O)                                   00001387
RETURNS     : OK                                                        00001388
**/                                                                     00001389
                                                                        00001390
/**     (SELECTION SORT)                                                00001391
                                                                        00001392
        FOR I = 1 TO N-1                                                00001393
          FIND LARGEST ELEMENT FROM AI|,...,AN|                       00001394
          SWAP IT WITH AI|                                             00001395
                                                                        00001396
**/                                                                     00001397
                                                                        00001398
#INCLUDE "US_CONST.H"                                                   00001399
                                                                        00001400
#DEFINE SWAP(A,B,C)  { C = A ; A = B ; B = C ; }                        00001401
                                                                        00001402
INT SORT_REACH(NUM_REACHES,REACHES,INDICIES)                            00001403
  INT   NUM_REACHES;                                                    00001404
  FLOAT REACHES|;                                                      00001405
  INT   INDICIES|;                                                     00001406
  {                                                                     00001407
    FLOAT F_SWAP;                                                       00001408
    INT   I_SWAP;                                                       00001409
                                                                        00001410
    INT   POS;                                                          00001411
    INT   INDEX;                                                        00001412
    INT   HI_INDEX;                                                     00001413
    FLOAT HI_REACH;                                                     00001414
                                                                        00001415
/*  SET UP REACHESINDEX| FOR EACH INDEX  */                            00001416
                                                                        00001417
    FOR ( INDEX = 0 ; INDEX < NUM_REACHES - 1 ; ++INDEX )               00001418
      {                                                                 00001419
        HI_INDEX = INDEX;                                               00001420
        HI_REACH = REACHESINDEX|;                                      00001421
                                                                        00001422
/*      LOOP THRU REMAINING ELEMENTS LOOKING FOR HIGHEST  */            00001423
                                                                        00001424
        FOR ( POS = INDEX + 1 ; POS < NUM_REACHES ; ++POS )             00001425
          IF (REACHESPOS| > HI_REACH )                                 00001426
            {                                                           00001427
              HI_REACH = REACHESPOS|;                                  00001428
              HI_INDEX = POS;                                           00001429
            }                                                           00001430
                                                                        00001431
/*      SWAP HIGHEST ELEMENT WITH INDEX  */                             00001432
                                                                        00001433
        SWAP(REACHESINDEX|,REACHESHI_INDEX|,F_SWAP);                  00001434
        SWAP(INDICIESINDEX|,INDICIESHI_INDEX|,I_SWAP);                00001435
      }                                                                 00001436
                                                                        00001437
    RETURN(OK);                                                         00001438
  }                                                                     00001439
/**                                                                     00001440
MODULE      : SQRT_CUME                                                 00001441
FUNCTION    : CALCULATE THE SQUARE ROOT OF CUME %                       00001442
              (CAN BE USED FOR ANY SQUARE ROOT HOWEVER)                 00001443
PARAMETERS  : CUME %                                                    00001444
RETURNS     : SQRT(CUME %)                                              00001445
**/                                                                     00001446
                                                                        00001447
/**                                                                     00001448
        IF CUME % <= 0, RETURN(0.0)                                     00001449
                                                                        00001450
        PICK INITIAL VALUE                                              00001451
          CUME < 1,  USE 0.75                                           00001452
          CUME < 10, USE 2.0                                            00001453
          CUME < 25, USE 4.0                                            00001454
          CUME < 50, USE 6.0                                            00001455
          ELSE,      USE 8.0                                            00001456
                                                                        00001457
        ITERATE USING NEWTON'S METHOD UNTIL WITHIN EPSILON              00001458
          NEW VALUE = (OLD VALUE + CUME %) / 2                          00001459
**/                                                                     00001460
                                                                        00001461
FLOAT SQRT_CUME(CUME_PCT)                                               00001462
  FLOAT CUME_PCT;                                                       00001463
  {                                                                     00001464
    FLOAT GUESS;                                                        00001465
    FLOAT NEW_GUESS;                                                    00001466
    FLOAT DIFF;                                                         00001467
    FLOAT EPS = 0.0001;                                                 00001468
                                                                        00001469
    IF (CUME_PCT <= 0.0)                                                00001470
      RETURN(0.0);                                                      00001471
                                                                        00001472
    IF (CUME_PCT > 50.0)                                                00001473
      GUESS = 8.0;                                                      00001474
    ELSE IF (CUME_PCT > 25.0)                                           00001475
      GUESS = 6.0;                                                      00001476
    ELSE IF (CUME_PCT > 10.0)                                           00001477
      GUESS = 4.0;                                                      00001478
    ELSE IF (CUME_PCT >  1.0)                                           00001479
      GUESS = 2.0;                                                      00001480
    ELSE                                                                00001481
      GUESS = 0.75;                                                     00001482
                                                                        00001483
    DIFF = GUESS;                                                       00001484
                                                                        00001485
    WHILE (DIFF > EPS)                                                  00001486
      {                                                                 00001487
        NEW_GUESS = (GUESS + (CUME_PCT / GUESS)) / 2.0;                 00001488
        IF (NEW_GUESS > GUESS)                                          00001489
          DIFF = NEW_GUESS - GUESS;                                     00001490
        ELSE                                                            00001491
          DIFF = GUESS - NEW_GUESS;                                     00001492
        GUESS = NEW_GUESS;                                              00001493
      }                                                                 00001494
                                                                        00001495
    RETURN(GUESS);                                                      00001496
  }                                                                     00001497
/**                                                                     00001498
MODULE      : STN_CALC                                                  00001499
FUNCTION    : PERFORM STATION CALCULATIONS                              00001500
PARAMETERS  : STATION FORMAT        (IN)                                00001501
              STATION INPUT         (IN)                                00001502
              STATION INTERNAL DATA (I/O)                               00001503
              STATION OUTPUT        (OUT)                               00001504
              MODEL PARAMETERS      (IN)                                00001505
RETURNS     : OK/ERROR                                                  00001506
**/                                                                     00001507
                                                                        00001508
/**                                                                     00001509
    INITIALIZE STATION TOTALS   (INIT_OUTPUT)                           00001510
                                                                        00001511
    FOR EACH TIMEBLOCK                                                  00001512
      IF THERE ARE ANY OCCASIONS                                        00001513
        ADD TIMEBLOCK OCCASIONS TO STATION OCCASIONS                    00001514
        ADD TIMEBLOCK COST TO STATION COST                              00001515
        ADD TIMEBLOCK AUDIENCE TO STATION AUDIENCE                      00001516
        ADD TIMEBLOCK GRPS TO STATION GRPS                              00001517
        CALCULATE TIMEBLOCK REACH (TB_REACH)                            00001518
      ADD REACH TO LIST OF REACHES                                      00001519
                                                                        00001520
    CALCULATE STATION REACH     (STN_REACH)                             00001521
    CALCULATE STATION RESULTS   (CALC_RESULTS)                          00001522
**/                                                                     00001523
                                                                        00001524
#INCLUDE "US_CONST.H"                                                   00001525
#INCLUDE "US_INPUT.H"                                                   00001526
#INCLUDE "US_INTER.H"                                                   00001527
#INCLUDE "US_PARAM.H"                                                   00001528
#INCLUDE "US_OUTPUT.H"                                                  00001529
                                                                        00001530
INT STN_CALC(STN_FMT,STN_INPUT,STN_INTERNAL,STN_OUTPUT,PARAMETERS)      00001531
  INT              STN_FMT;                                             00001532
  STATION_INPUT    *STN_INPUT;                                          00001533
  STATION_INTERNAL *STN_INTERNAL;                                       00001534
  OUTPUT_AREA      *STN_OUTPUT;                                         00001535
  MODEL_PARAMETERS *PARAMETERS;                                         00001536
  {                                                                     00001537
    INT   INIT_OUTPUT();                                                00001538
    FLOAT TB_REACH();                                                   00001539
    FLOAT STN_REACH();                                                  00001540
    INT   CALC_RESULTS();                                               00001541
                                                                        00001542
    INT   TB;                                                           00001543
    FLOAT OCCS;                                                         00001544
                                                                        00001545
    FLOAT REACHESMAX_TBS|;                                             00001546
                                                                        00001547
/*  INITIALIZE OUTPUT AREA  */                                          00001548
                                                                        00001549
    IF (INIT_OUTPUT(STN_OUTPUT) == ERROR)                               00001550
      RETURN(ERROR);                                                    00001551
                                                                        00001552
/*  PERFORM CALCULATIONS FOR EACH TIMEBLOCK  */                         00001553
                                                                        00001554
    FOR ( TB = 0 ; TB < MAX_TBS ; ++TB )                                00001555
      IF ((OCCS = STN_INPUT->OCCASIONSTB|) > 0.0)                      00001556
        {                                                               00001557
          STN_OUTPUT->OCCS += OCCS;                                     00001558
          STN_OUTPUT->COST += (OCCS * STN_INPUT->COSTTB|);             00001559
          STN_OUTPUT->AUD  += (OCCS * STN_INPUT->AUDIENCETB|);         00001560
          STN_OUTPUT->GRPS += (OCCS * STN_INPUT->RATINGTB|);           00001561
                                                                        00001562
          IF ((REACHESTB| = TB_REACH(TB,STN_INPUT,PARAMETERS,STN_INTERN00001563
AL)) < 0.0)                                                             00001564
            RETURN(ERROR);                                              00001565
        }                                                               00001566
      ELSE                                                              00001567
        REACHESTB| = 0.0;                                              00001568
                                                                        00001569
/*  CALCULATE STATION REACH  */                                         00001570
                                                                        00001571
    IF ((STN_OUTPUT->REACH = STN_REACH(STN_FMT,REACHES,STN_INPUT,PARAMET00001572
ERS)) < 0.0)                                                            00001573
      RETURN(ERROR);                                                    00001574
                                                                        00001575
/*  CALCULATE STATION RESULTS  */                                       00001576
                                                                        00001577
    IF (CALC_RESULTS(STN_OUTPUT) == ERROR)                              00001578
      RETURN(ERROR);                                                    00001579
                                                                        00001580
    RETURN(OK);                                                         00001581
  }                                                                     00001582
                                                                        00001583
                                                                        00001584
/**                                                                     00001585
MODULE     : STN_DUP                                                    00001586
FUNCTION   : CALCULATE DUPLICATION FOR RE-SCALING (STATION REACH CALCULA00001587
TION)                                                                   00001588
PARAMETERS : STATION FORMAT        (IN)                                 00001589
             TIMEBLOCK REACHES     (IN)                                 00001590
             TIMEBLOCK NUMBERS     (IN)                                 00001591
             NUMBER OF TIMEBLOCKS  (IN)                                 00001592
             MODEL PARAMETERS      (IN)                                 00001593
RETURNS    : DUP VALUE, -1 IF ERRORS                                    00001594
**/                                                                     00001595
                                                                        00001596
/**                                                                     00001597
        IF ONLY 2 TIMEBLOCKS                                            00001598
          RETURN(DUPLICATION VALUE IN TABLE)                            00001599
                                                                        00001600
        SET TOTAL_DUP, TOTAL_REACH TO 0                                 00001601
                                                                        00001602
        FOR EACH TIMEBLOCK PAIRED WITH THE LAST ONE                     00001603
          ADD TIMEBLOCK REACH TO TOTAL REACH                            00001604
          LOOK UP DUPLICATION FOR PAIR FROM TABLE                       00001605
          ADD (DUP * TIMEBLOCK REACH) TO TOTAL_DUP                      00001606
                                                                        00001607
        RETURN(TOTAL_DUP/TOTAL_REACH)                                   00001608
**/                                                                     00001609
                                                                        00001610
#INCLUDE "US_CONST.H"                                                   00001611
#INCLUDE "US_INPUT.H"                                                   00001612
#INCLUDE "US_PARAM.H"                                                   00001613
                                                                        00001614
FLOAT STN_DUP(STN_FMT,REACHES,TBNUMS,NUMTBS,PARAMETERS)                 00001615
  INT              STN_FMT;                                             00001616
  FLOAT            REACHESMAX_TBS|;                                    00001617
  INT              TBNUMSMAX_TBS|;                                     00001618
  INT              NUMTBS;                                              00001619
  MODEL_PARAMETERS *PARAMETERS;                                         00001620
  {                                                                     00001621
    INT   TB;                                                           00001622
    FLOAT TOT_DUP;                                                      00001623
    FLOAT TOT_REACH;                                                    00001624
                                                                        00001625
    INT MAP_TB();                                                       00001626
                                                                        00001627
/*  HANDLE SPECIAL CASES FIRST  */                                      00001628
                                                                        00001629
    IF (NUMTBS <= 1)                                                    00001630
      RETURN(-1.0);                                                     00001631
                                                                        00001632
    IF (NUMTBS == 2)                                                    00001633
      RETURN(PARAMETERS->TB_DUPSMAP_TB(TBNUMS0|,TBNUMS1|)|);         00001634
                                                                        00001635
/*  INITIALIZE ACCUMULATORS  */                                         00001636
                                                                        00001637
    TOT_DUP = 0.0;                                                      00001638
    TOT_REACH = 0.0;                                                    00001639
                                                                        00001640
/*  BUILD UP TOTAL REACH AND WEIGHTED DUP  */                           00001641
                                                                        00001642
    FOR ( TB = 0 ; TB < (NUMTBS-1) ; ++TB )                             00001643
      {                                                                 00001644
        TOT_REACH += REACHESTBNUMSTB||;                               00001645
        TOT_DUP   += (REACHESTBNUMSTB|| * PARAMETERS->TB_DUPSMAP_TB(T00001646
BNUMSTB|,TBNUMSNUMTBS-1|)|);                                          00001647
      }                                                                 00001648
                                                                        00001649
    RETURN(PARAMETERS->D_FACTORSSTN_FMT| * TOT_DUP / TOT_REACH);       00001650
  }                                                                     00001651
                                                                        00001652
                                                                        00001653
/**                                                                     00001654
MODULE     : MAP_TB                                                     00001655
FUNCTION   : CALCULATE THE POSITION OF DUPLICATION VALUE (TB1,TB2) IN A 00001656
             VECTOR REPRESENTING A LOWER-TRIANGULAR SQUARE MATRIX       00001657
             OF SIZE SINGLE_TBS                                         00001658
PARAMETERS : TB1, TB2                                                   00001659
RETURNS    : INDEX IN ARRAY                                             00001660
**/                                                                     00001661
                                                                        00001662
/**                                                                     00001663
                                                                        00001664
        DETERMINE HI TB, LOW TB                                         00001665
        LOOK UP START VALUE FROM TABLE USING LOW TB                     00001666
        ADD OFFSET OF (HI TB - LOW TB)                                  00001667
                                                                        00001668
**/                                                                     00001669
                                                                        00001670
INT MAP_TB(TB1,TB2)                                                     00001671
  {                                                                     00001672
    INT HI, LOW;                                                        00001673
                                                                        00001674
    STATIC INT STARTMAX_TBS-1| = { 0, 7, 13, 18, 22, 25, 27 };         00001675
                                                                        00001676
    IF (TB1 > TB2)                                                      00001677
      {                                                                 00001678
        HI = TB1;                                                       00001679
        LOW = TB2;                                                      00001680
      }                                                                 00001681
    ELSE                                                                00001682
      {                                                                 00001683
        HI = TB2;                                                       00001684
        LOW = TB1;                                                      00001685
      }                                                                 00001686
                                                                        00001687
    RETURN(STARTLOW| + (HI - LOW - 1));                                00001688
  }                                                                     00001689
                                                                        00001690
/**                                                                     00001691
MODULE     : STN_LIMIT                                                  00001692
FUNCTION   : CALCULATE LIMIT FOR RE-SCALING (STATION REACH CALCULATION) 00001693
PARAMETERS : CURRENT STATION CUME (IN)                                  00001694
             NEW TIMEBLOCK CUME   (IN)                                  00001695
             NEW STATION CUME     (IN)                                  00001696
             DUPLICATION VALUE    (IN)                                  00001697
             OLD LIMIT            (IN)                                  00001698
RETURNS    : NEW LIMIT, -1.0 IF ANY ERRORS                              00001699
**/                                                                     00001700
                                                                        00001701
/**                                                                     00001702
OVERVIEW : WE ARE DETERMINING A LIMIT FOR STATION REACH CALCULATIONS.   00001703
           A LIMIT LARGER THAN THE CUME IS REQUIRED SO THAT WHEN THE    00001704
           TWO COMPONENT CUMES ARE RESCALED, THE ACTUAL CUME IS ACHIEVED00001705
.                                                                       00001706
                                                                        00001707
           (A PROPERTY OF RESCALE IS THAT WE WILL NEVER ACHIEVE THE LIMI00001708
T.                                                                      00001709
            THIS IS NO GOOD WHEN RESCALING COMPONENT CUMES !!)          00001710
**/                                                                     00001711
                                                                        00001712
                                                                        00001713
/**                                                                     00001714
                                                                        00001715
            SPECIAL CASES :                                             00001716
                                                                        00001717
            IF CURRENT STATION CUME = NEW STATION CUME                  00001718
              RETURN (OLD LIMIT)                                        00001719
                                                                        00001720
            IF NEW TIMEBLOCK CUME = NEW STATION CUME                    00001721
              RETURN (MAX(OLD LIMIT,NEW STATION CUME))                  00001722
                                                                        00001723
            IF (CURRENT STATION CUME + NEW TIMEBLOCK CUME) = NEW STATION00001724
 CUME                                                                   00001725
              RETURN(1.0)                                               00001726
                                                                        00001727
            GENERAL CASE :                                              00001728
                                                                        00001729
            CUME(A)   = CURRENT STATION CUME                            00001730
            CUME(B)   = NEW TIMEBLOCK CUME                              00001731
            CUME(A+B) = NEW STATION CUME                                00001732
                                                                        00001733
            ACTUAL DUP = CUME(A) + CUME(B) - CUME(A+B)                  00001734
            RESCALE CUME(A+B)/CUME(A)/CUME(B)/DUP TO CALCULATE REACH0   00001735
            LIMIT0 = CUME(A+B) * (NEW DUP) / (ACTUAL DUP)  LIMIT TO 1.000001736
|                                                                       00001737
            RESCALE LIMIT0/CUME(A)/CUME(B)/DUP TO CALCULATE REACH1      00001738
            LIMIT1 = CUME(A+B) + (LIMIT0 - CUME(A+B)) * (CUME(A+B) - REA00001739
CH0) / (REACH1 - REACH0)                                                00001740
                                                                        00001741
            RETURN(MIN(LIMIT1,1.0))                                     00001742
                                                                        00001743
**/                                                                     00001744
                                                                        00001745
#DEFINE EPS 0.0001                                                      00001746
                                                                        00001747
#DEFINE ABS(X)   ((X)<0?-(X):(X))                                       00001748
#DEFINE MAX(A,B) ((A)>(B)?(A):(B))                                      00001749
#DEFINE MIN(A,B) ((A)<=(B)?(A):(B))                                     00001750
                                                                        00001751
FLOAT STN_LIMIT(STN_CUME,TB_CUME,NEW_CUME,DUP,OLD_LIMIT)                00001752
  FLOAT STN_CUME;                                                       00001753
  FLOAT TB_CUME;                                                        00001754
  FLOAT NEW_CUME;                                                       00001755
  FLOAT DUP;                                                            00001756
  FLOAT OLD_LIMIT;                                                      00001757
  {                                                                     00001758
    FLOAT ACTUAL_DUP;                                                   00001759
    FLOAT REACH0, REACH1;                                               00001760
    FLOAT LIMIT0, LIMIT1;                                               00001761
    FLOAT NEW_DUP;                                                      00001762
                                                                        00001763
    FLOAT MATRIX5();                                                    00001764
                                                                        00001765
                                                                        00001766
/*  CHECK FOR TOTAL DUPLICATION  */                                     00001767
                                                                        00001768
    IF (ABS(STN_CUME-NEW_CUME) < EPS)                                   00001769
      RETURN(OLD_LIMIT);                                                00001770
                                                                        00001771
/*  CHECK FOR TIMEBLOCK CUME = STATION CUME (IE. MS, RO ON SOME)  */    00001772
                                                                        00001773
    IF (ABS(TB_CUME-NEW_CUME) < EPS)                                    00001774
      RETURN(MAX(OLD_LIMIT,NEW_CUME));                                  00001775
                                                                        00001776
/*  CHECK FOR ZERO DUPLICATION  */                                      00001777
                                                                        00001778
    IF ((STN_CUME+TB_CUME-NEW_CUME) < EPS)                              00001779
      RETURN(1.0);                                                      00001780
                                                                        00001781
/*  CALCULATE INITIAL GUESS AT LIMIT  */                                00001782
                                                                        00001783
    ACTUAL_DUP = STN_CUME + TB_CUME - NEW_CUME;                         00001784
                                                                        00001785
    IF ((NEW_DUP = MATRIX5(NEW_CUME,DUP,STN_CUME,TB_CUME)) == -1.0)     00001786
      RETURN(-1.0);                                                     00001787
                                                                        00001788
    REACH0 = STN_CUME + TB_CUME - NEW_DUP;                              00001789
    LIMIT0 = MIN(1.0,NEW_CUME * (NEW_DUP / ACTUAL_DUP));                00001790
                                                                        00001791
/*  USE THIS GUESS TO DETERMINE A BETTER GUESS  */                      00001792
                                                                        00001793
    IF ((NEW_DUP = MATRIX5(LIMIT0,DUP,STN_CUME,TB_CUME)) == -1.0)       00001794
      RETURN(-1.0);                                                     00001795
                                                                        00001796
    REACH1 = STN_CUME + TB_CUME - NEW_DUP;                              00001797
    LIMIT1 = NEW_CUME                                                   00001798
           + (LIMIT0 - NEW_CUME) * (NEW_CUME - REACH0) / (REACH1 - REACH00001799
0);                                                                     00001800
                                                                        00001801
    RETURN(MIN(LIMIT1,1.0));                                            00001802
  }                                                                     00001803
/**                                                                     00001804
MODULE      : STN_REACH                                                 00001805
FUNCTION    : CALCULATE STATION REACH                                   00001806
PARAMETERS  : STATION FORMAT     (IN)                                   00001807
              TIMEBLOCK REACHES  (IN)                                   00001808
              STATION INPUT AREA (IN)                                   00001809
              MODEL PARAMETERS   (IN)                                   00001810
RETURNS     : STATION REACH IN PERCENT, -1 IF ANY ERRORS                00001811
**/                                                                     00001812
                                                                        00001813
/**                                                                     00001814
        BUILD LIST OF TIMEBLOCK REACHES AND INDICIES  (BUILD_TB_LIST)   00001815
        SET STATION REACH TO FIRST VALUE                                00001816
        SET CUME TO FIRST TIMEBLOCK CUME              (STN_CUME)        00001817
                                                                        00001818
        FOR EACH REMAINING VALUE                                        00001819
          GET NEXT TIMEBLOCK CUME                     (STN_CUME)        00001820
          GET NEXT STATION CUME                       (STN_CUME)        00001821
          CALCULATE STATION DUPLICATION               (STN_DUP)         00001822
          CALCULATE LIMIT FOR RESCALE                 (STN_LIMIT)       00001823
          PERFORM RESCALE                             (MATRIX5)         00001824
          CALCULATE NEW REACH VALUE                                     00001825
                                                                        00001826
        RETURN(REACH)                                                   00001827
                                                                        00001828
        NOTE: ALL INPUTS AND OUTPUTS ARE IN PERCENT.                    00001829
              INTERNALLY, ALL ARE CONVERTED TO PROPORTION.              00001830
**/                                                                     00001831
                                                                        00001832
#INCLUDE "US_CONST.H"                                                   00001833
#INCLUDE "US_INPUT.H"                                                   00001834
#INCLUDE "US_PARAM.H"                                                   00001835
                                                                        00001836
#DEFINE MIN(A,B) ((A)<=(B)?(A):(B))                                     00001837
                                                                        00001838
FLOAT STN_REACH(STN_FMT,REACHES,STN_INPUT,PARAMETERS)                   00001839
  INT              STN_FMT;                                             00001840
  FLOAT            REACHESMAX_TBS|;                                    00001841
  STATION_INPUT    *STN_INPUT;                                          00001842
  MODEL_PARAMETERS *PARAMETERS;                                         00001843
  {                                                                     00001844
    INT NUM_TBS;            /*  NUMBER OF TBS WITH REACH    */          00001845
    INT TB_INDMAX_TBS|;    /*  ORDER TO COMBINE TIMEBLOCKS */          00001846
                                                                        00001847
    INT TB;                 /*  TIMEBLOCK LOOP INDEX        */          00001848
    INT STN_TB_NUM;         /*  CURRENT COMBO TB NUMBER     */          00001849
    INT TB_NUM;             /*  NEXT TIMEBLOCK NUMBER       */          00001850
                                                                        00001851
    FLOAT LIMIT;            /*  LIMIT FOR RE-SCALING        */          00001852
    FLOAT DUP;              /*  DUPLICATION FOR RE-SCALING  */          00001853
    FLOAT NEW_DUP;          /*  DUPLICATED REACH            */          00001854
    FLOAT REACH;            /*  CURRENT STATION REACH       */          00001855
    FLOAT TBRCH;            /*  NEXT TIMEBLOCK REACH        */          00001856
    FLOAT CUME;             /*  CURRENT STATION CUME        */          00001857
    FLOAT TBCUME;           /*  NEXT TIMEBLOCK CUME         */          00001858
    FLOAT NEWCUME;          /*  NEXT STATION CUME           */          00001859
                                                                        00001860
    INT   BUILD_TB_LIST();                                              00001861
    INT   TB_NUMBER();                                                  00001862
    FLOAT STN_CUME();                                                   00001863
    FLOAT STN_DUP();                                                    00001864
    FLOAT STN_LIMIT();                                                  00001865
    FLOAT MATRIX5();                                                    00001866
                                                                        00001867
/*  BUILD LIST OF TIMEBLOCK REACHES AND NUMBERS  */                     00001868
                                                                        00001869
    IF ((NUM_TBS = BUILD_TB_LIST(REACHES,TB_IND)) == -1)                00001870
      RETURN(-1.0);                                                     00001871
                                                                        00001872
/*  HANDLE SPECIAL CASES  */                                            00001873
                                                                        00001874
    IF (NUM_TBS == 0)                                                   00001875
      RETURN(0.0);                                                      00001876
                                                                        00001877
    IF (NUM_TBS == 1)                                                   00001878
      RETURN(REACHESTB_IND0||);                                       00001879
                                                                        00001880
/*  INITIALIZE START VALUES FOR REACH AND CUME  */                      00001881
                                                                        00001882
    STN_TB_NUM = TB_NUMBER(TB_IND0|);                                  00001883
                                                                        00001884
    REACH = REACHESTB_IND0|| / 100.0;                                 00001885
    CUME  = STN_CUME(STN_INPUT,STN_TB_NUM) / 100.0;                     00001886
    LIMIT = CUME;                                                       00001887
                                                                        00001888
/*  NOW, COMBINE EACH REMAINING TIMEBLOCK TO BUILD STATION REACH  */    00001889
                                                                        00001890
    FOR ( TB = 1 ; TB < NUM_TBS ; ++TB )                                00001891
      {                                                                 00001892
        TB_NUM  = TB_NUMBER(TB_INDTB|);                                00001893
        TBRCH   = REACHESTB_INDTB|| / 100.0;                          00001894
        TBCUME  = STN_CUME(STN_INPUT,TB_NUM) / 100.0;                   00001895
        NEWCUME = STN_CUME(STN_INPUT,(STN_TB_NUM + TB_NUM)) / 100.0;    00001896
                                                                        00001897
        DUP = STN_DUP(STN_FMT,REACHES,TB_IND,TB+1,PARAMETERS);          00001898
                                                                        00001899
        LIMIT = STN_LIMIT(CUME,TBCUME,NEWCUME,DUP,LIMIT);               00001900
                                                                        00001901
        IF (LIMIT == -1.0)                                              00001902
          RETURN(-1.0);                                                 00001903
                                                                        00001904
        IF ((NEW_DUP = MATRIX5(LIMIT,DUP,REACH,TBRCH)) == -1.0)         00001905
          RETURN(-1.0);                                                 00001906
                                                                        00001907
        REACH += (TBRCH - NEW_DUP);                                     00001908
        REACH = MIN(NEWCUME,REACH);                                     00001909
                                                                        00001910
        CUME = NEWCUME;                                                 00001911
        STN_TB_NUM += TB_NUM;                                           00001912
      }                                                                 00001913
                                                                        00001914
    RETURN(REACH * 100.0);                                              00001915
  }                                                                     00001916
/**********************************************\                        00001917
**  MODULE     : SU_CUME                      **                        00001918
**  FUNCTION   : CALCULATE SU TIMEBLOCK CUME  **                        00001919
**  PARAMETERS : K = RATIO OF SA TO SU (IN)   **                        00001920
**               T = LIMIT EXTENSION   (IN)   **                        00001921
**               SASU = CUME(SA+SU)    (IN)   **                        00001922
**  RETURNS    : CUME(SU)                     **                        00001923
\**********************************************/                        00001924
                                                                        00001925
/**                                                                     00001926
    K IS THE RATIO BETWEEN THE SUM OF THE INDIVIDUAL SA CUMES           00001927
    AND THE SUM OF THE INDIVIDUAL SU CUMES.                             00001928
    WE ASSUME THAT THE SA CUME AND SU CUME WILL HAVE THE SAME RATIO.    00001929
                                                                        00001930
    TO ESTIMATE THE SU CUME, WE ASSUME THAT SA AND SU DUPLICATE         00001931
    RANDOMLY TO THE SA+SU CUME TIMES SOME FACTOR T.                     00001932
                                                                        00001933
    SOLVING THE EQUATION RESULTS IN :                                   00001934
                                                                        00001935
               (T+TK) ô ÷(T+TK)ú-(4KT)CUME(SA+SU)|                     00001936
    CUME(SU) = ------------------------------------                     00001937
                                2K                                      00001938
**/                                                                     00001939
                                                                        00001940
FLOAT SU_CUME(K,T,SASU)                                                 00001941
  FLOAT K;                                                              00001942
  FLOAT T;                                                              00001943
  FLOAT SASU;                                                           00001944
  {                                                                     00001945
    FLOAT B;                                                            00001946
    FLOAT AC4;                                                          00001947
    FLOAT S;                                                            00001948
    FLOAT ROOT1, ROOT2;                                                 00001949
    FLOAT SQRT_CUME();                                                  00001950
                                                                        00001951
    B   = T + T*K;                                                      00001952
    AC4 = 4.0 * K * T * SASU;                                           00001953
                                                                        00001954
    S = SQRT_CUME(B*B-AC4);                                             00001955
                                                                        00001956
    ROOT1 = (B + S) / (2.0 * K);                                        00001957
    ROOT2 = (B - S) / (2.0 * K);                                        00001958
                                                                        00001959
    RETURN((ROOT1 > ROOT2) ? ROOT2 : ROOT1 );                           00001960
  }                                                                     00001961
/**                                                                     00001962
MODULE      : TB_CUME                                                   00001963
FUNCTION    : CALCULATES TIMEBLOCK CUME                                 00001964
PARAMETERS  : STATION INPUT AREA (IN)                                   00001965
              TIMEBLOCK INDEX    (IN)                                   00001966
RETURNS     : TIMEBLOCK CUME %                                          00001967
**/                                                                     00001968
                                                                        00001969
/**                                                                     00001970
        IF TIMEBLOCK = MS                                               00001971
          RETURN STATION CUME                                           00001972
        ELSE                                                            00001973
          RETURN APPROPRIATE NUMBER                                     00001974
**/                                                                     00001975
                                                                        00001976
#INCLUDE "US_CONST.H"                                                   00001977
#INCLUDE "US_INPUT.H"                                                   00001978
                                                                        00001979
FLOAT TB_CUME(STN_INPUT,TB_INDEX)                                       00001980
  STATION_INPUT *STN_INPUT;                                             00001981
  INT           TB_INDEX;                                               00001982
  {                                                                     00001983
    INT TB_NUM;                                                         00001984
    INT TB_NUMBER();                                                    00001985
                                                                        00001986
    IF ((TB_NUM = TB_NUMBER(TB_INDEX)) == -1)                           00001987
      RETURN(0.0);                                                      00001988
                                                                        00001989
/*  CHECK IF TIMEBLOCK IS MS  */                                        00001990
                                                                        00001991
    IF (TB_NUM == MS_NUMBER)                                            00001992
      RETURN(STN_INPUT->STNCUME);                                       00001993
                                                                        00001994
/*  OTHERWISE, RETURN CUME FROM ARRAY OF STATION CUMES  **/             00001995
                                                                        00001996
    RETURN(STN_INPUT->CUMESTB_NUM-1|);                                 00001997
  }                                                                     00001998
/**                                                                     00001999
MODULE      : TB_NUMBER                                                 00002000
FUNCTION    : CONVERT TIMEBLOCK INDEX TO TIMEBLOCK NUMBER               00002001
PARAMETERS  : TIMEBLOCK INDEX (IN)                                      00002002
RETURNS     : TIMEBLOCK NUMBER, -1 IF ERRORS                            00002003
**/                                                                     00002004
                                                                        00002005
#INCLUDE "US_CONST.H"                                                   00002006
                                                                        00002007
STATIC TB_NUMSMAX_TBS| = { BR_NUMBER, DA_NUMBER, DR_NUMBER, EV_NUMBER, 00002008
                            SA_NUMBER, SU_NUMBER, RO_NUMBER, MS_NUMBER }00002009
;                                                                       00002010
                                                                        00002011
INT TB_NUMBER(TB_INDEX)                                                 00002012
  INT TB_INDEX;                                                         00002013
  {                                                                     00002014
    IF ((TB_INDEX < 0) ºº (TB_INDEX >= MAX_TBS))                        00002015
      RETURN(-1);                                                       00002016
    ELSE                                                                00002017
      RETURN(TB_NUMSTB_INDEX|);                                        00002018
  }                                                                     00002019
/**                                                                     00002020
MODULE      : TB_REACH                                                  00002021
FUNCTION    : CALCULATE TIMEBLOCK REACH                                 00002022
PARAMETERS  : TIMEBLOCK INDEX       (IN)                                00002023
              STATION INPUT AREA    (IN)                                00002024
              MODEL PARAMETER AREA  (IN)                                00002025
              STATION INTERNAL AREA (IN)                                00002026
RETURNS     : TIMEBLOCK REACH %, -1 IF ANY ERRORS                       00002027
**/                                                                     00002028
                                                                        00002029
/**                                                                     00002030
        IF TIMEBLOCK STATUS IS NOT_READY                                00002031
          INITIALIZE TIMEBLOCK  (INIT_TB)                               00002032
                                                                        00002033
        IF OCCASIONS < 1.0                                              00002034
          REACH = OCCASIONS * RATING                                    00002035
                                                                        00002036
        IF OCCASIONS > # OF QHRS                                        00002037
          REACH = CUME                                                  00002038
                                                                        00002039
        SWITCH ACCORDING TO TIMEBLOCK STATUS                            00002040
          IF ABC                                                        00002041
            REACH = INVERTED LINEAR CALCULATION                         00002042
          IF ZERO                                                       00002043
            REACH = 0                                                   00002044
          IF NO_DUP                                                     00002045
            REACH = OCCASIONS * RATING                                  00002046
          IF TOTAL_DUP                                                  00002047
            REACH = RATING                                              00002048
**/                                                                     00002049
                                                                        00002050
#INCLUDE "US_CONST.H"                                                   00002051
#INCLUDE "US_INPUT.H"                                                   00002052
#INCLUDE "US_INTER.H"                                                   00002053
#INCLUDE "US_PARAM.H"                                                   00002054
                                                                        00002055
FLOAT TB_REACH(TB,STN_INPUT,PARAMETERS,STN_INTERNAL)                    00002056
  INT              TB;                                                  00002057
  STATION_INPUT    *STN_INPUT;                                          00002058
  MODEL_PARAMETERS *PARAMETERS;                                         00002059
  STATION_INTERNAL *STN_INTERNAL;                                       00002060
  {                                                                     00002061
    FLOAT OCCS;                                                         00002062
    FLOAT RATING;                                                       00002063
    FLOAT CUME;                                                         00002064
    FLOAT NQHRS;                                                        00002065
                                                                        00002066
    INT   INIT_TB();                                                    00002067
    FLOAT TB_CUME();                                                    00002068
                                                                        00002069
    IF (STN_INTERNAL->STATUSTB| == NOT_READY)                          00002070
      IF (INIT_TB(TB,STN_INPUT,PARAMETERS,STN_INTERNAL) == ERROR)       00002071
        RETURN(-1);                                                     00002072
                                                                        00002073
    RATING = STN_INPUT->RATINGTB|;                                     00002074
                                                                        00002075
/*  CHECK FOR OCCASIONS LESS THAN 1.0  */                               00002076
                                                                        00002077
    IF ((OCCS = STN_INPUT->OCCASIONSTB|) < 1.0)                        00002078
      RETURN(OCCS * RATING);                                            00002079
                                                                        00002080
    NQHRS = STN_INPUT->NUM_QHRSTB|;                                    00002081
    CUME  = TB_CUME(STN_INPUT,TB);                                      00002082
                                                                        00002083
/*  CHECK FOR MORE OCCASIONS THAN QUARTER-HOURS  */                     00002084
                                                                        00002085
    IF (OCCS >= NQHRS)                                                  00002086
      RETURN(CUME);                                                     00002087
                                                                        00002088
/*  CALCULATE BASED ON STATUS OF MODEL  */                              00002089
                                                                        00002090
    SWITCH (STN_INTERNAL->STATUSTB|)                                   00002091
      {                                                                 00002092
        CASE ABC :                                                      00002093
          RETURN((STN_INTERNAL->A_MDLTB| * OCCS + STN_INTERNAL->C_MDLT00002094
B|) /                                                                   00002095
                 (STN_INTERNAL->B_MDLTB| + OCCS));                     00002096
                                                                        00002097
        CASE ZERO_AUD :                                                 00002098
          RETURN(0.0);                                                  00002099
                                                                        00002100
        CASE NO_DUP :                                                   00002101
          RETURN(OCCS * RATING);                                        00002102
                                                                        00002103
        CASE TOTAL_DUP :                                                00002104
          RETURN(RATING);                                               00002105
      }                                                                 00002106
                                                                        00002107
/*  GOT TO HERE, MUST BE A PROBLEM  */                                  00002108
                                                                        00002109
    RETURN(-1.0);                                                       00002110
  }                                                                     00002111
/**                                                                     00002112
MODULE      : STN_CUME                                                  00002113
FUNCTION    : CALCULATES STATION CUME                                   00002114
PARAMETERS  : STATION INPUT AREA (IN)                                   00002115
              TIMEBLOCK NUMBER   (IN)                                   00002116
RETURNS     : STATION CUME                                              00002117
**/                                                                     00002118
                                                                        00002119
/**                                                                     00002120
        IF TIMEBLOCK = MS                                               00002121
          RETURN STATION CUME                                           00002122
                                                                        00002123
        IF TIMEBLOCK INCLUDES RO                                        00002124
          CALCULATE COMBINATION WITH RO                                 00002125
        ELSE                                                            00002126
          RETURN APPROPRIATE NUMBER                                     00002127
                                                                        00002128
**/                                                                     00002129
                                                                        00002130
#INCLUDE "US_CONST.H"                                                   00002131
#INCLUDE "US_INPUT.H"                                                   00002132
                                                                        00002133
/***********************************************************************00002134
****/                                                                   00002135
FLOAT STN_CUME(STN_INPUT, TB_NUM)                                       00002136
                                                                        00002137
   STATION_INPUT *STN_INPUT;     /* STATION IMPUT AREA */               00002138
   INT TB_NUM;                   /* TIMEBLOCK */                        00002139
                                                                        00002140
   {                                                                    00002141
   FLOAT TB_CUME;                                                       00002142
   FLOAT RO_CUME;                                                       00002143
   FLOAT MS_CUME;                                                       00002144
                                                                        00002145
   INT CALC_CUMES();                                                    00002146
                                                                        00002147
                                                                        00002148
   /* CHECK IF TIMEBLOCK INCLUDES MS  */                                00002149
                                                                        00002150
   IF (TB_NUM >= MS_NUMBER)                                             00002151
      RETURN(STN_INPUT->STNCUME);                                       00002152
                                                                        00002153
   /* CHECK IF TIMEBLOCK INCLUDES RO  */                                00002154
                                                                        00002155
   IF (TB_NUM > RO_NUMBER)                                              00002156
      {                                                                 00002157
      MS_CUME = STN_INPUT->STNCUME;                                     00002158
      RO_CUME = STN_INPUT->CUMESRO_NUMBER - 1| / MS_CUME;              00002159
      TB_CUME = STN_INPUT->CUMESTB_NUM - RO_NUMBER - 1| / MS_CUME;     00002160
                                                                        00002161
      /* CHECK IF COMPONENT TIMEBLOCK CUME EXISTS.  */                  00002162
                                                                        00002163
      IF (TB_CUME < 0.0)                                                00002164
         {                                                              00002165
         IF (CALC_CUMES(STN_INPUT->CUMES,STN_INPUT->STNCUME) == ERROR)  00002166
            RETURN(0.0);                                                00002167
         ELSE                                                           00002168
            TB_CUME = STN_INPUT->CUMESTB_NUM - RO_NUMBER - 1| / MS_CUME00002169
;                                                                       00002170
         }                                                              00002171
                                                                        00002172
      RETURN(MS_CUME * (1.0 - (1.0 - RO_CUME) * (1.0 - TB_CUME)));      00002173
      }                                                                 00002174
                                                                        00002175
   /* CHECK IF STATION CUME EXISTS */                                   00002176
                                                                        00002177
   IF ((TB_CUME = STN_INPUT->CUMESTB_NUM - 1|) >= 0.0)                 00002178
      RETURN(TB_CUME);                                                  00002179
                                                                        00002180
   /*                                                                   00002181
   *  NO, SO WE MUST CALCULATE IT AND FILL IN CUME AREA. WE WILL IN FACT00002182
   *  CALCULATE ALL UNKNOWN CUMES, NOT JUST THE MISSING ONE.            00002183
   */                                                                   00002184
                                                                        00002185
   IF (CALC_CUMES(STN_INPUT->CUMES,STN_INPUT->STNCUME) == ERROR)        00002186
      RETURN(0.0);                                                      00002187
   ELSE                                                                 00002188
      RETURN(STN_INPUT->CUMESTB_NUM - 1|);                             00002189
                                                                        00002190
   }                                                                    00002191
                                                                        00002192
/***********************************************************************00002193
****/                                                                   00002194
