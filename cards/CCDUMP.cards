/*                                                                              
*CATALP CCDUMP                                                                  
*/                                                                              
                                                                                
#include <standard.h>                                                           
#include <stdio.h>                                                              
                                                                                
#define GOPRINT  0                                                              
#define NOPRINT  1                                                              
#define SAMEPRINT 2                                                             
                                                                                
#define PRINTLEN 64                                                             
#define STARTHEX 10                                                             
#define STARTCHR 48                                                             
                                                                                
#define SNQ      '\''                                                           
#define DBQ      '\"'                                                           
#define BSL      '\\'                                                           
                                                                                
static char trtab(::) = {                                                       
      /*0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F*/         
/*0*/  '.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',         
/*1*/  '.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',         
/*2*/  '.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',         
/*3*/  '.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',         
/*4*/  ' ','.','.','.','.','.','.','.','.','.','ย','.','<','(','+','|',         
/*5*/  '&','.','.','.','.','.','.','.','.','.','!','$','*',')',';','^',         
/*6*/  '-','/','.','.','.','.','.','.','.','.','ยบ',',','%','_','>','?',         
/*7*/  '.','.','.','.','.','.','.','.','.','`',':','#','@',SNQ,'=',DBQ,         
/*8*/  '.','a','b','c','d','e','f','g','h','i','.','.','.','.','.','.',         
/*9*/  '.','j','k','l','m','n','o','p','q','r','.','.','.','.','.','.',         
/*A*/  '.','~','s','t','u','v','w','x','y','z','.','.','.','.','.','.',         
/*B*/  '.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.',         
/*C*/  '{','A','B','C','D','E','F','G','H','I','.','.','.','.','.','.',         
/*D*/  '}','J','K','L','M','N','O','P','Q','R','.','.','.','.','.','.',         
/*E*/  BSL,'.','S','T','U','V','W','X','Y','Z','.','.','.','.','.','.',         
/*F*/  '0','1','2','3','4','5','6','7','8','9','|','.','.','.','.','.'          
};                                                                              
                                                                                
dump(start,end)                                                                 
char *start,*end;                                                               
/*                                                                              
  This routine does a formatted dump of an area of storage starting             
  at start and ending at end-1.                                                 
*/                                                                              
{                                                                               
    long longadd;                                                               
    int i,dif;                                                                  
    char *leftadd,printline(: PRINTLEN+1 :);                                    
    char hexbuf(:32:),chrbuf(:16:);                                             
    char samebuf(:16:),samechar,sameflag,printflag;                             
                                                                                
    longadd = (long)start&0xfffffff0;                                           
    samechar = sameflag = 0;                                                    
                                                                                
    for(leftadd = (char *)longadd ; leftadd < end ; leftadd += 16){             
        if(samechar != leftadd(:0:))                                            
            sameflag = 0;                                                       
        samechar = leftadd(:0:);                                                
        memset(samebuf,samechar,16);                                            
        if(memcmp(leftadd,samebuf,16)){                                         
            printflag = GOPRINT;                                                
            sameflag = 0;                                                       
        }                                                                       
        else if(sameflag)                                                       
            printflag = NOPRINT;                                                
        else{                                                                   
            printflag = SAMEPRINT;                                              
            sameflag = 1;                                                       
        }                                                                       
                                                                                
        chexout(leftadd,hexbuf,16);                                             
        for(i = 0 ; i < 16 ; i++)                                               
            chrbuf(:i:) = trtab(: leftadd(:i:) :);                              
                                                                                
        if(leftadd < start){                                                    
            dif = start-leftadd;                                                
            memset(hexbuf,' ',2*dif);                                           
            memset(chrbuf,' ',dif);                                             
            printflag = GOPRINT;                                                
            sameflag = 0;                                                       
        }                                                                       
        if(leftadd > end-16){                                                   
            dif = 16-(end-leftadd);                                             
            memset(hexbuf+32-2*dif,' ',2*dif);                                  
            memset(chrbuf+16-dif,' ',dif);                                      
            printflag = GOPRINT;                                                
        }                                                                       
        if(leftadd == end-16)                                                   
            printflag = GOPRINT;                                                
                                                                                
        if(printflag == NOPRINT) continue;                                      
        else if(printflag == SAMEPRINT){                                        
            memcpy(hexbuf+8,"--SAME--",8);                                      
            memset(hexbuf+16,' ',16);                                           
            memset(chrbuf+4,' ',12);                                            
        }                                                                       
                                                                                
        memset(printline,' ',PRINTLEN);                                         
        printline(: PRINTLEN :) = NULL;                                         
        chexout(&leftadd,printline,4);                                          
        for(i = 0 ; i < 4 ; i++)                                                
            memcpy(printline+STARTHEX+9*i,hexbuf+8*i,8);                        
        memcpy(printline+STARTCHR,chrbuf,16);                                   
        printf("%s\n",printline);                                               
    }                                                                           
}                                                                               
