/*                                                                              
*CATALP CCFATAB                                                                 
                                                                                
  These routines do lookups of the FACPACK tables that contain infor-           
  mation on system names and numbers and program names and numbers.             
  There is also a routine that does a lookup of the language tables.            
*/                                                                              
                                                                                
#include <standard.h>                                                           
#include <stdio.h>                                                              
                                                                                
struct selistd{                                                                 
    char sysname(:7:);                                                          
    char sysnum;                                                                
    char sysovnum;                                                              
    char blank1(:15:);                                                          
    char proglist(:4:);                                                         
};                                                                              
                                                                                
struct proglistd{                                                               
    char progname(:7:);                                                         
    char blank1;                                                                
    char prognum;                                                               
};                                                                              
                                                                                
struct syslstd{                                                                 
    char sysovnum;                                                              
    char blank1;                                                                
    char longname(:7:);                                                         
    char shortname(:3:);                                                        
};                                                                              
                                                                                
struct langtabd{                                                                
    char langcode;                                                              
    char langovl1;                                                              
    char langovl2;                                                              
    char langflg1;                                                              
    char spare(:4:);                                                            
    char langshr(:3:);                                                          
    char langful(:13:);                                                         
    char langshrn(:3:);                                                         
    char langfuln(:13:);                                                        
};                                                                              
                                                                                
extern char selist(::);                /*from fatab*/                           
extern char syslst(::);                /*from fagetfact*/                       
                                                                                
char getsysnum(sysname)          /*get actual system number from*/              
char *sysname;                   /*actual system name e.g. 'SPOT3'*/            
{                                                                               
    struct selistd *septr;       /*used as a dsect pointing to selist*/         
    char *ptr;                   /*moves through table*/                        
    int inc;                     /*increment through table*/                    
    char *tabend;                /*end of table marker*/                        
                                                                                
    ptr = selist;                /*facility systems table*/                     
    inc = ptr(:1:);              /*first halfword contains l'tabentry*/         
    memcpy(&tabend,ptr+2,4);     /*next four bytes contain a'tabend*/           
                                                                                
    for(ptr += 6 ; ptr < tabend ; ptr += inc){                                  
        septr = (struct selistd *)ptr;                                          
        if(memcmp(septr->sysname,sysname,strlen(sysname)) == 0)                 
            break;                                                              
    }                                                                           
    if(ptr > tabend)             /*if match not found*/                         
        return(0);               /*return 0 for invalid*/                       
                                 /*match found*/                                
    return(septr->sysnum);       /*return system number*/                       
}                                                                               
                                                                                
char getsysovnum(sysname)        /*returns system overlay number*/              
char *sysname;                   /*for a given system name*/                    
{                                                                               
    struct syslstd *syptr;       /*used as a dsect pointing to syslst*/         
    char *ptr;                   /*moves through table*/                        
    int inc;                     /*increment through table*/                    
    char *tabend;                /*end of table marker*/                        
                                                                                
    ptr = syslst;                /*facility long-short syname table*/           
    inc = ptr(:1:);              /*first halfword contains l'tabentry*/         
    memcpy(&tabend,ptr+2,4);     /*next four bytes contain a'tabend*/           
                                                                                
    for(ptr += 6 ; ptr < tabend ; ptr += inc){                                  
        syptr = (struct syslstd *)ptr;                                          
        if(memcmp(syptr->longname,sysname,strlen(sysname)) == 0    ºº           
           memcmp(syptr->shortname,sysname,strlen(sysname)) == 0    )           
            break;                                                              
    }                                                                           
    if(ptr > tabend)             /*if match not found*/                         
        return(0);               /*return 0 for invalid*/                       
                                 /*match found*/                                
    return(syptr->sysovnum);     /*return system overlay number*/               
}                                                                               
                                                                                
char getprognum(sysovnum,progname)  /*get program number from system*/          
char sysovnum,*progname;            /*overlay number and program name*/         
{                                                                               
    struct selistd *septr;       /*used as a dsect pointing to selist*/         
    struct proglistd *prptr;     /*used as a dsect pointing to prglst*/         
    char *ptr;                   /*moves through table*/                        
    int inc;                     /*increment through table*/                    
    char *tabend;                /*end of table marker*/                        
                                                                                
    ptr = selist;                /*facility systems table*/                     
    inc = ptr(:1:);              /*first halfword contains l'tabentry*/         
    memcpy(&tabend,ptr+2,4);     /*next four bytes contain a'tabend*/           
                                                                                
    for(ptr += 6 ; ptr < tabend ; ptr += inc){                                  
        septr = (struct selistd *)ptr;                                          
        if(septr->sysovnum == sysovnum)                                         
            break;                                                              
    }                                                                           
    if(ptr > tabend)             /*if match not found*/                         
        return(0);               /*return 0 for invalid*/                       
                                                                                
                                 /*match found*/                                
    memcpy(&ptr,septr->proglist); /*point to begin of program table*/           
    inc = ptr(:1:);              /*first halfword contains l'tabentry*/         
    memcpy(&tabend,ptr+2,4);     /*next four bytes contain a'tabend*/           
                                                                                
    for(ptr += 6 ; ptr < tabend ; ptr += inc){                                  
        prptr = (struct proglistd *)ptr;                                        
        if(memcmp(prptr->progname,progname,strlen(progname)) == 0)              
            break;                                                              
    }                                                                           
    if(ptr > tabend)             /*if match not found*/                         
        return(0);               /*return 0 for invalid*/                       
                                 /*match found*/                                
    return(prptr->prognum);      /*return program number*/                      
}                                                                               
                                                                                
char *getlongname(sysovnum,longname)   /*finds long system name*/               
char sysovnum,*longname;         /*for a given system overlay numnber*/         
{                                                                               
    struct syslstd *syptr;       /*used as a dsect pointing to syslst*/         
    char *ptr;                   /*moves through table*/                        
    int inc;                     /*increment through table*/                    
    char *tabend;                /*end of table marker*/                        
                                                                                
    ptr = syslst;                /*facility long-short sysname table*/          
    inc = ptr(:1:);              /*first halfword contains l'tabentry*/         
    memcpy(&tabend,ptr+2,4);     /*next four bytes contain a'tabend*/           
                                                                                
    for(ptr += 6 ; ptr < tabend ; ptr += inc){                                  
        syptr = (struct syslstd *)ptr;                                          
        if(syptr->sysovnum == sysovnum)                                         
            break;                                                              
    }                                                                           
    if(ptr > tabend)                      /*if match not found*/                
        return(0);                        /*return 0 for invalid*/              
                                          /*match found*/                       
    memcpy(longname,syptr->longname,7);   /*copy in longname*/                  
    longname(:7:) = NULL;                 /*end of string marker*/              
    return(longname);                                                           
}                                                                               
                                                                                
char getlangcode(langname)       /*get language code number from*/              
char *langname;                  /*language name*/                              
{                                                                               
    struct langtabd *lptr;       /*used as a dsect pointing to langtab*/        
    char *ptr;                   /*moves through table*/                        
    int inc;                     /*increment through table*/                    
    char *tabend;                /*end of table marker*/                        
                                                                                
    ptr = selist;                /*facility systems table*/                     
    inc = ptr(:1:);              /*first halfword contains l'tabentry*/         
    memcpy(&tabend,ptr+2,4);     /*next four bytes contain a'tabend*/           
                                                                                
    for(ptr += 6 ; ptr < tabend ; ptr += inc){                                  
        lptr = (struct langtabd *)ptr;                                          
        if(memcmp(lptr->langshr,langname,strlen(langname)) == 0   ºº            
           memcmp(lptr->langful,langname,strlen(langname)) == 0   ºº            
           memcmp(lptr->langshrn,langname,strlen(langname)) == 0  ºº            
           memcmp(lptr->langfuln,langname,strlen(langname)) == 0  )             
            break;                                                              
    }                                                                           
    if(ptr > tabend)             /*if match not found*/                         
        return(0);               /*return 0 for invalid*/                       
                                 /*match found*/                                
    return(lptr->langcode);      /*return language code*/                       
}                                                                               
