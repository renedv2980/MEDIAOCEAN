*          DATA SET DDSHFIR    AT LEVEL 005 AS OF 01/22/21                      
***********************************************************************         
* SHFI ROUTINES - USE R0, R1, RE, AND RF                                        
*                                                                               
*   FIRSET   - SET A(RESOURCE TABLE) AND A(PART1) AND A(PART2) AREAS            
*                                                                               
*   FIRFLOCK - LOCK THE RESOURCE FILE                                           
*   FIRRLOCK - LOCK THE REPORT                                                  
*   FIR1LOCK - LOCK THE PART1 AVAILABLE QUEUE                                   
*   FIR2LOCK - LOCK THE PART2 AVAILABLE QUEUE                                   
*   FIRTLOCK - LOCK THE INDEX TREE                                              
*   FIRSLOCK - SHARED LOCK OF THE RESOURCE FILE                                 
*                                                                               
*   FIRFUNLK - UNLOCK THE RESOURCE FILE                                         
*   FIRRUNLK - UNLOCK THE REPORT                                                
*   FIR1UNLK - UNLOCK THE PART1 AVAILABLE QUEUE                                 
*   FIR2UNLK - UNLOCK THE PART2 AVAILABLE QUEUE                                 
*   FIRTUNLK - UNLOCK THE INDEX TREE                                            
*   FIRSUNLK - SHARED UNLOCK OF THE RESOURCE FILE                               
*                                                                               
*   FIRGET1  - GET A PART1 CI FROM THE AVAILABLE QUEUE                          
*   FIRGET2  - GET A PART2 CI FROM THE AVAILABLE QUEUE                          
*                                                                               
*   FIRADD1  - ADD A PART1 CI TO THE AVAILABLE QUEUE                            
*   FIRADD2  - ADD A PART2 CI TO THE AVAILABLE QUEUE                            
*                                                                               
*   FIRREM1  - REMOVE A PART1 CI FROM THE AVAILABLE QUEUE                       
*                                                                               
*   FIRGTN   - GET TREE NODE                                                    
*   FIRNTN   - GET NEXT TREE NODE                                               
*   FIRNSN   - GET NEXT SEQUENTIAL NODE                                         
*                                                                               
*   FIRITN   - INSERT A NODE INTO THE INDEX TREE                                
*                                                                               
*   FIRDTN   - DELETE A NODE FROM THE INDEX TREE                                
*                                                                               
*   FIRNC    - CONVERT A(NODE) TO A(CI) AND REPORT#                             
*   FIRCN    - CONVERT A(CI) TO A(NODE) AND REPORT#                             
*   FIRRC    - CONVERT REPORT# TO A(CI)                                         
*   FIRRN    - CONVERT REPORT# TO A(NODE)                                       
*   FIRFL    - CONVERT FIRST D/A OF CI TO LAST D/A OF CI                        
*                                                                               
*   FIRC1    - TEST IF A(CI) IS A PART1                                         
*   FIRN1    - TEST IF A(NODE) IS A PART1                                       
***********************************************************************         
                                                                                
*======================================================================         
* SET ADDRESSES FOR RESOURCE TABLE HEADER AND START OF PART1/2 AREAS            
*                                                                               
*     ON ENTRY - FIWSHA= A(SHARED MEMORY FILE INDEX HEADER)                     
*                FIWRES= RESOURCE FILE DDNAME                                   
*                                                                               
*     ON EXIT  - FIWRHA= A(RESOURCE TABLE HEADER)                               
*                FIWP1A= A(RESOURCE PART1 AREA)                                 
*                FIWP2A= A(RESOURCE PART2 AREA)                                 
*                CC EQUAL IF ADDRESSES SET                                      
*                CC NOT EQUAL IF RESOURCE NOT FOUND IN MEMORY                   
*======================================================================         
FIRSET   ST    RE,FIWSRE                                                        
*                                                                               
         L     RF,FIWSHA                                                        
         L     R0,SIHNOFR-SIHDR(,RF) # OF RESOURCES IN MEMORY                   
         LA    RF,L'SIHDR(,RF)                                                  
         ST    RF,FIWRHA           A(FIRST RESOURCE TABLE HEADER)               
*                                                                               
FIRSET1  CLC   FIWRES,SITFIL-SITAB(RF)                                          
         JE    FIRSET2             RESOURCE TABLE HEADER FOUND                  
         LA    RF,L'SITAB(,RF)                                                  
         BRCT  R0,FIRSET1          NEXT                                         
         J     FIRXH               UNKNOWN RESOURCE                             
*                                                                               
FIRSET2  ST    RF,FIWRHA           A(RESOURCE TABLE HEADER)                     
*                                                                               
         L     R0,SITP1ST-SITAB(,RF)                                            
         A     R0,FIWSHA                                                        
         ST    R0,FIWP1A           A(RESOURCE PART1 AREA)                       
*                                                                               
         L     R0,SITP2ST-SITAB(,RF)                                            
         A     R0,FIWSHA                                                        
         ST    R0,FIWP2A           A(RESOURCE PART2 AREA)                       
*                                                                               
         J     FIRXE               EXIT EQUAL                                   
*                                                                               
*======================================================================         
* GET THE NEXT AVAILABLE PART1 CI AND TREE NODE                                 
*                                                                               
*     ON ENTRY - FIWSHA= A(SHARED MEMORY FILE INDEX HEADER)                     
*                FIWRHA= A(RESOURCE HEADER)                                     
*                FIWP1A= A(RESOURCE PART1 AREA)                                 
*                FIWP2A= A(RESOURCE PART2 AREA)                                 
*                                                                               
*     ON EXIT  - FIWNDA= A(PART1 NODE)                                          
*                CC EQUAL IF PART1 SUCCESSFULLY SECURED                         
*                CC NOT EQUAL IF NO AVAILABLE PART1S                            
*======================================================================         
FIRGET1  ST    RE,FIWSRE                                                        
         L     RF,FIWRHA           RF= A(RESOURCE TABLE HEADER)                 
         USING SITABD,RF                                                        
         XC    FIWNDA,FIWNDA                                                    
*                                                                               
         ICM   R0,15,SITP1HD       IS THERE A PART1 AVAILABLE?                  
         JZ    FIRXH               . NO                                         
*                                                                               
FIRGET11 LR    R1,R0                                                            
         A     R1,FIWSHA           A(NODE FOR AVAILABLE PART1)                  
         USING SI1PARD,R1                                                       
         ICM   RE,15,SI1NAV        NEXT AVAILABLE AFTER THIS ONE                
         JZ    FIRXL               . NO, CAN'T TAKE LAST AVAILABLE              
*                                                                               
         CS    R0,RE,SITP1HD       SET THE NEW NEXT AVAILABLE                   
         JNE   FIRGET11            . SOMEONE ELSE GRABBED IT                    
*                                                                               
         XC    SI1NAV,SI1NAV       NO NEED TO POINT TO NEXT FROM HERE           
         ST    R1,FIWNDA           A(PART1 NODE)                                
*                                                                               
         L     R0,SITP1AV          REDUCE NUMBER OF AVAILABLE PART1S            
FIRGET12 LR    R1,R0                                                            
         BCTR  R1,0                                                             
         CS    R0,R1,SITP1AV                                                    
         JNE   FIRGET12                                                         
*                                                                               
         J     FIRXE               EXIT EQUAL                                   
         DROP  R1,RF                                                            
                                                                                
*======================================================================         
* GET THE NEXT AVAILABLE PART2 CI                                               
*                                                                               
*     ON ENTRY - FIWSHA= A(SHARED MEMORY FILE INDEX HEADER)                     
*                FIWRHA= A(RESOURCE HEADER)                                     
*                FIWP1A= A(RESOURCE PART1 AREA)                                 
*                FIWP2A= A(RESOURCE PART2 AREA)                                 
*                                                                               
*     ON EXIT  - FIWNDA= A(PART2 NODE)                                          
*                CC EQUAL IF PART2 SUCCESSFULLY SECURED                         
*                CC NOT EQUAL IF NO AVAILABLE PART2S                            
*======================================================================         
FIRGET2  ST    RE,FIWSRE                                                        
         L     RF,FIWRHA           RF= A(RESOURCE TABLE HEADER)                 
         USING SITABD,RF                                                        
         XC    FIWNDA,FIWNDA                                                    
*                                                                               
         ICM   R0,15,SITP2HD       IS THERE A PART2 AVAILABLE                   
         JZ    FIRXH               . NO                                         
*                                                                               
FIRGET21 LR    R1,R0                                                            
         A     R1,FIWSHA           A(NODE FOR AVAILABLE PART1)                  
         USING SI2PARD,R1                                                       
         ICM   RE,15,SI2NAV        NEXT AVAILABLE AFTER THIS ONE                
         JZ    FIRXL               . NO, CAN'T TAKE LAST AVAILABLE              
*                                                                               
         CS    R0,RE,SITP2HD       SET THE NEW NEXT AVAILABLE                   
         JNE   FIRGET21            . IT CHANGED, GET NEXT                       
*                                                                               
         XC    SI2NAV,SI2NAV       NO NEED TO POINT TO NEXT FROM HERE           
*                                                                               
         ST    R1,FIWNDA           A(PART2 NODE)                                
*                                                                               
         L     R0,SITP2AV          REDUCE NUMBER OF AVAILABLE PART2S            
FIRGET22 LR    R1,R0                                                            
         BCTR  R1,0                                                             
         CS    R0,R1,SITP2AV                                                    
         JNE   FIRGET22                                                         
*                                                                               
         J     FIRXE               EXIT EQUAL                                   
         DROP  R1,RF                                                            
                                                                                
*======================================================================         
* ADD PART1 TO AVAILABLE QUEUE                                                  
*                                                                               
*     ON ENTRY - FIWSHA= A(SHARED MEMORY FILE INDEX HEADER)                     
*                FIWRHA= A(RESOURCE HEADER)                                     
*                                                                               
*     ON EXIT  - CC EQUAL IF SUCCESSFULLY ADDED                                 
*                CC NOT EQUAL IF UNABLE TO ADD IT TO THE QUEUE                  
*======================================================================         
FIRADD1  ST    RE,FIWSRE                                                        
         L     RF,FIWRHA           RF= A(RESOURCE TABLE HEADER)                 
         USING SITABD,RF                                                        
*                                                                               
         L     RE,FIWNDA           A(NODE ADDING)                               
         S     RE,FIWSHA           DISPL FROM START OF SHARED MEMORY            
*                                                                               
FIRADD11 ICM   R0,15,SITP1TL       IS THERE A LAST AVAILABLE?                   
         JZ    FIRADD12            . UH OH, THEN UPDATE BOTH                    
*                                                                               
         LR    R1,R0                                                            
         A     R1,FIWSHA           A(CURRENT LAST AVAILABLE)                    
         USING SI1PARD,R1                                                       
*                                                                               
         CS    R0,RE,SITP1TL       SET THE NEW LAST AVAILABLE                   
         JNE   FIRADD11            . IT CHANGED, TRY AGAIN                      
*                                                                               
         ST    RE,SI1NAV           UPDATE OLD LAST W/ NEW LAST AS NEXT          
         J     FIRADD13                                                         
*                                                                               
FIRADD12 CS    R0,RE,SITP1TL       SET THE NEW LAST AVAILABLE                   
         JNE   FIRADD11            . IT CHANGED, TRY AGAIN                      
         ST    RE,SITP1HD          NEXT AVAILABLE AFTER THIS ONE                
*                                                                               
FIRADD13 L     R0,SITP1AV          INCREMENT # OF AVAILABLE PART1S              
FIRADD14 LR    R1,R0                                                            
         AHI   R1,1                                                             
         CS    R0,R1,SITP1AV                                                    
         JNE   FIRADD14                                                         
*                                                                               
         J     FIRXE               EXIT EQUAL                                   
         DROP  R1,RF                                                            
                                                                                
*======================================================================         
* ADD PART2 TO AVAILABLE QUEUE                                                  
*                                                                               
*     ON ENTRY - FIWSHA= A(SHARED MEMORY FILE INDEX HEADER)                     
*                FIWRHA= A(RESOURCE HEADER)                                     
*                                                                               
*     ON EXIT  - FIWCIA= A(NEXT AVAILABLE PART2 CI)                             
*                CC EQUAL IF PART2 SUCCESSFULLY SECURED                         
*                CC NOT EQUAL IF NO AVAILABLE PART2S                            
*======================================================================         
FIRADD2  ST    RE,FIWSRE                                                        
         L     RF,FIWRHA           RF= A(RESOURCE TABLE HEADER)                 
         USING SITABD,RF                                                        
*                                                                               
         L     RE,FIWNDA           A(NODE ADDING)                               
         S     RE,FIWSHA           DISPL INTO SHARED MEMORY                     
*                                                                               
FIRADD21 ICM   R0,15,SITP2TL       IS THERE A LAST AVAILABLE?                   
         JZ    FIRADD22            . NO                                         
*                                                                               
         LR    R1,R0                                                            
         A     R1,FIWSHA           A(NODE FOR AVAILABLE PART2)                  
         USING SI2PARD,R1                                                       
*                                                                               
         CS    R0,RE,SITP2TL       SET THE NEW LAST AVAILABLE                   
         JNE   FIRADD21            . IT CHANGED, TRY AGAIN                      
*                                                                               
         ST    RE,SI2NAV           UPDATE OLD LAST W/ NEW LAST AS NEXT          
         J     FIRADD23                                                         
*                                                                               
FIRADD22 CS    R0,RE,SITP2TL       SET THE NEW LAST AVAILABLE                   
         JNE   FIRADD21            . IT CHANGED, TRY AGAIN                      
         ST    RE,SITP2HD          NEXT AVAILABLE AFTER THIS ONE                
*                                                                               
FIRADD23 L     R0,SITP2AV          INCREMENT # OF AVAILABLE PART2S              
FIRADD24 LR    R1,R0                                                            
         AHI   R1,1                                                             
         CS    R0,R1,SITP2AV                                                    
         JNE   FIRADD24                                                         
*                                                                               
         J     FIRXE               EXIT EQUAL                                   
         DROP  R1,RF                                                            
                                                                                
*======================================================================         
* REMOVE A GIVEN PART1 CI FROM AVAILABE QUEUE                                   
*                                                                               
*     ON ENTRY - FIWSHA= A(SHARED MEMORY FILE INDEX HEADER)                     
*                FIWRHA= A(RESOURCE HEADER)                                     
*                FIWP1A= A(RESOURCE PART1 AREA)                                 
*                FIWP2A= A(RESOURCE PART2 AREA)                                 
*                FIWNDA= A(PART1 NODE)                                          
*                                                                               
*     ON EXIT  - CC EQUAL IF PART1 SUCCESSFULLY REMOVED                         
*                CC NOT EQUAL IF PART1 NOT AVAILABLE                            
*======================================================================         
FIRREM1  ST    RE,FIWSRE                                                        
         L     RF,FIWRHA           RF= A(RESOURCE TABLE HEADER)                 
         USING SITABD,RF                                                        
*                                                                               
         ICM   R0,15,SITP1HD       IS THERE A PART1 AVAILABLE?                  
         JZ    FIRXH               . NO                                         
         XR    RE,RE               RE = PREVIOUS NODE                           
*                                                                               
         USING SI1PARD,R1                                                       
FIRREM11 LR    R1,R0                                                            
         A     R1,FIWSHA           A(NODE FOR AVAILABLE PART1)                  
*                                                                               
         C     R1,FIWNDA           IS THIS THE NODE WE WANT?                    
         JE    FIRREM12            . NO, GET NEXT                               
         LR    RE,R1               HOLD A(PREVIOUS NODE) IN RE                  
*                                                                               
         ICM   R0,15,SI1NAV        NEXT AVAILABLE AFTER THIS ONE                
         JZ    FIRXL               . NO MORE AVAILABLE                          
         J     FIRREM11                                                         
                                                                                
FIRREM12 LTR   RE,RE               IS THIS THE HEAD NODE?                       
         JNZ   FIRREM13            NO                                           
         MVC   SITP1HD,SI1NAV                                                   
         J     FIRREM14                                                         
*                                                                               
PREV     USING SI1PARD,RE                                                       
FIRREM13 MVC   PREV.SI1NAV,SI1NAV  SET PREVIOUS TO SKIP THIS NODE               
         DROP  PREV                                                             
*                                                                               
FIRREM14 XC    SI1NAV,SI1NAV       REMOVING FROM QUEUE, CLEAR NEXT              
*                                                                               
         L     R0,SITP1AV          REDUCE NUMBER OF AVAILABLE PART1S            
FIRREM15 LR    R1,R0                                                            
         BCTR  R1,0                                                             
         CS    R0,R1,SITP1AV                                                    
         JNE   FIRREM15                                                         
*                                                                               
         J     FIRXE               EXIT EQUAL                                   
         DROP  R1,RF                                                            
                                                                                
*======================================================================         
* GET THE NEXT NODE IN THE INDEX TREE (FIRNTN) NEXT TREE NODE                   
* GET THE NODE OF THE INDEX PASSED    (FIRGTN) GET TREE NODE                    
*                                                                               
*     ON ENTRY - FIWSHA= A(SHARED MEMORY FILE INDEX HEADER)                     
*                FIWRHA= A(RESOURCE HEADER)                                     
*                FIWNDX= INDEX                                                  
*                                                                               
*     ON EXIT  - FIWNDA= A(NEXT NODE IN TREE) OR ZERO FOR END OF TREE           
*                CC EQUAL IF RETURNING THIS OR NEXT NODE                        
*                CC NOT LOW IF LOOKING FOR A THIS AND RETURNING NEXT            
*                CC NOT HIGH IF END OF TREE FOUND                               
*======================================================================         
FIRGTN   NI    FIWFLG,X'FF'-FIWFNXT  GET THIS NODE                              
         J     *+8                                                              
FIRNTN   OI    FIWFLG,FIWFNXT      GET NEXT NODE                                
         ST    RE,FIWSRE                                                        
         ST    R2,FIWSR2                                                        
*                                                                               
         XC    FIWNDA,FIWNDA       CLEAR RESULT NODE                            
*                                                                               
         L     RF,FIWRHA           A(RESOURCE HEADER)                           
         USING SITABD,RF                                                        
*                                                                               
         L     R2,SIT1CIC          MAXIMUM NUMBER OF NODES TO CHECK             
         AHI   R2,100              WITH A CUSHION OF 100                        
         MVC   FIWXKL,SITXKL       LENGTH OF KEY                                
         MVC   FIWXRL,SITXRL       LENGTH OF REFERENCE #                        
*                                                                               
         ICM   R1,15,SITTREE       GET HEAD OF TREE                             
         JZ    FIRXL2              NO HEAD, END OF LIST                         
         DROP  RF                                                               
*                                                                               
         A     R1,FIWSHA           R1= A(CURRENT SEARCH NODE)                   
         USING SI1PARD,R1                                                       
*                                                                               
FIRGTN1  BRCT  R2,*+8              AVOID INFINITE LOOP                          
         J     FIRPOST             PROBLEMS, POST REBUILD                       
*                                                                               
         LLC   RF,FIWXKL           LENGTH OF THE INDEX KEY                      
*                                                                               
         TM    FIWFLG,FIWFNXT      GET NEXT NODE?                               
         JO    FIRGTN2             COMPARE WHOLE KEY, W/ SEQUENCE               
*                                                                               
         ST    R3,FIWSR3           SAVE R3 FOR TEMPORORY USE                    
         LA    R3,FIWNDX           POINT TO INDEX                               
         AR    R3,RF               BUMP PAST KEY                                
         LLC   RF,FIWXRL           LENGTH OF REFERENCE #                        
         SR    R3,RF               BACK UP TO REFERENCE #                       
         AHI   RF,-1               MINUS ONE FOR EXECUTED OC                    
         EXRL  RF,FIREXOC                                                       
         J     *+10                                                             
FIREXOC  OC    0(0,R3),0(R3)       IS THERE A SEQUENCE NUMBER GIVEN?            
         JZ    *+10                                                             
         XR    R3,R3               YES: USE IT, KEEP FULL LENGTH                
         J     *+10                                                             
         LLC   R3,FIWXRL           NO: TAKE REF# LENGTH FROM KEY LENGTH         
         LLC   RF,FIWXKL                                                        
         SR    RF,R3                                                            
         L     R3,FIWSR3           DONE WITH R3, RESTORE IT                     
*                                                                               
FIRGTN2  AHI   RF,-1               MINUS ONE FOR EXECUTED COMPARE               
         EXRL  RF,FIRCLC2                                                       
         J     *+10                                                             
FIRCLC2  CLC   FIWNDX(0),SI1NDX    COMPARE DESIRED KEY WITH CURRENT             
         JL    FIRGTN4             DESIRED KEY IS LOWER THAN CURRENT            
         JH    FIRGTN5             DESIRED KEY IS HIGHER THAN CURRENT           
*                                                                               
         TM    FIWFLG,FIWFNXT      ARE WE LOOKING FOR NEXT ONE?                 
         JO    FIRGTN5             YES, GET NEXT                                
         ST    R1,FIWNDA           NO, THIS IS THE ONE                          
         J     FIRXE2                                                           
*                                                                               
FIRGTN4  ST    R1,FIWNDA           SET A(POTENTIAL RESULT NODE)                 
         ICM   RF,15,SI1LTP        ANY LEFT (LOWER) NODE?                       
         JZ    FIRGTN6             NO, THAN RETURN THIS ONE                     
         A     RF,FIWSHA           A(LEFT NODE)                                 
         LR    R1,RF               SET CURRENT NODE                             
         J     FIRGTN1                                                          
*                                                                               
FIRGTN5  ICM   RF,15,SI1RTP        ANY RIGHT (HIGHER) NODE?                     
         JZ    FIRGTN6             NO, POTENTIAL RESULT IS OFFICIAL             
         A     RF,FIWSHA           A(RIGHT NODE)                                
         LR    R1,RF               SET CURRENT NODE                             
         J     FIRGTN1                                                          
*                                                                               
FIRGTN6  OC    FIWNDA,FIWNDA       WAS A NODE FOUND?                            
         JZ    FIRXH2              NO, EXIT HIGH                                
         TM    FIWFLG,FIWFNXT      WERE WE LOOKING FOR THE NEXT?                
         JO    FIRXE2              YES, EXIT EQUAL                              
         J     FIRXL2              NO, EXIT LOW, RETURNING NEXT                 
         DROP  R1                                                               
                                                                                
*======================================================================         
* GET NEXT SEQUENTIAL PART1 NODE IN INDEX                                       
*                                                                               
*     ON ENTRY - FIWSHA= A(SHARED MEMORY FILE INDEX HEADER)                     
*                FIWRHA= A(RESOURCE HEADER)                                     
*                FIWNDA= A(CURRENT NODE)                                        
*                                                                               
*     ON EXIT  - FIWNDA= A(NEXT NODE IN INDEX)                                  
*                CC EQUAL IF RETURNING THIS OR NEXT NODE                        
*                CC NOT EQUAL IF END OF INDEX                                   
*======================================================================         
FIRNSN   ST    RE,FIWSRE                                                        
         L     RF,FIWRHA           RF= A(RESOURCE TABLE HEADER)                 
         USING SITABD,RF                                                        
*                                                                               
         L     R1,FIWNDA                                                        
         AHI   R1,L'SI1PAR                                                      
         ST    R1,FIWNDA           BUMP TO NEXT NODE                            
*                                                                               
         S     R1,FIWSHA                                                        
         C     R1,SITP2ST          DID WE REACH THE END?                        
         JL    FIRXE               NO, RETURN EQUAL                             
         J     FIRXH                                                            
         DROP  RF                                                               
                                                                                
*======================================================================         
* GET NEXT SEQUENTIAL PART2 NODE IN INDEX                                       
*                                                                               
*     ON ENTRY - FIWSHA= A(SHARED MEMORY FILE INDEX HEADER)                     
*                FIWRHA= A(RESOURCE HEADER)                                     
*                FIWNDA= A(CURRENT NODE)                                        
*                                                                               
*     ON EXIT  - FIWNDA= A(NEXT NODE IN INDEX)                                  
*                CC EQUAL IF RETURNING THIS OR NEXT NODE                        
*                CC NOT EQUAL IF END OF INDEX                                   
*======================================================================         
FIRNSN2  ST    RE,FIWSRE                                                        
         L     RF,FIWRHA           RF= A(RESOURCE TABLE HEADER)                 
         USING SITABD,RF                                                        
*                                                                               
         L     R1,FIWNDA                                                        
         AHI   R1,L'SI2PAR                                                      
         ST    R1,FIWNDA           BUMP TO NEXT NODE                            
*                                                                               
         S     R1,FIWP1A                                                        
         C     R1,SITSIZE          DID WE REACH THE END?                        
         JL    FIRXE               NO, RETURN EQUAL                             
         J     FIRXH                                                            
         DROP  RF                                                               
                                                                                
*======================================================================         
* INSERT A NODE INTO THE INDEX TREE                                             
*                                                                               
*     ON ENTRY - FIWSHA= A(SHARED MEMORY FILE INDEX HEADER)                     
*                FIWRHA= A(RESOURCE HEADER)                                     
*                FIWNDA= A(NODE TO ADD)                                         
*                                                                               
*     ON EXIT  - CC EQUAL IF NODE ADDED SUCCESSFULLY                            
*                CC LOW IF DUPLICATE KEY ON ADD                                 
*                CC HIGH IF MISSING INSERT NODE                                 
*======================================================================         
FIRITN   ST    RE,FIWSRE                                                        
         ST    R2,FIWSR2                                                        
*                                                                               
I        USING SI1PARD,RE                                                       
         ICM   RE,15,FIWNDA        RE= A(NODE TO BE INSERTED)                   
         JZ    FIRXH2              MISSING NODE                                 
*                                                                               
         L     RF,FIWRHA                                                        
         USING SITABD,RF                                                        
*                                                                               
         L     R2,SIT1CIC          MAXIMUM NUMBER OF NODES TO CHECK             
         AHI   R2,100              WITH A CUSHION OF 100                        
         MVC   FIWXKL,SITXKL       INDEX KEY LENGTH                             
*                                                                               
         ICM   R1,15,SITTREE       IS THERE A HEAD?                             
         JNZ   FIRITN1             YES, FIND POSITION FOR INSERT                
         S     RE,FIWSHA           SUBTRACT A(HEADER) FOR DISPLACEMENT          
         ST    RE,SITTREE          STORE INSERT AS THE TREE HEAD                
         J     FIRXE2                                                           
         DROP  RF                                                               
*                                                                               
C        USING SI1PARD,R1                                                       
FIRITN1  A     R1,FIWSHA           R1= A(CURRENT NODE)                          
*                                                                               
FIRITN2  BRCT  R2,*+8              AVOID INFINITE LOOP                          
         J     FIRPOST             PROBLEMS, POST REBUILD                       
*                                                                               
         LLC   RF,FIWXKL           INDEX KEY LENGTH                             
         AHI   RF,-1               MINUS ONE FOR EXECUTE                        
         EXRL  RF,FIRICLC                                                       
         J     *+10                                                             
FIRICLC  CLC   I.SI1NDX(0),C.SI1NDX INSERT NODE LOWER OR HIGHER?                
         JL    FIRITN3             LOWER, CHECK LEFT BRANCH                     
         JH    FIRITN4             HIGHER, CHECK RIGHT BRANCH                   
         J     FIRXL2              DUPLICATE NODE                               
*                                                                               
FIRITN3  ICM   RF,15,C.SI1LTP      IS THERE A LEFT BRANCH                       
         JNZ   FIRITN5             YES, THEN KEEP SEARCHING                     
         LR    R0,RE               RE= A(NODE TO INSERT)                        
         S     R0,FIWSHA           SUBTRACT A(HEADER) FOR DISPLACEMENT          
         ST    R0,C.SI1LTP         STORE AS LEFT BRANCH                         
         LR    R0,R1               R1= A(CURRENT NODE)                          
         S     R0,FIWSHA           DISPL TO CURRENT NODE IN MEMORY              
         ST    R0,I.SI1PTP         POINT INSERTED NODE BACK UP THE TREE         
         J     FIRXE2                                                           
*                                                                               
FIRITN4  ICM   RF,15,C.SI1RTP      IS THERE A RIGHT BRANCH                      
         JNZ   FIRITN5             YES, THEN KEEP SEARCHING                     
         LR    R0,RE               RF= A(NODE TO INSERT)                        
         S     R0,FIWSHA           SUBTRACT A(HEADER) FOR DISPLACEMENT          
         ST    R0,C.SI1RTP         STORE AS RIGHT BRANCH                        
         LR    R0,R1               R1= A(CURRENT NODE)                          
         S     R0,FIWSHA           DISPL TO CURRENT NODE IN MEMORY              
         ST    R0,I.SI1PTP         POINT INSERTED NODE BACK UP THE TREE         
         J     FIRXE2                                                           
*                                                                               
FIRITN5  LR    R1,RF               NEXT NODE TO CHECK                           
         A     R1,FIWSHA           A(NEXT NODE TO CHECK)                        
         J     FIRITN2                                                          
         DROP  I,C                                                              
                                                                                
*======================================================================         
* DELETE A NODE FROM THE INDEX TREE                                             
*                                                                               
*     ON ENTRY - FIWSHA= A(SHARED MEMORY FILE INDEX HEADER)                     
*                FIWRHA= A(RESOURCE HEADER)                                     
*                FIWNDA= A(NODE TO REMOVE)                                      
*                                                                               
*     ON EXIT  - CC EQUAL IF NODE REMOVED SUCCESSFULLY                          
*                CC NOT EQUAL IF MISSING DELETE NODE                            
*======================================================================         
FIRDTN   ST    RE,FIWSRE                                                        
         XC    FIWNDS,FIWNDS       CLEAR SAVED A(NODE)                          
*                                                                               
D        USING SI1PARD,RE                                                       
         ICM   RE,15,FIWNDA        RE= A(NODE TO BE REMOVED)                    
         JZ    FIRXH               . MISSING NODE                               
*                                                                               
         ICM   RF,15,D.SI1RTP      ANY RIGHT CHILD?                             
         JNZ   FIRDTN3                                                          
         ICM   RF,15,D.SI1LTP      ANY LEFT CHILD?                              
         JNZ   FIRDTN4                                                          
         ICM   R1,15,D.SI1PTP      ANY PARENT?                                  
         JNZ   FIRDTN1                                                          
*                                                                               
         L     R1,FIWRHA                                                        
         USING SITABD,R1                                                        
         L     R0,SITTREE          PARENT MUST BE ROOT                          
         A     R0,FIWSHA                                                        
         CR    R0,RE               DOES THE ROOT POINT TO DELETE NODE?          
         JNE   FIRXH               . NO, IT'S NOT THERE, HUH, ERROR             
         XC    SITTREE,SITTREE     DELETE NODE BY CLEARING ROOT                 
         J     FIRXE                                                            
         DROP  R1                                                               
*                                                                               
PA       USING SI1PARD,R1                                                       
FIRDTN1  A     R1,FIWSHA           R1= A(PARENT NODE)                           
         XC    D.SI1PTP,D.SI1PTP   CLEAR PARENT NODE POINTER                    
         S     RE,FIWSHA                                                        
         C     RE,PA.SI1LTP        WAS THIS NODE THE PARENT'S LEFT?             
         JNE   FIRDTN2                                                          
         XC    PA.SI1LTP,PA.SI1LTP . YES, CLEAR THE PARENT'S LEFT               
         J     FIRDTN9                                                          
FIRDTN2  XC    PA.SI1RTP,PA.SI1RTP . NO, CLEAR THE PARENT'S RIGHT               
         J     FIRDTN9                                                          
*                                                                               
N        USING SI1PARD,RF                                                       
FIRDTN3  ICM   R0,15,D.SI1LTP                                                   
         JNZ   FIRDTN8             NODE REMOVING HAS LEFT AND RIGHT             
         A     RF,FIWSHA           RF= A(REPLACEMENT NODE)                      
         MVC   N.SI1PTP,D.SI1PTP                                                
         XC    D.SI1PTP,D.SI1PTP   CLEAR PARENT NODE POINTER                    
         XC    D.SI1RTP,D.SI1RTP   CLEAR RIGHT NODE POINTER                     
         J     FIRDTN5                                                          
*                                                                               
FIRDTN4  A     RF,FIWSHA           RF= A(REPLACEMENT NODE)                      
         MVC   N.SI1PTP,D.SI1PTP   NEW GETS DELETE NODE'S PARENT                
         XC    D.SI1PTP,D.SI1PTP   CLEAR PARENT NODE POINTER                    
         XC    D.SI1LTP,D.SI1LTP   CLEAR LEFT NODE POINTER                      
         XC    D.SI1RTP,D.SI1RTP   CLEAR RIGHT NODE POINTER                     
         DROP  PA                                                               
*                                                                               
FIRDTN5  ICM   R1,15,N.SI1PTP      DOES THE NEW NODE HAVE A PARENT?             
         JNZ   FIRDTN6             . YES                                        
         L     R1,FIWRHA           A(RESOURCE HEADER)                           
         USING SITABD,R1                                                        
         S     RF,FIWSHA                                                        
         ST    RF,SITTREE          UPDATE TREE ROOT                             
         J     FIRDTN9                                                          
         DROP  R1                                                               
*                                                                               
PA       USING SI1PARD,R1                                                       
FIRDTN6  A     R1,FIWSHA           R1= A(PARENT NODE)                           
         S     RE,FIWSHA           RE= DISPL TO OLD NODE                        
         S     RF,FIWSHA           RF= DISPL TO REPLACEMENT NODE                
         C     RE,PA.SI1LTP        WAS OLD NODE THE PARENT'S LEFT?              
         JNE   FIRDTN7                                                          
         ST    RF,PA.SI1LTP        . YES, STORE NEW AS PARENT'S LEFT            
         J     FIRDTN9                                                          
FIRDTN7  ST    RF,PA.SI1RTP        . NO, STORE NEW AS PARENT'S RIGHT            
         J     FIRDTN9                                                          
*                                                                               
FIRDTN8  ST    RE,FIWNDS           SAVE A(NODE BEING REMOVED)                   
*                                                                               
         MVC   FIWNDX,D.SI1NDX     SET KEY                                      
         MVC   FIWSRX,FIWSRE       SAVE THE SAVED RE                            
         BRAS  RE,FIRNTN           GET NEXT NODE IN ORDER                       
         MVC   FIWSRE,FIWSRX       RESTORE SAVED RE                             
         JNE   FIRXH               . SHOULD NEVER COME BACK W/ NOTHING          
         L     RE,FIWNDS           RE= A(NODE BEING DELETED)                    
         L     RF,FIWNDA           RF= A(NODE TAKING ITS PLACE)                 
*                                                                               
         L     R1,N.SI1PTP         PARENT OF REPLACEMENT NODE                   
         A     R1,FIWSHA           A(PARENT OF REPLACEMENT NODE)                
         CR    RE,R1               IS REPLACEMENT'S PARENT THE DELETE?          
         JNE   FIRDTN81            . NO                                         
*                                                                               
         MVC   N.SI1LTP,D.SI1LTP   REPLACE LEFT CHILD W/DELETE NODE'S           
         ICM   R1,15,N.SI1LTP      GET LEFT CHILD                               
         JNZ   FIRDTN80            . ADJUST IT'S PARENT                         
         S     RF,FIWSHA           GET TO DISPLACEMENT                          
         J     FIRDTN4                                                          
*                                                                               
FIRDTN80 A     R1,FIWSHA                                                        
         S     RF,FIWSHA           GET TO DISPL                                 
         ST    RF,PA.SI1PTP        IT'S PARENT IS NOW REPLACEMENT NODE          
         J     FIRDTN4                                                          
*                                                                               
FIRDTN81 MVC   PA.SI1LTP,N.SI1RTP  PARENT'S LEFT NOW REPLACEMENTS RIGHT         
         MVC   N.SI1LTP,D.SI1LTP   REPLACE LEFT CHILD W/DELETE NODE'S           
         MVC   N.SI1RTP,D.SI1RTP   REPLACE RIGHT CHILD W/DELETE NODE'S          
*                                                                               
         ST    R2,FIWSR2                                                        
*                                                                               
F        USING SI1PARD,R2                                                       
         ICM   R2,15,PA.SI1LTP     FIX REPLACEMENT'S OLD PARENT'S LEFT          
         JZ    FIRDTN82            CHILD'S PARENT (OH BOY)                      
         A     R2,FIWSHA                                                        
         S     R1,FIWSHA           DISPLACEMENT TO REP'S OLD PARENT             
         ST    R1,F.SI1PTP         IS NOW REPLACEMENT'S OLD PARENT              
*                                                                               
FIRDTN82 ICM   R2,15,N.SI1LTP      FIX PARENT OF REPLACEMENT'S LEFT             
         JZ    FIRDTN83            CHILD                                        
         A     R2,FIWSHA                                                        
         S     RF,FIWSHA                                                        
         ST    RF,F.SI1PTP                                                      
         A     RF,FIWSHA                                                        
*                                                                               
FIRDTN83 ICM   R2,15,N.SI1RTP      FIX PARENT OF REPLACEMENT'S RIGHT            
         JZ    FIRDTN84            CHILD                                        
         A     R2,FIWSHA                                                        
         S     RF,FIWSHA                                                        
         ST    RF,F.SI1PTP                                                      
         A     RF,FIWSHA                                                        
*                                                                               
FIRDTN84 L     R2,FIWSR2           RESTORE R2                                   
*                                                                               
         S     RF,FIWSHA           GET DISPLACEMENT                             
         J     FIRDTN4                                                          
*                                                                               
FIRDTN9  OC    FIWNDS,FIWNDS       DID WE NEED TO SAVE A(REMOVED NODE)          
         JZ    FIRXE               . NO                                         
         MVC   FIWNDA,FIWNDS       . YES, RESTORE IT IN FIWNDA                  
         J     FIRXE                                                            
         DROP  F,D,PA,N                                                         
                                                                                
*======================================================================         
* ENQUEUE/DEQUEUE RESOURCE/REPORT/TREE/PART1 QUEUE/PART2 QUEUE                  
*     ON ENTRY - FIWRES= RESOURCE NAME                                          
*                FIWREF= REPORT REFERENCE # (IF A REPORT LOCK)                  
*======================================================================         
FIRFLOCK MVI   FIWP3,X'FF'         RESOURCE FILE EXCLUSIVE LOCK                 
         J     FIRENQ                                                           
FIRFUNLK MVI   FIWP3,X'FF'         RESOURCE FILE UNLOCK                         
         J     FIRDEQ                                                           
*                                                                               
FIRTLOCK MVI   FIWP3,X'FE'         INDEX TREE EXCLUSIVE LOCK                    
         J     FIRENQ                                                           
FIRTUNLK MVI   FIWP3,X'FE'         INDEX TREE UNLOCK                            
         J     FIRDEQ                                                           
*                                                                               
FIR1LOCK MVI   FIWP3,X'FD'         PART1 QUEUE EXCLUSIVE LOCK                   
         J     FIRENQ                                                           
FIR1UNLK MVI   FIWP3,X'FD'         PART1 QUEUE UNLOCK                           
         J     FIRDEQ                                                           
*                                                                               
FIR2LOCK MVI   FIWP3,X'FC'         PART2 QUEUE EXCLUSIVE LOCK                   
         J     FIRENQ                                                           
FIR2UNLK MVI   FIWP3,X'FC'         PART2 QUEUE UNLOCK                           
         J     FIRDEQ                                                           
*                                                                               
FIRSLOCK MVI   FIWP3,X'EF'         RESOURCE FILE SHARED LOCK                    
         J     FIRENQ                                                           
FIRSUNLK MVI   FIWP3,X'EF'         RESOURCE FILE SHARE UNLOCK                   
         J     FIRDEQ                                                           
*                                                                               
FIRRLOCK MVC   FIWP3,FIWREF        REPORT EXCLUSIVE LOCK                        
         J     FIRENQ                                                           
FIRRUNLK MVC   FIWP3,FIWREF        REPORT UNLOCK                                
         J     FIRDEQ                                                           
*                                                                               
FIRENQ   LHI   R0,C'E'             ENQUEUE                                      
         J     *+8                                                              
FIRDEQ   LHI   R0,C'D'             DEQUEUE                                      
         ST    R0,FIWP1                                                         
*                                                                               
         ST    RE,FIWSRE                                                        
*                                                                               
         TM    FIWFLG,FIWFNOL      SKIP ALL LOCKING?                            
         JO    FIRXE               . YES                                        
*                                                                               
         TM    FIWFLG,FIWFNRL      SKIP REPORT LOCKING?                         
         JZ    FIREDQ              . NO, THEN LOCK                              
         CLI   FIWP3,0             . YES, IS THIS A REPORT LOCK                 
         JE    FIRXE                      . YES, SKIP                           
*                                                                               
FIREDQ   GOTO1 FIWENQ,FIWP1,,FIWRES                                             
         CLI   FIWP3,0                                                          
         JNE   FIRXH                                                            
         J     FIRXE                                                            
                                                                                
*======================================================================         
* CONVERT A(NODE) TO A(CI)                                                      
*======================================================================         
         USING SITABD,RF                                                        
FIRNC    ST    RE,FIWSRE                                                        
         L     RF,FIWRHA           RF= A(RESOURCE TABLE HEADER)                 
         XR    R0,R0                                                            
         L     R1,FIWNDA                                                        
         L     RE,FIWP2A           RF= A(START OF PART2 AREA)                   
         CR    R1,RE               IS THIS A PART2?                             
         JNL   FIRNC2              . YES                                        
         L     RE,FIWP1A           . NO, RF= A(START OF PART1 AREA)             
         SR    R1,RE                                                            
         JZ    FIRNC1                                                           
         LHI   RE,L'SI1PAR         LENGTH OF PART1 NODE                         
         DR    R0,RE                                                            
FIRNC1   A     R1,SITXCIC          SKIP PAST INDEX FOR REPORT#                  
         ST    R1,FIWREF           REPORT NUMBER                                
         S     R1,SITXCIC          GET BACK TO DISPL                            
         L     RE,SIT1TPT          NUMBER OF TRACKS PER PART1 CI                
         MLR   R0,RE               CI NUMBER FOR DESIRED REPORT                 
         AL    R1,SIT1STT          PLUS THE STARTING TRACK                      
         J     FIRNC4                                                           
FIRNC2   SR    R1,RE                                                            
         JZ    FIRNC3                                                           
         LHI   RE,L'SI2PAR         LENGTH OF A PART2 NODE                       
         DR    R0,RE                                                            
         L     RE,SIT2TPT          NUMBER OF TRACKS PER PART2 CI                
         MLR   R0,RE               CI NUMBER FOR DESIRED PART2                  
FIRNC3   AL    R1,SIT2STT          PLUS THE STARTING TRACK                      
FIRNC4   ST    R1,FIWCIA           A(CI)                                        
         J     FIRXE                                                            
         DROP  RF                                                               
                                                                                
*======================================================================         
* CONVERT A(CI) TO A(NODE)                                                      
*======================================================================         
         USING SITABD,RF                                                        
FIRCN    ST    RE,FIWSRE                                                        
         L     RF,FIWRHA           RF= A(RESOURCE TABLE HEADER)                 
         XR    R0,R0                                                            
         L     R1,FIWCIA           A(CI)                                        
         NILL  GR1,X'F000'         R1 ISOLATE TRACK                             
         L     RE,SIT2STT          PART2 STARTING TRACK                         
         NILL  GRE,X'F000'         RE ISOLATE TRACK                             
         CLR   R1,RE               IS THIS A PART2?                             
         JNL   FIRCN2              . YES                                        
         L     RE,SIT1STT          PART1 STARTING TRACK                         
         NILL  GRE,X'F000'         RE ISOLATE TRACK                             
         SLR   R1,RE                                                            
         JZ    FIRCN1                                                           
         L     RE,SIT1TPT          NUMBER OF TRACKS PER PART1 CI                
         DLR   R0,RE               DIVIDE BY NUMBER OF TRACKS PER CI            
FIRCN1   A     R1,SITXCIC          SKIP PAST INDEX FOR REPORT#                  
         ST    R1,FIWREF           SAVE REPORT REFERENCE #                      
         S     R1,SITXCIC                                                       
         MHI   R1,L'SI1PAR         MULTIPLY BY LENGTH OF NODE FOR DISP          
         A     R1,FIWP1A           ADD A(START OF PART1 NODES)                  
         J     FIRCN4                                                           
FIRCN2   SLR   R1,RE               SUBTRACT FOR PART2 SLOT DISPL                
         JZ    FIRCN3              . ZERO, NO NEED FOR THE MATH                 
         L     RE,SIT2TPT          NUMBER OF TRACKS PER PART2 CI                
         DLR   R0,RE               DIVIDE BY NUMBER OF TRACKS PER CI            
         MHI   R1,L'SI2PAR         MULTIPLY BY LENGTH OF NODE FOR DISPL         
FIRCN3   A     R1,FIWP2A           ADD A(START OF PART2 NODES)                  
FIRCN4   ST    R1,FIWNDA           A(NODE)                                      
         J     FIRXE                                                            
         DROP  RF                                                               
                                                                                
*======================================================================         
* CONVERT REF# TO A(CI)                                                         
*======================================================================         
         USING SITABD,RF                                                        
FIRRC    ST    RE,FIWSRE                                                        
         L     RF,FIWRHA           RF= A(RESOURCE TABLE HEADER)                 
         L     R1,FIWREF           R1= REFERENCE NUMBER                         
         S     R1,SITXCIC          SUBTRACT NUMBER OF INDEX CIS                 
         L     RE,SIT1TPT          RF= NUMBER OF TRACKS PER CI                  
         XR    R0,R0                                                            
         MLR   R0,RE               R1= RELATIVE DISK ADDRESS                    
         AL    R1,SIT1STT          R1= A(CI)                                    
         ST    R1,FIWCIA                                                        
         J     FIRXE                                                            
         DROP  RF                                                               
                                                                                
*======================================================================         
* CONVERT REF# TO A(NODE)                                                       
*======================================================================         
         USING SITABD,RF                                                        
FIRRN    L     RF,FIWRHA           RF= A(RESOURCE TABLE HEADER)                 
         L     R1,FIWREF           R1= REFERENCE NUMBER                         
         S     R1,SITXCIC          SUBTRACT NUMBER OF INDEX CIS                 
         MHI   R1,L'SI1PAR         R1= DISPLACEMENT TO NODE                     
         A     R1,FIWP1A           R1= A(NODE)                                  
         ST    R1,FIWNDA                                                        
         BR    RE                                                               
         DROP  RF                                                               
                                                                                
*======================================================================         
* CONVERT FIRST DISK ADDRESS OF CI TO LAST DISK ADDRESS OF CI                   
*                                                                               
*     ON ENTRY - FIWSHA= A(SHARED MEMORY FILE INDEX HEADER)                     
*                FIWRHA= A(RESOURCE HEADER)                                     
*                FIWCIA= FIRST DISK ADDRESS FOR THE CI                          
*                                                                               
*     ON EXIT  - FIWCIA= LAST DISK ADDRESS FOR THE CI                           
*======================================================================         
         USING SITABD,RF                                                        
FIRFL    L     RF,FIWRHA           RF= A(RESOURCE TABLE HEADER)                 
         L     R1,FIWCIA           R1= FIRST A(FOR THIS CI)                     
         CL    R1,SIT2STT          IS THIS A PART1                              
         JL    FIRFL1              . YES                                        
         AL    R1,SIT2TPT          . NO, ADD TRACKS PER PART2 CI                
         J     FIRFL2                                                           
FIRFL1   AL    R1,SIT1TPT          ADD TRACKS PER PART1 CI                      
*                                                                               
FIRFL2   L     R0,SITRFDA          R0= FILES FIRST DISK ADDRESS                 
         NILL  GR0,X'F000'         R0 ISOLATE THE TRACK TO GET 1 TRACK          
         SLR   R1,R0               MINUS ONE TRACK                              
         NILL  GR1,X'F000'         R1 ISOLATE THE TRACK                         
         O     R1,SITRFHR          HIGHEST RECORD IN A TRACK                    
*                                                                               
         ST    R1,FIWCIA                                                        
         BR    RE                                                               
         DROP  RF                                                               
                                                                                
*======================================================================         
* IS A(CI) FOR A PART1                                                          
*                                                                               
*     ON ENTRY - FIWSHA= A(SHARED MEMORY FILE INDEX HEADER)                     
*                FIWRHA= A(RESOURCE HEADER)                                     
*                FIWCIA= FIRST DISK ADDRESS FOR THE CI                          
*                                                                               
*     ON EXIT  - CC EQUAL IF A(CI) IS FOR A PART1                               
*                CC NOT EQUAL IF A(CI) IS FOR A PART2                           
*======================================================================         
         USING SITABD,RF                                                        
FIRC1    ST    RE,FIWSRE                                                        
         L     RF,FIWRHA           RF= A(RESOURCE TABLE HEADER)                 
         CLC   FIWCIA,SIT2STT      COMPARE A(CI) TO A(FIRST PART2 CI)           
         JNL   FIRXH                                                            
         CLC   FIWCIA,SIT1STT      COMPARE A(CI) TO A(FIRST PART1 CI)           
         JNL   FIRXE                                                            
         J     FIRXL               INVALID CI ADDRESS                           
         DROP  RF                                                               
                                                                                
*======================================================================         
* IS A(NODE) FOR A PART1                                                        
*                                                                               
*     ON ENTRY - FIWSHA= A(SHARED MEMORY FILE INDEX HEADER)                     
*                FIWRHA= A(RESOURCE HEADER)                                     
*                FIWNDA= FIRST DISK ADDRESS FOR THE CI                          
*                                                                               
*     ON EXIT  - CC EQUAL IF A(CI) IS FOR A PART1                               
*                CC NOT EQUAL IF A(CI) IS FOR A PART2                           
*======================================================================         
         USING SITABD,RF                                                        
FIRN1    ST    RE,FIWSRE                                                        
         L     RF,FIWRHA           RF= A(RESOURCE TABLE HEADER)                 
         L     R1,FIWNDA           R1= A(INDEX NODE)                            
         S     R1,FIWSHA                                                        
         CL    R1,SITP2ST          COMPARE DISP TO NODE & PART2 START           
         JNL   FIRXH                                                            
         CL    R1,SITP1ST          COMPARE DISP TO NODE & PART1 START           
         JNL   FIRXE                                                            
         J     FIRXL               INVALID INDEX NODE DISPLACEMENT              
         DROP  RF                                                               
                                                                                
*======================================================================         
* EXIT ROUTINES                                                                 
*======================================================================         
FIRXH    LHI   RE,2                EXIT HIGH                                    
         J     FIRX                                                             
FIRXL    LHI   RE,0                EXIT LOW                                     
         J     FIRX                                                             
FIRXE    LHI   RE,1                EXIT EQUAL                                   
FIRX     CHI   RE,1                                                             
         L     RE,FIWSRE                                                        
         BR    RE                                                               
                                                                                
*======================================================================         
* EXIT ROUTINES W/ R2 RESTORE                                                   
*======================================================================         
FIRXH2   LHI   RE,2                EXIT HIGH                                    
         J     FIRX2                                                            
FIRXL2   LHI   RE,0                EXIT LOW                                     
         J     FIRX2                                                            
FIRXE2   LHI   RE,1                EXIT EQUAL                                   
FIRX2    CHI   RE,1                                                             
         L     R2,FIWSR2                                                        
         L     RE,FIWSRE                                                        
         BR    RE                                                               
         EJECT                                                                  
                                                                                
*======================================================================         
* POST FOR INDEX REBUILD AND THEN DUMP                                          
*======================================================================         
FIRPOST  NTR1  BASE=*,LABEL=*                                                   
*                                                                               
         L     R2,FIWSHA                                                        
H        USING SIHDRD,R2                                                        
         L     R3,FIWRHA                                                        
T        USING SITABD,R3                                                        
*                                                                               
*        OI    H.SIHDR,X'80'       REBUILD ENTIRE INDEX                         
*        XC    H.SIHEYE,H.SIHEYE                                                
*                                                                               
         OI    T.SITRIND,SITRBLD   SET REBUILD FOR THIS RESOURCE                
*                                                                               
         LOCASCB STOKEN=H.SIHMSTOK LOCATE ASCB FROM JOB STOKEN                  
         LTR   RF,RF                                                            
         JNZ   FIRPOSTS                                                         
*                                                                               
         LR    R4,R1                                                            
A        USING ASCB,R4                                                          
         CLC   A.ASCBASCB,=C'ASCB'                                              
         JNE   FIRPOSTA                                                         
*                                                                               
         L     R3,H.SIHMECB                                                     
         POST  (R3),911,ASCB=(R4),LINKAGE=SYSTEM,ECBKEY=8,MF=(E,FIRPLF)         
         LTR   RF,RF                                                            
         JNZ   FIRPOSTP                                                         
*                                                                               
         WTO   'AUTONOTE*US-MF_FAC_NOTIFY:*WARNING* INDEX REBUILD'              
         DC    H'0'                                                             
FIRPOSTS WTO   'AUTONOTE*US-MF_FAC_NOTIFY:*ERROR* POST FAIL (STOKEN)*'          
         DC    H'0'                                                             
FIRPOSTA WTO   'AUTONOTE*US-MF_FAC_NOTIFY:*ERROR* POST FAIL (ASCB)*'            
         DC    H'0'                                                             
FIRPOSTP WTO   'AUTONOTE*US-MF_FAC_NOTIFY:*ERROR* POST FAIL (POST)*'            
         DC    H'0'                                                             
FIRPOSTM WTO   'AUTONOTE*US-MF_FAC_NOTIFY:*WARNING* RETRY MAX EXCEEDED'         
         DC    H'0'                                                             
*                                                                               
FIRPLF   POST  ECBKEY=YES,MF=L                                                  
         DROP  A,H,T                                                            
         EJECT                                                                  
                                                                                
