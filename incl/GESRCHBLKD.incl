*          DATA SET GESRCHBLKD AT LEVEL 015 AS OF 06/17/10                      
***********************************************************************         
* DSECT COVERING SEARCH CONTROL BLOCK                                 *         
*                                                                     *         
* BLOCK CONTROLS THE SEARCH AND IS THE PRINCIPAL COMMUNICATION VEHICLE*         
* WITHIN THE SEARCH SUBSYSTEM.                                        *         
*                                                                     *         
* THE SEARCH USER MUST PASS THE ADDRESS OF THIS BLOCK AS THE FIRST    *         
* PARAMETER WHEN CALLING THE SEARCH. INTER MODULE CALLS WITHIN THE    *         
* SEARCH SYSTEM ALSO DO THE SAME                                      *         
***********************************************************************         
SEARCHD  DSECT                                                                  
*                                                                               
* THE FIRST FIELDS TELL THE SEARCH CONTROLLER WHAT IT IS TO DO. THIS IS         
* DONE BY GIVING THE STYLE AND ADDRESS OF THE INPUT AND THE STYLE AND           
* ADDRESS OF THE REQUIRED OUTPUT. STYLE CODES FOR INPUT AND OUTPUT USE          
* THE SAME STRUCTURE, AND ARE COMPOSITE BIT CODES.                              
*                                                                               
SBSTYLI  DS    0C        +0        SEARCH INPUT STYLE CODE                      
SBAIN    DS    A         +0        A(INPUT AREA) IF STYLE REQUIRES ONE          
*                                                                               
SBSTYLO  DS    0C        +4        SEARCH OUTPUT STYLE CODE                     
SBAOUT   DS    A         +4        A(OUTPUT AREA) IF STYLE REQUIRES ONE         
*                                                                               
* THE ACTIONS AVAILABLE FORM MORE OR LESS A SERIES OF STEPS IN THE              
* SEARCH PROCESS. AND ARE SUMMARISED AS FOLLOWS.                                
*                                                                               
*        1. VALIDATE SEARCH KEY (NAME AND USER FILTERS)                         
*        2. PERFORM THE SEARCH BUILDING A BITLIST WITH A BIT ON FOR             
*           EACH QAULIFYING SEQUENCE NUMBER.                                    
*        2A.FOR SIMPLE FILE SEARCH, BUILD A DALIST OF QUALIFYING FILE           
*           RECORDS (NO SEARCH PASSIVES, NO BITLIST OR SEQLIST USED).           
*           DALIST IS BUILT BY APPLICATION ROUTINE.                             
*        3. CONVERT THE BIT LIST INTO A LIST OF QUALIFYING SEQUENCE             
*           NUMBERS.                                                            
*        3A.CONVERT A LIST OF QUALIFYING SEQUENCE NUMBERS INTO A LIST           
*           OF DISK ADDRESSES.                                                  
*        4. EXTRACT THE NEXT SEQUENCE NUMBER FROM A SEQUENCE NUMBER             
*           LIST.                                                               
*        4A.EXTRACT THE NEXT DISK ADDRESS FROM A DISK ADDRESS LIST.             
*        5. RETURN THE DISK ADDRESS OF THE RECORD WITH THE GIVEN                
*           SEQUENCE NUMBER.                                                    
*        6. RETURN THE RECORD AT THE GIVEN DISK ADDRESS.                        
*        7. EXTRACT AND FORMAT DATA FROM THE GIVEN RECORD USING THE             
*           APPLICATION DEPENDANT EXTRACT ROUTINE.                              
*        7A.EXTRACT AND FORMAT DATA FROM THE GIVEN TABLE LIST ENTRY.            
*        X. CREATE PASSIVE POINTER LIST FROM GIVEN RECORD. THIS IS A            
*           SPECIAL NON-SEARCH CALL FOR USE BY LFM AND XXLDCPTR/TPTR            
*           PROGRAMS. IT HAS NO CONNECTION WITH ANY OTHER STYLE.                
*                                                                               
* THE ACTION REQUESTED CAN BE ONE OF, OR A RANGE OF THE ABOVE STEPS,            
* EXCEPT FOR X., WHICH IS A STAND ALONE CALL FOR FILE MAINTENANCE USE.          
* SEARCH WILL CARRY OUT ALL THE INTERMEDIATRE STEPS BETWEEN THE INPUT           
* STYLE AND THE REQUIRED OUTPUT STYLE. ITEMS 3A AND 4A ARE EXCEPTIONS           
* IN THAT THEY WOULD NOT BE USED INTERNALLY, ONLY IF THE OUTPUT STYLE           
* SPECIFIED A DA LIST. OBVIOUSLY THE OUTPUT STYLE MUST BE CHOSEN FROM           
* LATER IN THE ABOVE LIST THAN THE INPUT STYLE.                                 
         EJECT                                                                  
* INPUT/OUTPUT STYLE CODE VALUES.                                               
*                                                                               
SBSTVALQ EQU   X'00'               INPUT STYLE IS VALIDATE REQUEST              
*                                                                               
* THE CALLER MUST PASS THE ADDRESS OF THE TWA KEY FIELD HEADER AS THE           
* 2ND PARAMETER. IF THE OUTPUT STYLE IS ZERO, THE SEARCH WILL NOT BEGIN         
* THE KEY FIELD IS ANALYSED ONLY AND THE CALLER CAN THEN TEST FOR ANY           
* CHANGE TO THE RESULTING FILTERS. IF THE SEARCH IS TO BEGIN, SBAIN             
* MUST CONTAIN A(BITLIST) TO BE USED BY THE SEARCH.                             
*                                                                               
SBSTSRCQ EQU   X'01'               INPUT STYLE IS SEARCH.                       
*                                                                               
* SBAIN MUST CONTAIN A(BITLIST) TO BE USED BY THE SEARCH. THE PRECEDING         
* CALL MUST HAVE BEEN A SBSTVALQ STYLE TO SET UP THE SEARCH.                    
*                                                                               
SBSTBTLQ EQU   X'02'+SBSTLSTQ      INPUT/OUTPUT IS A BITLIST                    
*                                                                               
* IF BITLIST IS INPUT, SBAIN CONTAINS A(BITLIST). BUT IF BITLIST IS             
* OUTPUT, SBAIN CONTAINS A(BITLIST) FOR USE BY SEARCH AND SO SBAOUT             
* IS NOT NEEDED AND IS IGNORED.                                                 
*                                                                               
SBSTSEQ  EQU   X'04'               INPUT/OUTPUT IS A SEQUENCE CODE              
SBSTSELQ EQU   SBSTSEQ+SBSTLSTQ    OR A LIST OF SEQUENCE CODES.                 
*                                                                               
* SBSEQNCE IS USED FOR SINGLE SEQUENCE CODES OTHERWISE SBAIN/SBAOUT             
* MUST CONTAIN A(SEQLIST).                                                      
*                                                                               
SBSTKELQ EQU   X'05'+SBSTLSTQ      INPUT/OUTPUT IS A KEY LIST                   
*                                                                               
* SBAIN/SBAOUT MUST CONTAIN A(KYLIST). SINGLE FORM NOT DEFINED.                 
*                                                                               
SBSTTBLQ EQU   X'06'+SBSTLSTQ      INPUT/OUTPUT IS A TABLE LIST                 
*                                                                               
* SBAIN/SBAOUT MUST CONTAIN A(TBLIST). SINGLE FORM NOT DEFINED.                 
*                                                                               
SBSTDAQ  EQU   X'08'               INPUT/OUTPUT IS A DISK ADDRESS               
SBSTDALQ EQU   SBSTDAQ+SBSTLSTQ    OR A LIST OF DISK ADDRESSES.                 
*                                                                               
* SBDA IS USED FOR SINGLE DISK ADDRESSES OTHERWISE SBAIN/SBAOUT MUST            
* CONTAIN A(DALIST).                                                            
*                                                                               
SBSTLSTQ EQU   X'40'               BIT ON IF INPUT/OUTPUT IS A LIST             
*                                                                               
* IF LOW ORDER BITS ZERO (LIST TYPE NOT DEFINED), TYPE OF LIST IS               
* DETERMINED FROM LIST HEADER IF INPUT, OR BUILT ACCORDING TO SEARCH            
* TYPE IF OUTPUT.                                                               
*                                                                               
SBSTREQ  EQU   SBSTDAQ+X'10'       INPUT/OUTPUT IS A RECORD.                    
*                                                                               
* SBAIN/SBAOUT CONTAINS A(RECORD).                                              
*                                                                               
SBSTRXQ  EQU   SBSTREQ+X'20'       OUTPUT IS A RECORD EXTRACT.                  
*                                                                               
* SBAOUT CONTAINS A(EXTRACT O/P AREA)                                           
*                                                                               
SBSTPRVQ EQU   X'80'    (SBSTYLI)  USE PREVIOUS LIST ENTRY, NOT NEXT            
*                                                                               
* IF INPUT IS A LIST, AND OUTPUT IS A SINGLE ITEM, NORMAL ACTION IS TO          
* RETURN THE NEXT ENTRY. IF THIS BIT IS ON IN SBSTYLI, THE PREVIOUS             
* ENTRY WILL BE RETURNED INSTEAD. IT IS IGNORED FOR A BIT LIST.                 
*                                                                               
SBSTDFLQ EQU   X'80'    (SBSTYLO)  USER FILTERS AT DIRECTORY LEVEL              
*                                                                               
* USER DEFINED FILTERING IS NORMALLY CARRIED OUT ONLY AT FILE LEVEL AS          
* EACH RECORD IS READ. THUS, THE SEARCH NEED NOT BE REPEATED IF ONLY            
* USER FILTERS HAVE BEEN CHANGED. ALL SUCH FILTERING IS DONE ON READING         
* THE FILE RECORDS. IF THIS BIT IS ON IN SBSTYLO, DIRECTORY FILTERING           
* WILL BE USED AS EARLY AS POSSIBLE. FILE LEVEL FILTERING MUST ALWAYS           
* INCLUDE ANY FILTERING ALSO DONE AT DIRECTORY LEVEL                            
*                                                                               
SBSTPASQ EQU   X'FF'               OUTPUT IS PASSIVE POINTER LIST               
*                                                                               
* SBSTPASQ IS FOR USE BY MAINTENENCE PROGRAMS. INPUT MUST BE A RECORD.          
* IF SBSTYLO IS SBSTPASQ, SBSTYLI CONTAINS OPTIONS TO CONTROL PASSIVE           
* BUILDING AS FOLLOWS. THESE OPTIONS MAY BE SET BY THE PASSIVE POINTER          
* HOOK IN THE SYSTEM'S DIRECTORY MODULE, AS WELL AS SRCHEXEC'S CALLER.          
*                                                                               
SBPSOVSQ EQU   X'80'               USE USERS SUPPLIED SEQNO IN SBSEQNCE         
*              X'67'               SPARE                                        
*              X'18' (=SBSTREQ)    NOT USED, SET BY SOME OLDER PROGRAMS         
         EJECT                                                                  
* IF INPUT OR OUTPUT STYLE IS A SINGLE SEQUENCE CODE OR DISK ADDRESS            
* THE FOLLOWING AREAS ARE USED RATHER THAN SBAIN/SBAOUT. THEY ARE ALSO          
* FILLED IN WHEN READING A FILE RECORD.                                         
*                                                                               
SBSEQNCE DS    CL4       +8        SEQUENCE CODE AREA                           
SBDA     DS    CL4       +12       DISK ADDRESS AREA                            
         SPACE                                                                  
* THE FOLLOWING FIELD DEFINES THE ITEM BEING SEARCHED                           
* WHEN INITIALIZING,  SBSYSTEM AND SBSEARCH MAY BE SPECIAL FORMS                
* SBSYSTEM=SPACES,    SYSTEM LOOKUP USES SBOVSYS                                
* SBSYSTEM=NULLS,     SBDSYS POINTS TO SYSTEM ENTRY                             
* SBSYSTEM(5)=NULLS,  SBSYSTEM+5(1) IS OVSYS FOR SYSTEM LOOKUP                  
* SBSEARCH=SPACES,    SEARCH LOOKUP USES ID NUMBER FROM EXTENDED HEADER         
* SBSEARCH=NULLS,     SBDSRCH POINTS TO SEARCH ENTRY.                           
*                     IF SBDSRCH IS NULL TOO, ASSUME PASSED TABLE SRCH          
*                                                                               
SBID     DS    0CL32               SEARCH ID (LANGUAGE=SBLANG)                  
SBSYSTEM DS    CL6       +16       SYSTEM CODE                                  
SBSEARCH DS    CL8       +22       SEARCH CODE WITHIN SYSTEM                    
SBOTHER  DS    CL18      +30       OTHER QUALIFYING DATA, AS REQUIRED           
         SPACE                                                                  
* THE FOLLOWING MUST BE PROVIDED BY THE CALLER, EXCEPT ....                     
* *=RETURNED VIA FASWITCH IF SERVICE SYS, OR NOT CONNECTED TO SBSYSTEM          
*                                                                               
* NOTE. ON 1ST CALL, SBAPPFAC MUST POINT TO A 256 BYTE AREA CONTAINING          
* A COPY OF CONNECTED SYSTEMS FACILITY LIST IF NOT A SERVICE RQST.              
* IF RUNNING UNDER A SERVICE REQUEST, OR IF THE CALLER IS NOT CONNECTED         
* TO THE SYSTEM TO BE SEARCHED, SEARCH WILL SWITCH TO THE REQUIRED              
* SYSTEM, AND ITS FACILITY LIST WILL BE COPIED INTO THE AREA ADDRESSED          
* BY SBAPPFAC, OVERWRITING ANY LIST ALREADY THERE.                              
* SBIDLANG=IDLANG, UNLESS INVOKED VIA SRCHCALL WHEN SBIDLANG=0. THIS            
* IS BECAUSE INVOKING PROGRAMS PASS SEARCH ID IN ENGLISH, BUT DIRECT            
* ENTRY OF SEARCH ID BY USER IS IN CONNECTED LANGUAGE.                          
*                                                                               
SBUSER   DS    CL2       +48       AGENCY ID NUMBER                             
SBPASSWD DS    CL2       +50       PASSWORD ID NUMBER                           
SBAGY    DS    CL2       +52       AGENCY ALPHA                                 
SBAGYB   DS    CL1       +54     * AGENCY BINARY NUMBER                         
SBCTRY   DS    CL1       +55       CONNECTED COUNTRY CODE                       
SBLANG   DS    CL1       +56       CONNECTED LANGUAGE CODE                      
SBIDLANG DS    CL1       +57       LANGUAGE FOR SBID LOOKUP                     
SBOVSYS  DS    CL1       +58       CALLERS CONNECTED OVSYS                      
SBSVCREQ DS    CL1       +59       NON-ZERO INDICATES SERVICE REQUEST           
SBACCS   DS    0CL4      +60     * LIMIT ACCESS BYTES. BUT IF SERVICE           
SBASYSL  DS    A                   RQST, INITIALLY A(VALID SYSTEM LIST)         
*                                  IF SBCALLER HAS SBCALLAQ SET,SBACCS          
*                                  WILL CONTAIN THE ADDRESS OF A LIMACC         
*                                  BLOCK.                                       
SBAPPFAC DS    A         +64       A(256 BYTES) FOR APPLICATION FACLIST         
*                                  WILL BE OVERWRITTEN IF SWITCH OCCURS         
SBCOMFAC DS    A         +68       A(COMFACS)                                   
SBATWA   DS    A         +72       A(TWA)                                       
         SPACE                                                                  
* THE FOLLOWING ADDRESSES ARE SET BY SEARCH USING SBSYSTEM AND SBSEARCH         
* SBASYS MUST BE ZEROED FOR THE FIRST CALL WITHIN A TASK. IF IT IS NOT          
* ZERO, SEARCH ASSUMES THE BLOCK TO BE ALREADY INITIALIZED.                     
*                                                                               
SBADIRS  DS    0CL8                DIRECTORY ADDRESSES                          
SBASYS   DS    A         +76       A(SYSTEM HEADER FOR THIS SEARCH)             
SBASRCH  DS    A         +80       A(SEARCH DIRECTORY ENTRY FOR SEARCH)         
*                                  NULL IF SEARCHING PASSED TABLE               
         SPACE                                                                  
* HIGHEST SEQUENCE NUMBER ALLOCATED TO REQUESTED SEARCH                         
*                                                                               
SBMAXSEQ DS    A         +84                                                    
         SPACE                                                                  
* ADDRESS OF PARSER MODULE, PROVIDED BY SEARCH CONTROLLER                       
*                                                                               
SBPARSER DS    A         +88       ADDRESS OF NAME PARSER ROUTINE               
SBPARSKQ EQU   0                   PARSER SEARCH KEY STYLE CALL                 
SBPARSPQ EQU   1                   PARSER PASSIVE STYLE CALL                    
SBPARSSQ EQU   2                   PARSER SIMPLE PARSE + COMPARE CALL           
SBPARSCQ EQU   3                   PARSER COMPARE STYLE CALL                    
         SPACE                                                                  
* IS AND DA FILENAME OVERRIDES. IF ZERO, NAMES ARE IN SDSYDIRN/FILN             
* IF NON-ZERO, IT IS DISPLACEMENT INTO SBASAVE WHERE APPLICATION HAS            
* PLACED AN OVERRIDE FILENAME.                                                  
*                                                                               
SBDODIRN DS    H         +92       DISP INTO SBASAVE FOR O/RIDE DIRNAME         
SBDOFILN DS    H         +94       DISP INTO SBASAVE FOR O/RIDE FILNAME         
         SPACE                                                                  
* DIRECTORY DISPLACEMENTS. RETURNED BY SEARCH CONTROLLER                        
*                                                                               
SBDDIRS  DS    0CL4                DIRECTORY DISPLACEMENTS                      
SBDSYS   DS    Y         +96       Y(SYSTEM HEADER FOR THIS SEARCH)             
SBDSRCH  DS    Y         +98       Y(SEARCH DIRECTORY ENTRY FOR SEARCH)         
*                                  NULL IF SEARCHING PASSED TABLE               
*                                                                               
* MODE QUALIFIES APPLICATION SUBROUTINE CALLS                                   
* CALLER INDICATES WHAT CALLED, AND IS SET BY, THE SEARCH CONTROLLER            
*                                                                               
SBMODE   DS    CL1       +100                                                   
SBCALLER DS    CL1       +101                                                   
SBCALONQ EQU   X'80'               CALLER IS RUNNING UNDER FACPAK               
SBCALOFQ EQU   X'40'               CALLER IS RUNNING OFFLINE                    
SBCALXSQ EQU   X'20'               SBAXSAVE IS PRESENT                          
SBCALLAQ EQU   X'10'               SBACCS CONTAINS A(LIMACC BLOCK)              
SBCALSRQ EQU   X'08'+SBCALONQ      CALLER IS FACPAK SERVICE REQUEST             
SBCALLDQ EQU   X'04'+SBCALOFQ      CALLER IS DMLDMOD                            
SBCALSOQ EQU   X'02'               STAND-ALONE =SEARCH CALL                     
         SPACE                                                                  
* ERROR RETURN FIELDS. TO BE IGNORED IF RETURNED CONDITION CODE IS ZERO         
* SBRETURN CONTAINS A RETURN CODE FROM THE EQUATED LIST. IF IT CONTAINS         
* SBETXTQ, THE ERROR CODE IS SET UP IN THE GETTXT BLOCK IN SBTXTBLK.            
* THIS BLOCK MAY ALSO CONTAIN QUALIFYING DETAILS FOR ANY SBRETURN CODE.         
* OPTIONAL TEXT STRINGS FOR GETMSG SHOULD BE BUILT IN SBOPTTXT.                 
*                                                                               
SBRETURN DS    CL1       +102      ERROR CODE WITHIN SYSTEM                     
SBERRFLD DS    CL1       +103      FIELD IN ERROR 1=ID,2=KEY, 0=NEITHER         
SBTXTBLK DS    CL24      +104      GETTXT BLOCK (SEE FAGETTXTD)                 
         SPACE                                                                  
* SEARCH RETURN CODES (IN SBRETURN)                                             
*                                                                               
* 'END OF' OR FILTER TYPE RETURNS                                               
*                                                                               
SBREOLQ  EQU   0                   NO MORE ENTRIES IN LIST                      
SBRFLTQ  EQU   SBREOLQ             RECORD FAILED FILTERING                      
SBRSECQ  EQU   180                 RECORD FAILED SECURITY CHECK                 
*                                                                               
SBRMORQ  EQU   187                 MORE DATA                                    
SBENCTQ  EQU   188                 USER NOT CONNECTED (SERVICE REQUEST)         
SBENOPQ  EQU   189                 SYSTEM NOT OPERATIONAL                       
SBAUTHQ  EQU   190                 USER NOT AUTHORISED FOR SYSTEM               
SBETXTQ  EQU   192                 GETTXT BLOCK (SBTXTBLK) CONTAINS             
*                                  APPLICATION ERROR DETAIL.                    
*                                                                               
* USER INPUT ERRORS ETC.                                                        
*                                                                               
SBEMIFQ  EQU   1                   MISSING INPUT                                
SBEIIFQ  EQU   2                   INVALID INPUT                                
SBEFTSQ  EQU   3                   FIELD TOO SHORT                              
SBEFTLQ  EQU   4                   FIELD TOO LONG                               
SBETMNQ  EQU   5                   TOO MANY INPUT ITEMS                         
SBEIKWQ  EQU   6                   INVALID KEYWORD                              
SBEDKWQ  EQU   7                   KEYWORD ALREADY USED                         
SBEIFVQ  EQU   8                   INVALID FILTER VALUE                         
SBERWFQ  EQU   9                   RETURN DATA WON'T FIT FIELD                  
*                                                                               
SBEMNFQ  EQU   10                  MISSING NAME FIELD                           
SBETNFQ  EQU   11                  TOO MANY NAME FIELDS                         
SBEDNFQ  EQU   12                  NAME FIELD DUPLICATES ANOTHER                
SBEXNFQ  EQU   13                  TOO MUCH NAME DATA FOR SAVE AREA             
SBENWFQ  EQU   14                  NO EFFECTIVE WORDS IN NAME                   
SBETMWQ  EQU   15                  TOO MANY WORDS IN NAME                       
SBESELQ  EQU   16                  CAN'T DO MULTI-SELECTS                       
*                                                                               
SBEHLPQ  EQU   20                  HELP DISPLAYED                               
*                                                                               
SBELTSQ  EQU   30                  OUTPUT LIST TOO SMALL                        
SBESYSQ  EQU   31                  UNDEFINED SEARCH SYSTEM                      
SBESRCQ  EQU   32                  UNDEFINED SEARCH                             
*                                                                               
* LOGIC ERRORS ETC. 192-255                                                     
*                                                                               
SBERRORQ EQU   SBETXTQ             MORE THAN THIS = LOGIC ERROR                 
*                                                                               
SBENITQ  EQU   255                 SEARCH BLOCK NOT INITIALIZED                 
SBESTIQ  EQU   254                 INVALID INPUT STYLE                          
SBESTOQ  EQU   253                 INVALID OUTPUT STYLE                         
SBESTCQ  EQU   252                 INPUT AND OUTPUT STYLES INCOMPATIBLE         
SBEILSQ  EQU   249                 INVALID LIST HEADER                          
SBELTBQ  EQU   248                 INPUT LIST TOO BIG TO CONVERT                
SBEPELQ  EQU   246                 'NEXT' CALL AFTER END OF LIST                
SBEINFQ  EQU   245                 INVALID NAME FIELD                           
*                                                                               
SBEIIOQ  EQU   244                 IO ERROR                                     
SBENRFQ  EQU   243                 NO RECORD FOUND                              
         EJECT                                                                  
* THE FOLLOWING SECTION SHOULD BE SAVED ON TEMPSTR BETWEEN SCREENS              
*                                                                               
SBSAVE   DS    0C        +128      (SEE SBLSAVE FOR LENGTH)                     
         SPACE                                                                  
* THE FOLLOWING AREA HOLDS THE 'PARSED' NAME FIELDS WHICH FORM THE              
* MAJOR FILTER FOR THIS SEARCH.                                                 
*                                                                               
* PARSED NAMES ARE HELD AS A SERIES OF VARIABLE LENGTH NAME ELEMENTS,           
* EACH CONTAINING A STRING OF WORD ENTRIES. ELEMENT CODE IS SBNAMELQ,           
* LENGTH IS VARIABLE, TOTAL LENGTH OF ALL NAME ELEMENTS MUST NOT EXCEED         
* L'SBPNAMES, AND NUMBER OF NAME ELEMENTS MUST NOT EXCEED SBMNAMEQ.             
* PARSER MAINTAINS NAME ELEMENTS IN ASCENDING ALPHA SEQUENCE                    
*                                                                               
* EACH WORD IN A NAME ELEMENT IS A VARIABLE LENGTH STRING OF LENGTH             
* EQUAL TO THE WORD LENGTH PLUS 2. 1ST BYTE IS THE WORD LENGTH, 2ND             
* IS A FLAG BYTE, FOLLOWED BY THE WORD. PARSER INSERTS WORDS INTO NAME          
* ELEMENT IN ASCENDING ALPHA SEQUENCE, UNLESS ENTRY SEQUENCE IS TO BE           
* MAINTAINED.                                                                   
*                                                                               
SBNAMES  DS    0CL128              PARSED NAME AREA                             
SBNNAMES DS    X         +128      NUMBER OF NAME STRINGS FOUND                 
SBPNAMES DS    CL127     +129      PARSED NAME BLOCKS                           
* NAME PARSER EQUATES                                                           
SBMNAMEQ EQU   10                  MAXIMUM NAME STRINGS ALLOWED.                
SBNAWLNQ EQU   10                  MAXIMUM WORD LENGTH ALLOWED.                 
SBNAWMXQ EQU   8                   MAX NUMBER WORDS ALLOWED IN NAME             
SBNAWXTQ EQU   16                  MAX WORDS IF SDSRIND1=SDSRIXTQ               
SBNALENQ EQU   32                  MAXIMUM LENGTH OF A NAME STRING              
SBNAMELQ EQU   X'01'               NAME STRING ELEMENT CODE                     
* WORD FLAG BYTE EQUATES.                                                       
SBNWFPMQ EQU   X'80'               WORD IS A PARTIAL WORD                       
SBNWFOWQ EQU   X'40'               WORD IS THE ONLY ONE IN THE NAME             
SBNWFDWQ EQU   X'20'               NOT 1ST OCCURENCE OF WORD IN NAME            
SBNWFINQ EQU   X'10'               WORD INCLUDES SUBSEQUENT WORD(S)             
SBNWFMTQ EQU   X'01'               WORD ALREADY MATCHED                         
*              X'0E'               UNUSED                                       
         SPACE                                                                  
* THE FOLLOWING IS AN APPLICATION DEPENDENT 'SAVE' AREA.                        
* THE APPLICATION FILTER ROUTINE MUST SAVE ANY DECODED FILTER DATA AT           
* THE START, WITH THE LENGTH USED IN THE FIRST BYTE. THIS CAN THEN BE           
* USED TO TEST IF FILTER DATA HAS CHANGED BETWEEN SCREENS. THE AREA             
* REMAINING CAN BE USED FOR ANY PURPOSE BY THE APPLICATION S/RTNS               
*                                                                               
SBASAVE  DS    0CL128              APPLICATION SAVE AREA                        
SBLFILT  DS    C         +256      LENGTH OF FILTER DATA                        
SBFILT   DS    0C                  FILTER DATA                                  
         DS    CL127     +257      DIVIDED BETWEEN FILTER/SAVED DATA            
         SPACE                                                                  
SBLSAVE  EQU   SBASAVE-SBSAVE+128  LENGTH OF SAVED DATA                         
         SPACE                                                                  
* SPACE FOR GETTXT OPTIONAL MESSAGE STRINGS                                     
*                                                                               
SBOPTTXT DS    CL64      +384                                                   
         SPACE                                                                  
         DS    C                   NONZERO IF HEADER NOT REQUIRED               
*                                  (SEE SBEXHEAD)                               
SEARCHDL EQU   *-SEARCHD           BASIC LENGTH OF SEARCH CONTROL BLOCK         
         ORG   *-1                                                              
         EJECT                                                                  
* THE FOLLOWING AREA IS USED ONLY IF RECORD EXTRACT OUTPUT IS REQUIRED.         
* IF THE FIRST TWO BYTES ARE ZERO, SEARCH WILL MOVE THE EXTRACT HEADER          
* INTO THIS AREA WHEN RETURNING FROM ANY CALL WITH SBSTYLO=SBSTRXQ. IF          
* NONZERO, THE HEADER IS ASSUMED TO BE STILL THERE FROM THE LAST TIME.          
* IF THE HEADER IS NOT REQUIRED, SET SBEXHEAD(1)=NONZERO.                       
*                                                                               
SBEXHEAD DS    0CL256     +448     APPLICATION EXTRACT HEADER                   
SBEXHNHD DS    X          +448     NUMBER OF HEADLINES REQUIRED                 
SBEXHDKY DS    X          +449     DISPLACEMENT TO SELECT KEY ENTRY             
SBEXHDNA DS    X          +450     DISPLACEMENT TO SELECT NAME ENTRY            
SBEXHTIL DS    X          +451     LENGTH OF SEARCH TITLE                       
SBEXHTIT DS    0X         +452     VARIABLE LENGTH SEARCH TITLE                 
         DS    CL(256-(*-SBEXHEAD)) FOLLOWED BY FIELD HEADER ENTRIES            
         SPACE                                                                  
SEARCHDX EQU   *-SEARCHD           LENGTH OF BLOCK WITH EXTRACT HEADER          
         SPACE                                                                  
* THE FOLLOWING 1K AREA IS ONLY PRESENT IF SBCALXSQ IN SBCALLER IS ON.          
* IT IS ALWAYS PRESENT, AND SBCALXSQ IS ON, IF THE CALLER IS $SEARCH.           
* IF PRESENT, THE CALLER WILL SAVE THE AREA BETWEEN CALLS WHEREVER              
* POSSIBLE. IF NOT POSSIBLE, AND ON FIRST CALL, THE FIRST BYTE OF THE           
* AREA WILL BE SET TO X'00'. THE APPLICATION CAN USE SBAXSAVE AS AN             
* EXTENSION TO SBASAVE IF SBCALXSQ IS ON, BUT MUST BE AWARE THAT IF THE         
* FIRST BYTE IS X'00', THE CONTENTS ARE UNPREDICTABLE AND MUST BE               
* INITIALISED, SETTING THE FIRST BYTE TO A VALUE OTHER THAN X'00'.              
*                                                                               
SBAXSAVE DS    0CL1024             APPLICATION EXTRA SAVE AREA                  
SEARCHDZ EQU   SBAXSAVE-SEARCHD+L'SBAXSAVE LENGTH WITH SBAXSAVE IN USE          
         SPACE 2                                                                
***********************************************************************         
* LIST HEADER, PRESENT AT FRONT OF BITLIST, SEQLIST, DALIST ETC.      *         
***********************************************************************         
*                                                                               
* USER MUST FILL IN LENGTH WHEN PASSING A LIST FOR SEARCH OUTPUT.               
* SEARCH WILL RESET LENGTH OF SEQ AND DA LIST ON COMPLETION TO REFLECT          
* ACTUAL NUMBER OF ENTRIES IF NOT EXACTLY FULL. IF LIST IS TOO SHORT,           
* ENTRIES ACTIVE WILL BE SET TO X'FF'S.                                         
*                                                                               
SRCHLSTD DSECT                                                                  
SRCHLLEN DS    CL2                 LENGTH OF LIST IN BYTES                      
SRCHLTYP DS    CL2                 LIST TYPE                                    
SRCHLTBQ EQU   C'SB'               BITLIST (1 BIT PER POSSIBLE SEQNUM)          
SRCHLTSQ EQU   C'SS'               SEQLIST (1 ENTRY PER ACTIVE SEQNUM)          
SRCHLTDQ EQU   C'SD'               DALIST (1 ENTRY PER ACTIVE RECORD)           
SRCHLTTQ EQU   C'ST'               TABLIST (TABLE (SEE GESRCHTABD))             
SRCHLTKQ EQU   C'SK'               KEYLIST (1 KEY OR PART KEY PER NTRY)         
SRCHLFLG DS    C                   FLAG BYTE                                    
SRCHLFDQ EQU   X'80'               DIRECTORY FILTERS APPLIED TO LIST            
SRCHLSDQ EQU   X'40'               DIRECTORY SECURITY CHECK APPLIED             
SRCHLNAL DS    CL3                 ENTRIES ALLOCATED (EXCEPT TABLE)             
SRCHLNAC DS    CL3                 ENTRIES ACTIVE                               
SRCHLSMQ EQU   999                 MAXIMUM ENTRIES ALLOWED IN SEQLIST           
SRCHLNXT DS    CL3                 INDEX OF NEXT ENTRY TO BE RETURNED           
SRCHLNTL DS    CL2                 ENTRY LENGTH. NOT USED FOR DALIST OR         
*                                  BITLIST: SET TO 2 OR 3 IF SEQLIST:           
*                                  ENTRY LENGTH IF FIXED WIDTH TABLE,           
*                                  ZERO IF VARIABLE WIDTH TABLE:                
*                                  KEY/PART KEY LENGTH IF KEY LIST.             
SRCHLLST DS    0C                  START OF LIST ENTRIES OR TABLE               
SRCHLLNQ EQU   *-SRCHLSTD          LENGTH OF LIST HEADER.                       
         SPACE 3                                                                
*        RESET TO SEARCH BLOCK DSECT, SO SAVE AREA CAN BE REDEFINED             
*                                                                               
SEARCHD  DSECT                                                                  
         ORG   SBASAVE             BACK TO APPLICATION SAVE AREA                
         DS    C                   FILTER LENGTH                                
